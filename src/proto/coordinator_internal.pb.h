// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator_internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_coordinator_5finternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_coordinator_5finternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_coordinator_5finternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_coordinator_5finternal_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coordinator_5finternal_2eproto;
namespace dingodb {
namespace pb {
namespace coordinator_internal {
class PartitionInternal;
struct PartitionInternalDefaultTypeInternal;
extern PartitionInternalDefaultTypeInternal _PartitionInternal_default_instance_;
class TableInternal;
struct TableInternalDefaultTypeInternal;
extern TableInternalDefaultTypeInternal _TableInternal_default_instance_;
}  // namespace coordinator_internal
}  // namespace pb
}  // namespace dingodb
PROTOBUF_NAMESPACE_OPEN
template<> ::dingodb::pb::coordinator_internal::PartitionInternal* Arena::CreateMaybeMessage<::dingodb::pb::coordinator_internal::PartitionInternal>(Arena*);
template<> ::dingodb::pb::coordinator_internal::TableInternal* Arena::CreateMaybeMessage<::dingodb::pb::coordinator_internal::TableInternal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dingodb {
namespace pb {
namespace coordinator_internal {

// ===================================================================

class PartitionInternal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.coordinator_internal.PartitionInternal) */ {
 public:
  inline PartitionInternal() : PartitionInternal(nullptr) {}
  ~PartitionInternal() override;
  explicit PROTOBUF_CONSTEXPR PartitionInternal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartitionInternal(const PartitionInternal& from);
  PartitionInternal(PartitionInternal&& from) noexcept
    : PartitionInternal() {
    *this = ::std::move(from);
  }

  inline PartitionInternal& operator=(const PartitionInternal& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartitionInternal& operator=(PartitionInternal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartitionInternal& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartitionInternal* internal_default_instance() {
    return reinterpret_cast<const PartitionInternal*>(
               &_PartitionInternal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PartitionInternal& a, PartitionInternal& b) {
    a.Swap(&b);
  }
  inline void Swap(PartitionInternal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartitionInternal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartitionInternal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartitionInternal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartitionInternal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartitionInternal& from) {
    PartitionInternal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionInternal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.coordinator_internal.PartitionInternal";
  }
  protected:
  explicit PartitionInternal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionIdsFieldNumber = 3,
    kRangeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated uint64 region_ids = 3 [json_name = "regionIds"];
  int region_ids_size() const;
  private:
  int _internal_region_ids_size() const;
  public:
  void clear_region_ids();
  private:
  uint64_t _internal_region_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_region_ids() const;
  void _internal_add_region_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_region_ids();
  public:
  uint64_t region_ids(int index) const;
  void set_region_ids(int index, uint64_t value);
  void add_region_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      region_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_region_ids();

  // .dingodb.pb.common.Range range = 2 [json_name = "range"];
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::dingodb::pb::common::Range& range() const;
  PROTOBUF_NODISCARD ::dingodb::pb::common::Range* release_range();
  ::dingodb::pb::common::Range* mutable_range();
  void set_allocated_range(::dingodb::pb::common::Range* range);
  private:
  const ::dingodb::pb::common::Range& _internal_range() const;
  ::dingodb::pb::common::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::dingodb::pb::common::Range* range);
  ::dingodb::pb::common::Range* unsafe_arena_release_range();

  // uint64 id = 1 [json_name = "id"];
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.coordinator_internal.PartitionInternal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > region_ids_;
    mutable std::atomic<int> _region_ids_cached_byte_size_;
    ::dingodb::pb::common::Range* range_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_5finternal_2eproto;
};
// -------------------------------------------------------------------

class TableInternal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.coordinator_internal.TableInternal) */ {
 public:
  inline TableInternal() : TableInternal(nullptr) {}
  ~TableInternal() override;
  explicit PROTOBUF_CONSTEXPR TableInternal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableInternal(const TableInternal& from);
  TableInternal(TableInternal&& from) noexcept
    : TableInternal() {
    *this = ::std::move(from);
  }

  inline TableInternal& operator=(const TableInternal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableInternal& operator=(TableInternal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableInternal& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableInternal* internal_default_instance() {
    return reinterpret_cast<const TableInternal*>(
               &_TableInternal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TableInternal& a, TableInternal& b) {
    a.Swap(&b);
  }
  inline void Swap(TableInternal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableInternal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableInternal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableInternal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableInternal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableInternal& from) {
    TableInternal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableInternal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.coordinator_internal.TableInternal";
  }
  protected:
  explicit TableInternal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionsFieldNumber = 3,
    kDefinitionFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .dingodb.pb.coordinator_internal.PartitionInternal partitions = 3 [json_name = "partitions"];
  int partitions_size() const;
  private:
  int _internal_partitions_size() const;
  public:
  void clear_partitions();
  ::dingodb::pb::coordinator_internal::PartitionInternal* mutable_partitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::coordinator_internal::PartitionInternal >*
      mutable_partitions();
  private:
  const ::dingodb::pb::coordinator_internal::PartitionInternal& _internal_partitions(int index) const;
  ::dingodb::pb::coordinator_internal::PartitionInternal* _internal_add_partitions();
  public:
  const ::dingodb::pb::coordinator_internal::PartitionInternal& partitions(int index) const;
  ::dingodb::pb::coordinator_internal::PartitionInternal* add_partitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::coordinator_internal::PartitionInternal >&
      partitions() const;

  // .dingodb.pb.meta.TableDefinition definition = 2 [json_name = "definition"];
  bool has_definition() const;
  private:
  bool _internal_has_definition() const;
  public:
  void clear_definition();
  const ::dingodb::pb::meta::TableDefinition& definition() const;
  PROTOBUF_NODISCARD ::dingodb::pb::meta::TableDefinition* release_definition();
  ::dingodb::pb::meta::TableDefinition* mutable_definition();
  void set_allocated_definition(::dingodb::pb::meta::TableDefinition* definition);
  private:
  const ::dingodb::pb::meta::TableDefinition& _internal_definition() const;
  ::dingodb::pb::meta::TableDefinition* _internal_mutable_definition();
  public:
  void unsafe_arena_set_allocated_definition(
      ::dingodb::pb::meta::TableDefinition* definition);
  ::dingodb::pb::meta::TableDefinition* unsafe_arena_release_definition();

  // uint64 id = 1 [json_name = "id"];
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.coordinator_internal.TableInternal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::coordinator_internal::PartitionInternal > partitions_;
    ::dingodb::pb::meta::TableDefinition* definition_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_5finternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PartitionInternal

// uint64 id = 1 [json_name = "id"];
inline void PartitionInternal::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t PartitionInternal::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t PartitionInternal::id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.coordinator_internal.PartitionInternal.id)
  return _internal_id();
}
inline void PartitionInternal::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void PartitionInternal::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.coordinator_internal.PartitionInternal.id)
}

// .dingodb.pb.common.Range range = 2 [json_name = "range"];
inline bool PartitionInternal::_internal_has_range() const {
  return this != internal_default_instance() && _impl_.range_ != nullptr;
}
inline bool PartitionInternal::has_range() const {
  return _internal_has_range();
}
inline const ::dingodb::pb::common::Range& PartitionInternal::_internal_range() const {
  const ::dingodb::pb::common::Range* p = _impl_.range_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::common::Range&>(
      ::dingodb::pb::common::_Range_default_instance_);
}
inline const ::dingodb::pb::common::Range& PartitionInternal::range() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.coordinator_internal.PartitionInternal.range)
  return _internal_range();
}
inline void PartitionInternal::unsafe_arena_set_allocated_range(
    ::dingodb::pb::common::Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  _impl_.range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.coordinator_internal.PartitionInternal.range)
}
inline ::dingodb::pb::common::Range* PartitionInternal::release_range() {
  
  ::dingodb::pb::common::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::common::Range* PartitionInternal::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:dingodb.pb.coordinator_internal.PartitionInternal.range)
  
  ::dingodb::pb::common::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
  return temp;
}
inline ::dingodb::pb::common::Range* PartitionInternal::_internal_mutable_range() {
  
  if (_impl_.range_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::common::Range>(GetArenaForAllocation());
    _impl_.range_ = p;
  }
  return _impl_.range_;
}
inline ::dingodb::pb::common::Range* PartitionInternal::mutable_range() {
  ::dingodb::pb::common::Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.coordinator_internal.PartitionInternal.range)
  return _msg;
}
inline void PartitionInternal::set_allocated_range(::dingodb::pb::common::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(range));
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.range_ = range;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.coordinator_internal.PartitionInternal.range)
}

// repeated uint64 region_ids = 3 [json_name = "regionIds"];
inline int PartitionInternal::_internal_region_ids_size() const {
  return _impl_.region_ids_.size();
}
inline int PartitionInternal::region_ids_size() const {
  return _internal_region_ids_size();
}
inline void PartitionInternal::clear_region_ids() {
  _impl_.region_ids_.Clear();
}
inline uint64_t PartitionInternal::_internal_region_ids(int index) const {
  return _impl_.region_ids_.Get(index);
}
inline uint64_t PartitionInternal::region_ids(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.coordinator_internal.PartitionInternal.region_ids)
  return _internal_region_ids(index);
}
inline void PartitionInternal::set_region_ids(int index, uint64_t value) {
  _impl_.region_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:dingodb.pb.coordinator_internal.PartitionInternal.region_ids)
}
inline void PartitionInternal::_internal_add_region_ids(uint64_t value) {
  _impl_.region_ids_.Add(value);
}
inline void PartitionInternal::add_region_ids(uint64_t value) {
  _internal_add_region_ids(value);
  // @@protoc_insertion_point(field_add:dingodb.pb.coordinator_internal.PartitionInternal.region_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PartitionInternal::_internal_region_ids() const {
  return _impl_.region_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
PartitionInternal::region_ids() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.coordinator_internal.PartitionInternal.region_ids)
  return _internal_region_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PartitionInternal::_internal_mutable_region_ids() {
  return &_impl_.region_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
PartitionInternal::mutable_region_ids() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.coordinator_internal.PartitionInternal.region_ids)
  return _internal_mutable_region_ids();
}

// -------------------------------------------------------------------

// TableInternal

// uint64 id = 1 [json_name = "id"];
inline void TableInternal::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t TableInternal::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t TableInternal::id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.coordinator_internal.TableInternal.id)
  return _internal_id();
}
inline void TableInternal::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void TableInternal::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.coordinator_internal.TableInternal.id)
}

// .dingodb.pb.meta.TableDefinition definition = 2 [json_name = "definition"];
inline bool TableInternal::_internal_has_definition() const {
  return this != internal_default_instance() && _impl_.definition_ != nullptr;
}
inline bool TableInternal::has_definition() const {
  return _internal_has_definition();
}
inline const ::dingodb::pb::meta::TableDefinition& TableInternal::_internal_definition() const {
  const ::dingodb::pb::meta::TableDefinition* p = _impl_.definition_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::meta::TableDefinition&>(
      ::dingodb::pb::meta::_TableDefinition_default_instance_);
}
inline const ::dingodb::pb::meta::TableDefinition& TableInternal::definition() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.coordinator_internal.TableInternal.definition)
  return _internal_definition();
}
inline void TableInternal::unsafe_arena_set_allocated_definition(
    ::dingodb::pb::meta::TableDefinition* definition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.definition_);
  }
  _impl_.definition_ = definition;
  if (definition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.coordinator_internal.TableInternal.definition)
}
inline ::dingodb::pb::meta::TableDefinition* TableInternal::release_definition() {
  
  ::dingodb::pb::meta::TableDefinition* temp = _impl_.definition_;
  _impl_.definition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::meta::TableDefinition* TableInternal::unsafe_arena_release_definition() {
  // @@protoc_insertion_point(field_release:dingodb.pb.coordinator_internal.TableInternal.definition)
  
  ::dingodb::pb::meta::TableDefinition* temp = _impl_.definition_;
  _impl_.definition_ = nullptr;
  return temp;
}
inline ::dingodb::pb::meta::TableDefinition* TableInternal::_internal_mutable_definition() {
  
  if (_impl_.definition_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::meta::TableDefinition>(GetArenaForAllocation());
    _impl_.definition_ = p;
  }
  return _impl_.definition_;
}
inline ::dingodb::pb::meta::TableDefinition* TableInternal::mutable_definition() {
  ::dingodb::pb::meta::TableDefinition* _msg = _internal_mutable_definition();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.coordinator_internal.TableInternal.definition)
  return _msg;
}
inline void TableInternal::set_allocated_definition(::dingodb::pb::meta::TableDefinition* definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.definition_);
  }
  if (definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(definition));
    if (message_arena != submessage_arena) {
      definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, definition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.definition_ = definition;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.coordinator_internal.TableInternal.definition)
}

// repeated .dingodb.pb.coordinator_internal.PartitionInternal partitions = 3 [json_name = "partitions"];
inline int TableInternal::_internal_partitions_size() const {
  return _impl_.partitions_.size();
}
inline int TableInternal::partitions_size() const {
  return _internal_partitions_size();
}
inline void TableInternal::clear_partitions() {
  _impl_.partitions_.Clear();
}
inline ::dingodb::pb::coordinator_internal::PartitionInternal* TableInternal::mutable_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.coordinator_internal.TableInternal.partitions)
  return _impl_.partitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::coordinator_internal::PartitionInternal >*
TableInternal::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.coordinator_internal.TableInternal.partitions)
  return &_impl_.partitions_;
}
inline const ::dingodb::pb::coordinator_internal::PartitionInternal& TableInternal::_internal_partitions(int index) const {
  return _impl_.partitions_.Get(index);
}
inline const ::dingodb::pb::coordinator_internal::PartitionInternal& TableInternal::partitions(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.coordinator_internal.TableInternal.partitions)
  return _internal_partitions(index);
}
inline ::dingodb::pb::coordinator_internal::PartitionInternal* TableInternal::_internal_add_partitions() {
  return _impl_.partitions_.Add();
}
inline ::dingodb::pb::coordinator_internal::PartitionInternal* TableInternal::add_partitions() {
  ::dingodb::pb::coordinator_internal::PartitionInternal* _add = _internal_add_partitions();
  // @@protoc_insertion_point(field_add:dingodb.pb.coordinator_internal.TableInternal.partitions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::coordinator_internal::PartitionInternal >&
TableInternal::partitions() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.coordinator_internal.TableInternal.partitions)
  return _impl_.partitions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coordinator_internal
}  // namespace pb
}  // namespace dingodb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_coordinator_5finternal_2eproto
