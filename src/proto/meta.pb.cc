// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#include "meta.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dingodb {
namespace pb {
namespace meta {
PROTOBUF_CONSTEXPR DingoCommonId::DingoCommonId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parent_entity_id_)*/uint64_t{0u}
  , /*decltype(_impl_.entity_id_)*/uint64_t{0u}
  , /*decltype(_impl_.entity_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DingoCommonIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DingoCommonIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DingoCommonIdDefaultTypeInternal() {}
  union {
    DingoCommonId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DingoCommonIdDefaultTypeInternal _DingoCommonId_default_instance_;
PROTOBUF_CONSTEXPR ColumnDefinition::ColumnDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.default_val_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sql_type_)*/0
  , /*decltype(_impl_.element_type_)*/0
  , /*decltype(_impl_.precision_)*/0
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_.indexofkey_)*/0
  , /*decltype(_impl_.nullable_)*/false
  , /*decltype(_impl_.has_default_val_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColumnDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnDefinitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnDefinitionDefaultTypeInternal() {}
  union {
    ColumnDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnDefinitionDefaultTypeInternal _ColumnDefinition_default_instance_;
PROTOBUF_CONSTEXPR Index::Index(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_column_)*/{}
  , /*decltype(_impl_.is_unique_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexDefaultTypeInternal() {}
  union {
    Index _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexDefaultTypeInternal _Index_default_instance_;
PROTOBUF_CONSTEXPR RangePartition::RangePartition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ranges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangePartitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangePartitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangePartitionDefaultTypeInternal() {}
  union {
    RangePartition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangePartitionDefaultTypeInternal _RangePartition_default_instance_;
PROTOBUF_CONSTEXPR HashPartition::HashPartition(
    ::_pbi::ConstantInitialized) {}
struct HashPartitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HashPartitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HashPartitionDefaultTypeInternal() {}
  union {
    HashPartition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HashPartitionDefaultTypeInternal _HashPartition_default_instance_;
PROTOBUF_CONSTEXPR PartitionRule::PartitionRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_)*/{}
  , /*decltype(_impl_.range_partition_)*/nullptr
  , /*decltype(_impl_.hash_partition_)*/nullptr
  , /*decltype(_impl_.strategy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionRuleDefaultTypeInternal() {}
  union {
    PartitionRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionRuleDefaultTypeInternal _PartitionRule_default_instance_;
PROTOBUF_CONSTEXPR Schema::Schema(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_ids_)*/{}
  , /*decltype(_impl_.table_ids_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SchemaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SchemaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SchemaDefaultTypeInternal() {}
  union {
    Schema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SchemaDefaultTypeInternal _Schema_default_instance_;
PROTOBUF_CONSTEXPR TableDefinition_IndexesEntry_DoNotUse::TableDefinition_IndexesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TableDefinition_IndexesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDefinition_IndexesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDefinition_IndexesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TableDefinition_IndexesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDefinition_IndexesEntry_DoNotUseDefaultTypeInternal _TableDefinition_IndexesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TableDefinition_PropertiesEntry_DoNotUse::TableDefinition_PropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TableDefinition_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDefinition_PropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDefinition_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TableDefinition_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDefinition_PropertiesEntry_DoNotUseDefaultTypeInternal _TableDefinition_PropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TableDefinition::TableDefinition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.columns_)*/{}
  , /*decltype(_impl_.indexes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_partition_)*/nullptr
  , /*decltype(_impl_.ttl_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.engine_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDefinitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDefinitionDefaultTypeInternal() {}
  union {
    TableDefinition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDefinitionDefaultTypeInternal _TableDefinition_default_instance_;
PROTOBUF_CONSTEXPR Part::Part(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.voters_)*/{}
  , /*decltype(_impl_.learners_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.leader_)*/nullptr
  , /*decltype(_impl_.regionmap_epoch_)*/uint64_t{0u}
  , /*decltype(_impl_.storemap_epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartDefaultTypeInternal() {}
  union {
    Part _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartDefaultTypeInternal _Part_default_instance_;
PROTOBUF_CONSTEXPR Table::Table(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parts_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDefaultTypeInternal() {}
  union {
    Table _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDefaultTypeInternal _Table_default_instance_;
PROTOBUF_CONSTEXPR GetSchemasRequest::GetSchemasRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSchemasRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSchemasRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSchemasRequestDefaultTypeInternal() {}
  union {
    GetSchemasRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSchemasRequestDefaultTypeInternal _GetSchemasRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSchemasResponse::GetSchemasResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schemas_)*/{}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSchemasResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSchemasResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSchemasResponseDefaultTypeInternal() {}
  union {
    GetSchemasResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSchemasResponseDefaultTypeInternal _GetSchemasResponse_default_instance_;
PROTOBUF_CONSTEXPR TableDefinitionWithId::TableDefinitionWithId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.table_definition_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableDefinitionWithIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDefinitionWithIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDefinitionWithIdDefaultTypeInternal() {}
  union {
    TableDefinitionWithId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDefinitionWithIdDefaultTypeInternal _TableDefinitionWithId_default_instance_;
PROTOBUF_CONSTEXPR GetTablesRequest::GetTablesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTablesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTablesRequestDefaultTypeInternal() {}
  union {
    GetTablesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTablesRequestDefaultTypeInternal _GetTablesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTablesResponse::GetTablesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_definition_with_ids_)*/{}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTablesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTablesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTablesResponseDefaultTypeInternal() {}
  union {
    GetTablesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTablesResponseDefaultTypeInternal _GetTablesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTableRequest::GetTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTableRequestDefaultTypeInternal() {}
  union {
    GetTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTableRequestDefaultTypeInternal _GetTableRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTableResponse::GetTableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.table_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTableResponseDefaultTypeInternal() {}
  union {
    GetTableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTableResponseDefaultTypeInternal _GetTableResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateTableRequest::CreateTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_id_)*/nullptr
  , /*decltype(_impl_.table_definition_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTableRequestDefaultTypeInternal() {}
  union {
    CreateTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTableRequestDefaultTypeInternal _CreateTableRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateTableResponse::CreateTableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.table_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateTableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTableResponseDefaultTypeInternal() {}
  union {
    CreateTableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTableResponseDefaultTypeInternal _CreateTableResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateSchemaRequest::CreateSchemaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_schema_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSchemaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSchemaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSchemaRequestDefaultTypeInternal() {}
  union {
    CreateSchemaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSchemaRequestDefaultTypeInternal _CreateSchemaRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateSchemaResponse::CreateSchemaResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.schema_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSchemaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSchemaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSchemaResponseDefaultTypeInternal() {}
  union {
    CreateSchemaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSchemaResponseDefaultTypeInternal _CreateSchemaResponse_default_instance_;
PROTOBUF_CONSTEXPR DropTableRequest::DropTableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropTableRequestDefaultTypeInternal() {}
  union {
    DropTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropTableRequestDefaultTypeInternal _DropTableRequest_default_instance_;
PROTOBUF_CONSTEXPR DropTableResponse::DropTableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DropTableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropTableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropTableResponseDefaultTypeInternal() {}
  union {
    DropTableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropTableResponseDefaultTypeInternal _DropTableResponse_default_instance_;
}  // namespace meta
}  // namespace pb
}  // namespace dingodb
static ::_pb::Metadata file_level_metadata_meta_2eproto[25];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_meta_2eproto[5];
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_meta_2eproto[1];

const uint32_t TableStruct_meta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::DingoCommonId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::DingoCommonId, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::DingoCommonId, _impl_.parent_entity_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::DingoCommonId, _impl_.entity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::ColumnDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::ColumnDefinition, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::ColumnDefinition, _impl_.sql_type_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::ColumnDefinition, _impl_.element_type_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::ColumnDefinition, _impl_.precision_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::ColumnDefinition, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::ColumnDefinition, _impl_.nullable_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::ColumnDefinition, _impl_.indexofkey_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::ColumnDefinition, _impl_.has_default_val_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::ColumnDefinition, _impl_.default_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Index, _impl_.index_column_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Index, _impl_.is_unique_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::RangePartition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::RangePartition, _impl_.ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::HashPartition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::PartitionRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::PartitionRule, _impl_.columns_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::PartitionRule, _impl_.strategy_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::PartitionRule, _impl_.range_partition_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::PartitionRule, _impl_.hash_partition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Schema, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Schema, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Schema, _impl_.schema_ids_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Schema, _impl_.table_ids_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition_IndexesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition_IndexesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition_IndexesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition_IndexesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition, _impl_.columns_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition, _impl_.indexes_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition, _impl_.ttl_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition, _impl_.table_partition_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition, _impl_.engine_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinition, _impl_.properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Part, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Part, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Part, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Part, _impl_.leader_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Part, _impl_.voters_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Part, _impl_.learners_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Part, _impl_.regionmap_epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Part, _impl_.storemap_epoch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Table, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::Table, _impl_.parts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetSchemasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetSchemasRequest, _impl_.schema_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetSchemasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetSchemasResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetSchemasResponse, _impl_.schemas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinitionWithId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinitionWithId, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::TableDefinitionWithId, _impl_.table_definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetTablesRequest, _impl_.schema_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetTablesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetTablesResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetTablesResponse, _impl_.table_definition_with_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetTableRequest, _impl_.table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetTableResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::GetTableResponse, _impl_.table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateTableRequest, _impl_.schema_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateTableRequest, _impl_.table_definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateTableResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateTableResponse, _impl_.table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateSchemaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateSchemaRequest, _impl_.parent_schema_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateSchemaRequest, _impl_.schema_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateSchemaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateSchemaResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::CreateSchemaResponse, _impl_.schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::DropTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::DropTableRequest, _impl_.table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::DropTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::meta::DropTableResponse, _impl_.error_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dingodb::pb::meta::DingoCommonId)},
  { 9, -1, -1, sizeof(::dingodb::pb::meta::ColumnDefinition)},
  { 24, -1, -1, sizeof(::dingodb::pb::meta::Index)},
  { 32, -1, -1, sizeof(::dingodb::pb::meta::RangePartition)},
  { 39, -1, -1, sizeof(::dingodb::pb::meta::HashPartition)},
  { 45, -1, -1, sizeof(::dingodb::pb::meta::PartitionRule)},
  { 55, -1, -1, sizeof(::dingodb::pb::meta::Schema)},
  { 65, 73, -1, sizeof(::dingodb::pb::meta::TableDefinition_IndexesEntry_DoNotUse)},
  { 75, 83, -1, sizeof(::dingodb::pb::meta::TableDefinition_PropertiesEntry_DoNotUse)},
  { 85, -1, -1, sizeof(::dingodb::pb::meta::TableDefinition)},
  { 99, -1, -1, sizeof(::dingodb::pb::meta::Part)},
  { 112, -1, -1, sizeof(::dingodb::pb::meta::Table)},
  { 120, -1, -1, sizeof(::dingodb::pb::meta::GetSchemasRequest)},
  { 127, -1, -1, sizeof(::dingodb::pb::meta::GetSchemasResponse)},
  { 135, -1, -1, sizeof(::dingodb::pb::meta::TableDefinitionWithId)},
  { 143, -1, -1, sizeof(::dingodb::pb::meta::GetTablesRequest)},
  { 150, -1, -1, sizeof(::dingodb::pb::meta::GetTablesResponse)},
  { 158, -1, -1, sizeof(::dingodb::pb::meta::GetTableRequest)},
  { 165, -1, -1, sizeof(::dingodb::pb::meta::GetTableResponse)},
  { 173, -1, -1, sizeof(::dingodb::pb::meta::CreateTableRequest)},
  { 181, -1, -1, sizeof(::dingodb::pb::meta::CreateTableResponse)},
  { 189, -1, -1, sizeof(::dingodb::pb::meta::CreateSchemaRequest)},
  { 197, -1, -1, sizeof(::dingodb::pb::meta::CreateSchemaResponse)},
  { 205, -1, -1, sizeof(::dingodb::pb::meta::DropTableRequest)},
  { 212, -1, -1, sizeof(::dingodb::pb::meta::DropTableResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dingodb::pb::meta::_DingoCommonId_default_instance_._instance,
  &::dingodb::pb::meta::_ColumnDefinition_default_instance_._instance,
  &::dingodb::pb::meta::_Index_default_instance_._instance,
  &::dingodb::pb::meta::_RangePartition_default_instance_._instance,
  &::dingodb::pb::meta::_HashPartition_default_instance_._instance,
  &::dingodb::pb::meta::_PartitionRule_default_instance_._instance,
  &::dingodb::pb::meta::_Schema_default_instance_._instance,
  &::dingodb::pb::meta::_TableDefinition_IndexesEntry_DoNotUse_default_instance_._instance,
  &::dingodb::pb::meta::_TableDefinition_PropertiesEntry_DoNotUse_default_instance_._instance,
  &::dingodb::pb::meta::_TableDefinition_default_instance_._instance,
  &::dingodb::pb::meta::_Part_default_instance_._instance,
  &::dingodb::pb::meta::_Table_default_instance_._instance,
  &::dingodb::pb::meta::_GetSchemasRequest_default_instance_._instance,
  &::dingodb::pb::meta::_GetSchemasResponse_default_instance_._instance,
  &::dingodb::pb::meta::_TableDefinitionWithId_default_instance_._instance,
  &::dingodb::pb::meta::_GetTablesRequest_default_instance_._instance,
  &::dingodb::pb::meta::_GetTablesResponse_default_instance_._instance,
  &::dingodb::pb::meta::_GetTableRequest_default_instance_._instance,
  &::dingodb::pb::meta::_GetTableResponse_default_instance_._instance,
  &::dingodb::pb::meta::_CreateTableRequest_default_instance_._instance,
  &::dingodb::pb::meta::_CreateTableResponse_default_instance_._instance,
  &::dingodb::pb::meta::_CreateSchemaRequest_default_instance_._instance,
  &::dingodb::pb::meta::_CreateSchemaResponse_default_instance_._instance,
  &::dingodb::pb::meta::_DropTableRequest_default_instance_._instance,
  &::dingodb::pb::meta::_DropTableResponse_default_instance_._instance,
};

const char descriptor_table_protodef_meta_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nmeta.proto\022\017dingodb.pb.meta\032\014common.pr"
  "oto\032\013error.proto\"\224\001\n\rDingoCommonId\022<\n\013en"
  "tity_type\030\001 \001(\0162\033.dingodb.pb.meta.Entity"
  "TypeR\nentityType\022(\n\020parent_entity_id\030\002 \001"
  "(\004R\016parentEntityId\022\033\n\tentity_id\030\003 \001(\004R\010e"
  "ntityId\"\325\002\n\020ColumnDefinition\022\022\n\004name\030\001 \001"
  "(\tR\004name\0223\n\010sql_type\030\002 \001(\0162\030.dingodb.pb."
  "meta.SqlTypeR\007sqlType\022\?\n\014element_type\030\003 "
  "\001(\0162\034.dingodb.pb.meta.ElementTypeR\013eleme"
  "ntType\022\034\n\tprecision\030\004 \001(\005R\tprecision\022\024\n\005"
  "scale\030\005 \001(\005R\005scale\022\032\n\010nullable\030\006 \001(\010R\010nu"
  "llable\022\036\n\nindexOfKey\030\007 \001(\005R\nindexOfKey\022&"
  "\n\017has_default_val\030\010 \001(\010R\rhasDefaultVal\022\037"
  "\n\013default_val\030\t \001(\tR\ndefaultVal\"G\n\005Index"
  "\022!\n\014index_column\030\001 \003(\tR\013indexColumn\022\033\n\ti"
  "s_unique\030\002 \001(\010R\010isUnique\"B\n\016RangePartiti"
  "on\0220\n\006ranges\030\001 \003(\0132\030.dingodb.pb.common.R"
  "angeR\006ranges\"\017\n\rHashPartition\"\372\001\n\rPartit"
  "ionRule\022\030\n\007columns\030\001 \003(\tR\007columns\022>\n\010str"
  "ategy\030\002 \001(\0162\".dingodb.pb.meta.PartitionS"
  "trategyR\010strategy\022H\n\017range_partition\030\003 \001"
  "(\0132\037.dingodb.pb.meta.RangePartitionR\016ran"
  "gePartition\022E\n\016hash_partition\030\004 \001(\0132\036.di"
  "ngodb.pb.meta.HashPartitionR\rhashPartiti"
  "on\"\310\001\n\006Schema\022.\n\002id\030\001 \001(\0132\036.dingodb.pb.m"
  "eta.DingoCommonIdR\002id\022\022\n\004name\030\002 \001(\tR\004nam"
  "e\022=\n\nschema_ids\030\003 \003(\0132\036.dingodb.pb.meta."
  "DingoCommonIdR\tschemaIds\022;\n\ttable_ids\030\004 "
  "\003(\0132\036.dingodb.pb.meta.DingoCommonIdR\010tab"
  "leIds\"\270\004\n\017TableDefinition\022\022\n\004name\030\001 \001(\tR"
  "\004name\022;\n\007columns\030\002 \003(\0132!.dingodb.pb.meta"
  ".ColumnDefinitionR\007columns\022G\n\007indexes\030\003 "
  "\003(\0132-.dingodb.pb.meta.TableDefinition.In"
  "dexesEntryR\007indexes\022\030\n\007version\030\004 \001(\rR\007ve"
  "rsion\022\020\n\003ttl\030\005 \001(\004R\003ttl\022G\n\017table_partiti"
  "on\030\006 \001(\0132\036.dingodb.pb.meta.PartitionRule"
  "R\016tablePartition\0221\n\006engine\030\007 \001(\0162\031.dingo"
  "db.pb.common.EngineR\006engine\022P\n\npropertie"
  "s\030\010 \003(\01320.dingodb.pb.meta.TableDefinitio"
  "n.PropertiesEntryR\nproperties\032R\n\014Indexes"
  "Entry\022\020\n\003key\030\001 \001(\tR\003key\022,\n\005value\030\002 \001(\0132\026"
  ".dingodb.pb.meta.IndexR\005value:\0028\001\032=\n\017Pro"
  "pertiesEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030"
  "\002 \001(\tR\005value:\0028\001\"\331\002\n\004Part\022.\n\002id\030\001 \001(\0132\036."
  "dingodb.pb.meta.DingoCommonIdR\002id\022.\n\005ran"
  "ge\030\002 \001(\0132\030.dingodb.pb.common.RangeR\005rang"
  "e\0223\n\006leader\030\003 \001(\0132\033.dingodb.pb.common.Lo"
  "cationR\006leader\0223\n\006voters\030\004 \003(\0132\033.dingodb"
  ".pb.common.LocationR\006voters\0227\n\010learners\030"
  "\005 \003(\0132\033.dingodb.pb.common.LocationR\010lear"
  "ners\022\'\n\017regionmap_epoch\030\006 \001(\004R\016regionmap"
  "Epoch\022%\n\016storemap_epoch\030\007 \001(\004R\rstoremapE"
  "poch\"d\n\005Table\022.\n\002id\030\001 \001(\0132\036.dingodb.pb.m"
  "eta.DingoCommonIdR\002id\022+\n\005parts\030\002 \003(\0132\025.d"
  "ingodb.pb.meta.PartR\005parts\"P\n\021GetSchemas"
  "Request\022;\n\tschema_id\030\001 \001(\0132\036.dingodb.pb."
  "meta.DingoCommonIdR\010schemaId\"v\n\022GetSchem"
  "asResponse\022-\n\005error\030\001 \001(\0132\027.dingodb.pb.e"
  "rror.ErrorR\005error\0221\n\007schemas\030\002 \003(\0132\027.din"
  "godb.pb.meta.SchemaR\007schemas\"\237\001\n\025TableDe"
  "finitionWithId\0229\n\010table_id\030\001 \001(\0132\036.dingo"
  "db.pb.meta.DingoCommonIdR\007tableId\022K\n\020tab"
  "le_definition\030\002 \001(\0132 .dingodb.pb.meta.Ta"
  "bleDefinitionR\017tableDefinition\"O\n\020GetTab"
  "lesRequest\022;\n\tschema_id\030\001 \001(\0132\036.dingodb."
  "pb.meta.DingoCommonIdR\010schemaId\"\245\001\n\021GetT"
  "ablesResponse\022-\n\005error\030\001 \001(\0132\027.dingodb.p"
  "b.error.ErrorR\005error\022a\n\031table_definition"
  "_with_ids\030\002 \003(\0132&.dingodb.pb.meta.TableD"
  "efinitionWithIdR\026tableDefinitionWithIds\""
  "L\n\017GetTableRequest\0229\n\010table_id\030\001 \001(\0132\036.d"
  "ingodb.pb.meta.DingoCommonIdR\007tableId\"o\n"
  "\020GetTableResponse\022-\n\005error\030\001 \001(\0132\027.dingo"
  "db.pb.error.ErrorR\005error\022,\n\005table\030\002 \001(\0132"
  "\026.dingodb.pb.meta.TableR\005table\"\236\001\n\022Creat"
  "eTableRequest\022;\n\tschema_id\030\001 \001(\0132\036.dingo"
  "db.pb.meta.DingoCommonIdR\010schemaId\022K\n\020ta"
  "ble_definition\030\002 \001(\0132 .dingodb.pb.meta.T"
  "ableDefinitionR\017tableDefinition\"r\n\023Creat"
  "eTableResponse\022-\n\005error\030\001 \001(\0132\027.dingodb."
  "pb.error.ErrorR\005error\022,\n\005table\030\002 \001(\0132\026.d"
  "ingodb.pb.meta.TableR\005table\"\200\001\n\023CreateSc"
  "hemaRequest\022H\n\020parent_schema_id\030\001 \001(\0132\036."
  "dingodb.pb.meta.DingoCommonIdR\016parentSch"
  "emaId\022\037\n\013schema_name\030\002 \001(\tR\nschemaName\"v"
  "\n\024CreateSchemaResponse\022-\n\005error\030\001 \001(\0132\027."
  "dingodb.pb.error.ErrorR\005error\022/\n\006schema\030"
  "\002 \001(\0132\027.dingodb.pb.meta.SchemaR\006schema\"M"
  "\n\020DropTableRequest\0229\n\010table_id\030\001 \001(\0132\036.d"
  "ingodb.pb.meta.DingoCommonIdR\007tableId\"B\n"
  "\021DropTableResponse\022-\n\005error\030\001 \001(\0132\027.ding"
  "odb.pb.error.ErrorR\005error*Q\n\nEntityType\022"
  "\026\n\022ENTITY_TYPE_SCHEMA\020\000\022\025\n\021ENTITY_TYPE_T"
  "ABLE\020\001\022\024\n\020ENTITY_TYPE_PART\020\002*G\n\021Reserved"
  "SchemaIds\022\017\n\013ROOT_SCHEMA\020\000\022\017\n\013META_SCHEM"
  "A\020\001\022\020\n\014DINGO_SCHEMA\020\002*\204\002\n\007SqlType\022\024\n\020SQL"
  "_TYPE_BOOLEAN\020\000\022\024\n\020SQL_TYPE_INTEGER\020\001\022\023\n"
  "\017SQL_TYPE_BIGINT\020\002\022\023\n\017SQL_TYPE_DOUBLE\020\003\022"
  "\022\n\016SQL_TYPE_FLOAT\020\004\022\021\n\rSQL_TYPE_DATE\020\005\022\021"
  "\n\rSQL_TYPE_TIME\020\006\022\026\n\022SQL_TYPE_TIMESTAMP\020"
  "\007\022\024\n\020SQL_TYPE_VARCHAR\020\010\022\022\n\016SQL_TYPE_ARRA"
  "Y\020\t\022\025\n\021SQL_TYPE_MULTISET\020\n\022\020\n\014SQL_TYPE_A"
  "NY\020\013*\246\002\n\013ElementType\022\024\n\020ELEM_TYPE_DOUBLE"
  "\020\000\022\023\n\017ELEM_TYPE_FLOAT\020\001\022\023\n\017ELEM_TYPE_INT"
  "32\020\002\022\023\n\017ELEM_TYPE_INT64\020\003\022\024\n\020ELEM_TYPE_U"
  "INT32\020\004\022\024\n\020ELEM_TYPE_UINT64\020\005\022\025\n\021ELEM_TY"
  "PE_BOOLEAN\020\006\022\024\n\020ELEM_TYPE_STRING\020\007\022\023\n\017EL"
  "EM_TYPE_BYTES\020\010\022\023\n\017ELEM_TYPE_FIX32\020\t\022\023\n\017"
  "ELEM_TYPE_FIX64\020\n\022\024\n\020ELEM_TYPE_SFIX32\020\013\022"
  "\024\n\020ELEM_TYPE_SFIX64\020\014*@\n\021PartitionStrate"
  "gy\022\025\n\021PT_STRATEGY_RANGE\020\000\022\024\n\020PT_STRATEGY"
  "_HASH\020\0012\224\004\n\013MetaService\022U\n\nGetSchemas\022\"."
  "dingodb.pb.meta.GetSchemasRequest\032#.ding"
  "odb.pb.meta.GetSchemasResponse\022R\n\tGetTab"
  "les\022!.dingodb.pb.meta.GetTablesRequest\032\""
  ".dingodb.pb.meta.GetTablesResponse\022O\n\010Ge"
  "tTable\022 .dingodb.pb.meta.GetTableRequest"
  "\032!.dingodb.pb.meta.GetTableResponse\022X\n\013C"
  "reateTable\022#.dingodb.pb.meta.CreateTable"
  "Request\032$.dingodb.pb.meta.CreateTableRes"
  "ponse\022R\n\tDropTable\022!.dingodb.pb.meta.Dro"
  "pTableRequest\032\".dingodb.pb.meta.DropTabl"
  "eResponse\022[\n\014CreateSchema\022$.dingodb.pb.m"
  "eta.CreateSchemaRequest\032%.dingodb.pb.met"
  "a.CreateSchemaResponseB\201\001\n\023com.dingodb.p"
  "b.metaB\tMetaProtoP\001\200\001\001\242\002\003DPM\252\002\017Dingodb.P"
  "b.Meta\312\002\017Dingodb\\Pb\\Meta\342\002\033Dingodb\\Pb\\Me"
  "ta\\GPBMetadata\352\002\021Dingodb::Pb::Metab\006prot"
  "o3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_meta_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_error_2eproto,
};
static ::_pbi::once_flag descriptor_table_meta_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_meta_2eproto = {
    false, false, 5122, descriptor_table_protodef_meta_2eproto,
    "meta.proto",
    &descriptor_table_meta_2eproto_once, descriptor_table_meta_2eproto_deps, 2, 25,
    schemas, file_default_instances, TableStruct_meta_2eproto::offsets,
    file_level_metadata_meta_2eproto, file_level_enum_descriptors_meta_2eproto,
    file_level_service_descriptors_meta_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_meta_2eproto_getter() {
  return &descriptor_table_meta_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_meta_2eproto(&descriptor_table_meta_2eproto);
namespace dingodb {
namespace pb {
namespace meta {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_meta_2eproto);
  return file_level_enum_descriptors_meta_2eproto[0];
}
bool EntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReservedSchemaIds_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_meta_2eproto);
  return file_level_enum_descriptors_meta_2eproto[1];
}
bool ReservedSchemaIds_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SqlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_meta_2eproto);
  return file_level_enum_descriptors_meta_2eproto[2];
}
bool SqlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ElementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_meta_2eproto);
  return file_level_enum_descriptors_meta_2eproto[3];
}
bool ElementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_meta_2eproto);
  return file_level_enum_descriptors_meta_2eproto[4];
}
bool PartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DingoCommonId::_Internal {
 public:
};

DingoCommonId::DingoCommonId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.DingoCommonId)
}
DingoCommonId::DingoCommonId(const DingoCommonId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DingoCommonId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_entity_id_){}
    , decltype(_impl_.entity_id_){}
    , decltype(_impl_.entity_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.parent_entity_id_, &from._impl_.parent_entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_type_) -
    reinterpret_cast<char*>(&_impl_.parent_entity_id_)) + sizeof(_impl_.entity_type_));
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.DingoCommonId)
}

inline void DingoCommonId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parent_entity_id_){uint64_t{0u}}
    , decltype(_impl_.entity_id_){uint64_t{0u}}
    , decltype(_impl_.entity_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DingoCommonId::~DingoCommonId() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.DingoCommonId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DingoCommonId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DingoCommonId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DingoCommonId::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.DingoCommonId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.parent_entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.entity_type_) -
      reinterpret_cast<char*>(&_impl_.parent_entity_id_)) + sizeof(_impl_.entity_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DingoCommonId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.EntityType entity_type = 1 [json_name = "entityType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entity_type(static_cast<::dingodb::pb::meta::EntityType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 parent_entity_id = 2 [json_name = "parentEntityId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.parent_entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 entity_id = 3 [json_name = "entityId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DingoCommonId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.DingoCommonId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.EntityType entity_type = 1 [json_name = "entityType"];
  if (this->_internal_entity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_entity_type(), target);
  }

  // uint64 parent_entity_id = 2 [json_name = "parentEntityId"];
  if (this->_internal_parent_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_parent_entity_id(), target);
  }

  // uint64 entity_id = 3 [json_name = "entityId"];
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_entity_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.DingoCommonId)
  return target;
}

size_t DingoCommonId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.DingoCommonId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 parent_entity_id = 2 [json_name = "parentEntityId"];
  if (this->_internal_parent_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_parent_entity_id());
  }

  // uint64 entity_id = 3 [json_name = "entityId"];
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_entity_id());
  }

  // .dingodb.pb.meta.EntityType entity_type = 1 [json_name = "entityType"];
  if (this->_internal_entity_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entity_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DingoCommonId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DingoCommonId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DingoCommonId::GetClassData() const { return &_class_data_; }


void DingoCommonId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DingoCommonId*>(&to_msg);
  auto& from = static_cast<const DingoCommonId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.DingoCommonId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_parent_entity_id() != 0) {
    _this->_internal_set_parent_entity_id(from._internal_parent_entity_id());
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (from._internal_entity_type() != 0) {
    _this->_internal_set_entity_type(from._internal_entity_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DingoCommonId::CopyFrom(const DingoCommonId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.DingoCommonId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DingoCommonId::IsInitialized() const {
  return true;
}

void DingoCommonId::InternalSwap(DingoCommonId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DingoCommonId, _impl_.entity_type_)
      + sizeof(DingoCommonId::_impl_.entity_type_)
      - PROTOBUF_FIELD_OFFSET(DingoCommonId, _impl_.parent_entity_id_)>(
          reinterpret_cast<char*>(&_impl_.parent_entity_id_),
          reinterpret_cast<char*>(&other->_impl_.parent_entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DingoCommonId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[0]);
}

// ===================================================================

class ColumnDefinition::_Internal {
 public:
};

ColumnDefinition::ColumnDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.ColumnDefinition)
}
ColumnDefinition::ColumnDefinition(const ColumnDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.default_val_){}
    , decltype(_impl_.sql_type_){}
    , decltype(_impl_.element_type_){}
    , decltype(_impl_.precision_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.indexofkey_){}
    , decltype(_impl_.nullable_){}
    , decltype(_impl_.has_default_val_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.default_val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_val_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_default_val().empty()) {
    _this->_impl_.default_val_.Set(from._internal_default_val(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sql_type_, &from._impl_.sql_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_default_val_) -
    reinterpret_cast<char*>(&_impl_.sql_type_)) + sizeof(_impl_.has_default_val_));
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.ColumnDefinition)
}

inline void ColumnDefinition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.default_val_){}
    , decltype(_impl_.sql_type_){0}
    , decltype(_impl_.element_type_){0}
    , decltype(_impl_.precision_){0}
    , decltype(_impl_.scale_){0}
    , decltype(_impl_.indexofkey_){0}
    , decltype(_impl_.nullable_){false}
    , decltype(_impl_.has_default_val_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.default_val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_val_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ColumnDefinition::~ColumnDefinition() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.ColumnDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.default_val_.Destroy();
}

void ColumnDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.ColumnDefinition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.default_val_.ClearToEmpty();
  ::memset(&_impl_.sql_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_default_val_) -
      reinterpret_cast<char*>(&_impl_.sql_type_)) + sizeof(_impl_.has_default_val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.meta.ColumnDefinition.name"));
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.SqlType sql_type = 2 [json_name = "sqlType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sql_type(static_cast<::dingodb::pb::meta::SqlType>(val));
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.ElementType element_type = 3 [json_name = "elementType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_element_type(static_cast<::dingodb::pb::meta::ElementType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 precision = 4 [json_name = "precision"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scale = 5 [json_name = "scale"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool nullable = 6 [json_name = "nullable"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.nullable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 indexOfKey = 7 [json_name = "indexOfKey"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.indexofkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_default_val = 8 [json_name = "hasDefaultVal"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.has_default_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string default_val = 9 [json_name = "defaultVal"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_default_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.meta.ColumnDefinition.default_val"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnDefinition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.ColumnDefinition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.meta.ColumnDefinition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .dingodb.pb.meta.SqlType sql_type = 2 [json_name = "sqlType"];
  if (this->_internal_sql_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sql_type(), target);
  }

  // .dingodb.pb.meta.ElementType element_type = 3 [json_name = "elementType"];
  if (this->_internal_element_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_element_type(), target);
  }

  // int32 precision = 4 [json_name = "precision"];
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_precision(), target);
  }

  // int32 scale = 5 [json_name = "scale"];
  if (this->_internal_scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_scale(), target);
  }

  // bool nullable = 6 [json_name = "nullable"];
  if (this->_internal_nullable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_nullable(), target);
  }

  // int32 indexOfKey = 7 [json_name = "indexOfKey"];
  if (this->_internal_indexofkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_indexofkey(), target);
  }

  // bool has_default_val = 8 [json_name = "hasDefaultVal"];
  if (this->_internal_has_default_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_has_default_val(), target);
  }

  // string default_val = 9 [json_name = "defaultVal"];
  if (!this->_internal_default_val().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_val().data(), static_cast<int>(this->_internal_default_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.meta.ColumnDefinition.default_val");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_default_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.ColumnDefinition)
  return target;
}

size_t ColumnDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.ColumnDefinition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string default_val = 9 [json_name = "defaultVal"];
  if (!this->_internal_default_val().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_val());
  }

  // .dingodb.pb.meta.SqlType sql_type = 2 [json_name = "sqlType"];
  if (this->_internal_sql_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sql_type());
  }

  // .dingodb.pb.meta.ElementType element_type = 3 [json_name = "elementType"];
  if (this->_internal_element_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_element_type());
  }

  // int32 precision = 4 [json_name = "precision"];
  if (this->_internal_precision() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_precision());
  }

  // int32 scale = 5 [json_name = "scale"];
  if (this->_internal_scale() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scale());
  }

  // int32 indexOfKey = 7 [json_name = "indexOfKey"];
  if (this->_internal_indexofkey() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_indexofkey());
  }

  // bool nullable = 6 [json_name = "nullable"];
  if (this->_internal_nullable() != 0) {
    total_size += 1 + 1;
  }

  // bool has_default_val = 8 [json_name = "hasDefaultVal"];
  if (this->_internal_has_default_val() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnDefinition::GetClassData() const { return &_class_data_; }


void ColumnDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnDefinition*>(&to_msg);
  auto& from = static_cast<const ColumnDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.ColumnDefinition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_default_val().empty()) {
    _this->_internal_set_default_val(from._internal_default_val());
  }
  if (from._internal_sql_type() != 0) {
    _this->_internal_set_sql_type(from._internal_sql_type());
  }
  if (from._internal_element_type() != 0) {
    _this->_internal_set_element_type(from._internal_element_type());
  }
  if (from._internal_precision() != 0) {
    _this->_internal_set_precision(from._internal_precision());
  }
  if (from._internal_scale() != 0) {
    _this->_internal_set_scale(from._internal_scale());
  }
  if (from._internal_indexofkey() != 0) {
    _this->_internal_set_indexofkey(from._internal_indexofkey());
  }
  if (from._internal_nullable() != 0) {
    _this->_internal_set_nullable(from._internal_nullable());
  }
  if (from._internal_has_default_val() != 0) {
    _this->_internal_set_has_default_val(from._internal_has_default_val());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnDefinition::CopyFrom(const ColumnDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.ColumnDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnDefinition::IsInitialized() const {
  return true;
}

void ColumnDefinition::InternalSwap(ColumnDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_val_, lhs_arena,
      &other->_impl_.default_val_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnDefinition, _impl_.has_default_val_)
      + sizeof(ColumnDefinition::_impl_.has_default_val_)
      - PROTOBUF_FIELD_OFFSET(ColumnDefinition, _impl_.sql_type_)>(
          reinterpret_cast<char*>(&_impl_.sql_type_),
          reinterpret_cast<char*>(&other->_impl_.sql_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[1]);
}

// ===================================================================

class Index::_Internal {
 public:
};

Index::Index(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.Index)
}
Index::Index(const Index& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Index* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_column_){from._impl_.index_column_}
    , decltype(_impl_.is_unique_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_unique_ = from._impl_.is_unique_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.Index)
}

inline void Index::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_column_){arena}
    , decltype(_impl_.is_unique_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.Index)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Index::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_column_.~RepeatedPtrField();
}

void Index::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.Index)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_column_.Clear();
  _impl_.is_unique_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Index::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string index_column = 1 [json_name = "indexColumn"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_index_column();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.meta.Index.index_column"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_unique = 2 [json_name = "isUnique"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_unique_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Index::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.Index)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string index_column = 1 [json_name = "indexColumn"];
  for (int i = 0, n = this->_internal_index_column_size(); i < n; i++) {
    const auto& s = this->_internal_index_column(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.meta.Index.index_column");
    target = stream->WriteString(1, s, target);
  }

  // bool is_unique = 2 [json_name = "isUnique"];
  if (this->_internal_is_unique() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_unique(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.Index)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string index_column = 1 [json_name = "indexColumn"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.index_column_.size());
  for (int i = 0, n = _impl_.index_column_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.index_column_.Get(i));
  }

  // bool is_unique = 2 [json_name = "isUnique"];
  if (this->_internal_is_unique() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Index::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Index::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Index::GetClassData() const { return &_class_data_; }


void Index::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Index*>(&to_msg);
  auto& from = static_cast<const Index&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.Index)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.index_column_.MergeFrom(from._impl_.index_column_);
  if (from._internal_is_unique() != 0) {
    _this->_internal_set_is_unique(from._internal_is_unique());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::InternalSwap(Index* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.index_column_.InternalSwap(&other->_impl_.index_column_);
  swap(_impl_.is_unique_, other->_impl_.is_unique_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Index::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[2]);
}

// ===================================================================

class RangePartition::_Internal {
 public:
};

void RangePartition::clear_ranges() {
  _impl_.ranges_.Clear();
}
RangePartition::RangePartition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.RangePartition)
}
RangePartition::RangePartition(const RangePartition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangePartition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ranges_){from._impl_.ranges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.RangePartition)
}

inline void RangePartition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ranges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RangePartition::~RangePartition() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.RangePartition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangePartition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ranges_.~RepeatedPtrField();
}

void RangePartition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangePartition::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.RangePartition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangePartition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dingodb.pb.common.Range ranges = 1 [json_name = "ranges"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangePartition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.RangePartition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.Range ranges = 1 [json_name = "ranges"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.RangePartition)
  return target;
}

size_t RangePartition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.RangePartition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.Range ranges = 1 [json_name = "ranges"];
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->_impl_.ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangePartition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangePartition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangePartition::GetClassData() const { return &_class_data_; }


void RangePartition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangePartition*>(&to_msg);
  auto& from = static_cast<const RangePartition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.RangePartition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ranges_.MergeFrom(from._impl_.ranges_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangePartition::CopyFrom(const RangePartition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.RangePartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangePartition::IsInitialized() const {
  return true;
}

void RangePartition::InternalSwap(RangePartition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ranges_.InternalSwap(&other->_impl_.ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangePartition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[3]);
}

// ===================================================================

class HashPartition::_Internal {
 public:
};

HashPartition::HashPartition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.HashPartition)
}
HashPartition::HashPartition(const HashPartition& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HashPartition* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.HashPartition)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashPartition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashPartition::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HashPartition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[4]);
}

// ===================================================================

class PartitionRule::_Internal {
 public:
  static const ::dingodb::pb::meta::RangePartition& range_partition(const PartitionRule* msg);
  static const ::dingodb::pb::meta::HashPartition& hash_partition(const PartitionRule* msg);
};

const ::dingodb::pb::meta::RangePartition&
PartitionRule::_Internal::range_partition(const PartitionRule* msg) {
  return *msg->_impl_.range_partition_;
}
const ::dingodb::pb::meta::HashPartition&
PartitionRule::_Internal::hash_partition(const PartitionRule* msg) {
  return *msg->_impl_.hash_partition_;
}
PartitionRule::PartitionRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.PartitionRule)
}
PartitionRule::PartitionRule(const PartitionRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartitionRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_){from._impl_.columns_}
    , decltype(_impl_.range_partition_){nullptr}
    , decltype(_impl_.hash_partition_){nullptr}
    , decltype(_impl_.strategy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range_partition()) {
    _this->_impl_.range_partition_ = new ::dingodb::pb::meta::RangePartition(*from._impl_.range_partition_);
  }
  if (from._internal_has_hash_partition()) {
    _this->_impl_.hash_partition_ = new ::dingodb::pb::meta::HashPartition(*from._impl_.hash_partition_);
  }
  _this->_impl_.strategy_ = from._impl_.strategy_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.PartitionRule)
}

inline void PartitionRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_){arena}
    , decltype(_impl_.range_partition_){nullptr}
    , decltype(_impl_.hash_partition_){nullptr}
    , decltype(_impl_.strategy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PartitionRule::~PartitionRule() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.PartitionRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartitionRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.range_partition_;
  if (this != internal_default_instance()) delete _impl_.hash_partition_;
}

void PartitionRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartitionRule::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.PartitionRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.range_partition_ != nullptr) {
    delete _impl_.range_partition_;
  }
  _impl_.range_partition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.hash_partition_ != nullptr) {
    delete _impl_.hash_partition_;
  }
  _impl_.hash_partition_ = nullptr;
  _impl_.strategy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string columns = 1 [json_name = "columns"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_columns();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.meta.PartitionRule.columns"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.PartitionStrategy strategy = 2 [json_name = "strategy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strategy(static_cast<::dingodb::pb::meta::PartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.RangePartition range_partition = 3 [json_name = "rangePartition"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_partition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.HashPartition hash_partition = 4 [json_name = "hashPartition"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash_partition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartitionRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.PartitionRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string columns = 1 [json_name = "columns"];
  for (int i = 0, n = this->_internal_columns_size(); i < n; i++) {
    const auto& s = this->_internal_columns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.meta.PartitionRule.columns");
    target = stream->WriteString(1, s, target);
  }

  // .dingodb.pb.meta.PartitionStrategy strategy = 2 [json_name = "strategy"];
  if (this->_internal_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_strategy(), target);
  }

  // .dingodb.pb.meta.RangePartition range_partition = 3 [json_name = "rangePartition"];
  if (this->_internal_has_range_partition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range_partition(this),
        _Internal::range_partition(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.meta.HashPartition hash_partition = 4 [json_name = "hashPartition"];
  if (this->_internal_has_hash_partition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::hash_partition(this),
        _Internal::hash_partition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.PartitionRule)
  return target;
}

size_t PartitionRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.PartitionRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string columns = 1 [json_name = "columns"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.columns_.size());
  for (int i = 0, n = _impl_.columns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.columns_.Get(i));
  }

  // .dingodb.pb.meta.RangePartition range_partition = 3 [json_name = "rangePartition"];
  if (this->_internal_has_range_partition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_partition_);
  }

  // .dingodb.pb.meta.HashPartition hash_partition = 4 [json_name = "hashPartition"];
  if (this->_internal_has_hash_partition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hash_partition_);
  }

  // .dingodb.pb.meta.PartitionStrategy strategy = 2 [json_name = "strategy"];
  if (this->_internal_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartitionRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartitionRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartitionRule::GetClassData() const { return &_class_data_; }


void PartitionRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartitionRule*>(&to_msg);
  auto& from = static_cast<const PartitionRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.PartitionRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_.MergeFrom(from._impl_.columns_);
  if (from._internal_has_range_partition()) {
    _this->_internal_mutable_range_partition()->::dingodb::pb::meta::RangePartition::MergeFrom(
        from._internal_range_partition());
  }
  if (from._internal_has_hash_partition()) {
    _this->_internal_mutable_hash_partition()->::dingodb::pb::meta::HashPartition::MergeFrom(
        from._internal_hash_partition());
  }
  if (from._internal_strategy() != 0) {
    _this->_internal_set_strategy(from._internal_strategy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionRule::CopyFrom(const PartitionRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.PartitionRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionRule::IsInitialized() const {
  return true;
}

void PartitionRule::InternalSwap(PartitionRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_.InternalSwap(&other->_impl_.columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartitionRule, _impl_.strategy_)
      + sizeof(PartitionRule::_impl_.strategy_)
      - PROTOBUF_FIELD_OFFSET(PartitionRule, _impl_.range_partition_)>(
          reinterpret_cast<char*>(&_impl_.range_partition_),
          reinterpret_cast<char*>(&other->_impl_.range_partition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[5]);
}

// ===================================================================

class Schema::_Internal {
 public:
  static const ::dingodb::pb::meta::DingoCommonId& id(const Schema* msg);
};

const ::dingodb::pb::meta::DingoCommonId&
Schema::_Internal::id(const Schema* msg) {
  return *msg->_impl_.id_;
}
Schema::Schema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.Schema)
}
Schema::Schema(const Schema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Schema* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_ids_){from._impl_.schema_ids_}
    , decltype(_impl_.table_ids_){from._impl_.table_ids_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::dingodb::pb::meta::DingoCommonId(*from._impl_.id_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.Schema)
}

inline void Schema::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_ids_){arena}
    , decltype(_impl_.table_ids_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.Schema)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Schema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schema_ids_.~RepeatedPtrField();
  _impl_.table_ids_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
}

void Schema::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Schema::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.Schema)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schema_ids_.Clear();
  _impl_.table_ids_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Schema::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.DingoCommonId id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.meta.Schema.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.meta.DingoCommonId schema_ids = 3 [json_name = "schemaIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schema_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.meta.DingoCommonId table_ids = 4 [json_name = "tableIds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Schema::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.Schema)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId id = 1 [json_name = "id"];
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.meta.Schema.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .dingodb.pb.meta.DingoCommonId schema_ids = 3 [json_name = "schemaIds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_schema_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_schema_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dingodb.pb.meta.DingoCommonId table_ids = 4 [json_name = "tableIds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_table_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_table_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.Schema)
  return target;
}

size_t Schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.Schema)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.meta.DingoCommonId schema_ids = 3 [json_name = "schemaIds"];
  total_size += 1UL * this->_internal_schema_ids_size();
  for (const auto& msg : this->_impl_.schema_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dingodb.pb.meta.DingoCommonId table_ids = 4 [json_name = "tableIds"];
  total_size += 1UL * this->_internal_table_ids_size();
  for (const auto& msg : this->_impl_.table_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .dingodb.pb.meta.DingoCommonId id = 1 [json_name = "id"];
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Schema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Schema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Schema::GetClassData() const { return &_class_data_; }


void Schema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Schema*>(&to_msg);
  auto& from = static_cast<const Schema&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.Schema)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.schema_ids_.MergeFrom(from._impl_.schema_ids_);
  _this->_impl_.table_ids_.MergeFrom(from._impl_.table_ids_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::dingodb::pb::meta::DingoCommonId::MergeFrom(
        from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Schema::CopyFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  return true;
}

void Schema::InternalSwap(Schema* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.schema_ids_.InternalSwap(&other->_impl_.schema_ids_);
  _impl_.table_ids_.InternalSwap(&other->_impl_.table_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Schema::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[6]);
}

// ===================================================================

TableDefinition_IndexesEntry_DoNotUse::TableDefinition_IndexesEntry_DoNotUse() {}
TableDefinition_IndexesEntry_DoNotUse::TableDefinition_IndexesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TableDefinition_IndexesEntry_DoNotUse::MergeFrom(const TableDefinition_IndexesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TableDefinition_IndexesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[7]);
}

// ===================================================================

TableDefinition_PropertiesEntry_DoNotUse::TableDefinition_PropertiesEntry_DoNotUse() {}
TableDefinition_PropertiesEntry_DoNotUse::TableDefinition_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TableDefinition_PropertiesEntry_DoNotUse::MergeFrom(const TableDefinition_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TableDefinition_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[8]);
}

// ===================================================================

class TableDefinition::_Internal {
 public:
  static const ::dingodb::pb::meta::PartitionRule& table_partition(const TableDefinition* msg);
};

const ::dingodb::pb::meta::PartitionRule&
TableDefinition::_Internal::table_partition(const TableDefinition* msg) {
  return *msg->_impl_.table_partition_;
}
TableDefinition::TableDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TableDefinition::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.TableDefinition)
}
TableDefinition::TableDefinition(const TableDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableDefinition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_){from._impl_.columns_}
    , /*decltype(_impl_.indexes_)*/{}
    , /*decltype(_impl_.properties_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.table_partition_){nullptr}
    , decltype(_impl_.ttl_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.engine_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.indexes_.MergeFrom(from._impl_.indexes_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_table_partition()) {
    _this->_impl_.table_partition_ = new ::dingodb::pb::meta::PartitionRule(*from._impl_.table_partition_);
  }
  ::memcpy(&_impl_.ttl_, &from._impl_.ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.engine_) -
    reinterpret_cast<char*>(&_impl_.ttl_)) + sizeof(_impl_.engine_));
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.TableDefinition)
}

inline void TableDefinition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.columns_){arena}
    , /*decltype(_impl_.indexes_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.table_partition_){nullptr}
    , decltype(_impl_.ttl_){uint64_t{0u}}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.engine_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableDefinition::~TableDefinition() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.TableDefinition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TableDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.columns_.~RepeatedPtrField();
  _impl_.indexes_.Destruct();
  _impl_.indexes_.~MapField();
  _impl_.properties_.Destruct();
  _impl_.properties_.~MapField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_partition_;
}

void TableDefinition::ArenaDtor(void* object) {
  TableDefinition* _this = reinterpret_cast< TableDefinition* >(object);
  _this->_impl_.indexes_.Destruct();
  _this->_impl_.properties_.Destruct();
}
void TableDefinition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.TableDefinition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_.Clear();
  _impl_.indexes_.Clear();
  _impl_.properties_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.table_partition_ != nullptr) {
    delete _impl_.table_partition_;
  }
  _impl_.table_partition_ = nullptr;
  ::memset(&_impl_.ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.engine_) -
      reinterpret_cast<char*>(&_impl_.ttl_)) + sizeof(_impl_.engine_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableDefinition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.meta.TableDefinition.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.meta.ColumnDefinition columns = 2 [json_name = "columns"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .dingodb.pb.meta.Index> indexes = 3 [json_name = "indexes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.indexes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 4 [json_name = "version"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ttl = 5 [json_name = "ttl"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.PartitionRule table_partition = 6 [json_name = "tablePartition"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_partition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Engine engine = 7 [json_name = "engine"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_engine(static_cast<::dingodb::pb::common::Engine>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> properties = 8 [json_name = "properties"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableDefinition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.TableDefinition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.meta.TableDefinition.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .dingodb.pb.meta.ColumnDefinition columns = 2 [json_name = "columns"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_columns_size()); i < n; i++) {
    const auto& repfield = this->_internal_columns(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .dingodb.pb.meta.Index> indexes = 3 [json_name = "indexes"];
  if (!this->_internal_indexes().empty()) {
    using MapType = ::_pb::Map<std::string, ::dingodb::pb::meta::Index>;
    using WireHelper = TableDefinition_IndexesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_indexes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "dingodb.pb.meta.TableDefinition.IndexesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // uint32 version = 4 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  // uint64 ttl = 5 [json_name = "ttl"];
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_ttl(), target);
  }

  // .dingodb.pb.meta.PartitionRule table_partition = 6 [json_name = "tablePartition"];
  if (this->_internal_has_table_partition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::table_partition(this),
        _Internal::table_partition(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.common.Engine engine = 7 [json_name = "engine"];
  if (this->_internal_engine() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_engine(), target);
  }

  // map<string, string> properties = 8 [json_name = "properties"];
  if (!this->_internal_properties().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TableDefinition_PropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "dingodb.pb.meta.TableDefinition.PropertiesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "dingodb.pb.meta.TableDefinition.PropertiesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.TableDefinition)
  return target;
}

size_t TableDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.TableDefinition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.meta.ColumnDefinition columns = 2 [json_name = "columns"];
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->_impl_.columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .dingodb.pb.meta.Index> indexes = 3 [json_name = "indexes"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_indexes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dingodb::pb::meta::Index >::const_iterator
      it = this->_internal_indexes().begin();
      it != this->_internal_indexes().end(); ++it) {
    total_size += TableDefinition_IndexesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> properties = 8 [json_name = "properties"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += TableDefinition_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .dingodb.pb.meta.PartitionRule table_partition = 6 [json_name = "tablePartition"];
  if (this->_internal_has_table_partition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_partition_);
  }

  // uint64 ttl = 5 [json_name = "ttl"];
  if (this->_internal_ttl() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ttl());
  }

  // uint32 version = 4 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // .dingodb.pb.common.Engine engine = 7 [json_name = "engine"];
  if (this->_internal_engine() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_engine());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableDefinition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableDefinition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableDefinition::GetClassData() const { return &_class_data_; }


void TableDefinition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableDefinition*>(&to_msg);
  auto& from = static_cast<const TableDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.TableDefinition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.columns_.MergeFrom(from._impl_.columns_);
  _this->_impl_.indexes_.MergeFrom(from._impl_.indexes_);
  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_table_partition()) {
    _this->_internal_mutable_table_partition()->::dingodb::pb::meta::PartitionRule::MergeFrom(
        from._internal_table_partition());
  }
  if (from._internal_ttl() != 0) {
    _this->_internal_set_ttl(from._internal_ttl());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_engine() != 0) {
    _this->_internal_set_engine(from._internal_engine());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableDefinition::CopyFrom(const TableDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.TableDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDefinition::IsInitialized() const {
  return true;
}

void TableDefinition::InternalSwap(TableDefinition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_.InternalSwap(&other->_impl_.columns_);
  _impl_.indexes_.InternalSwap(&other->_impl_.indexes_);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableDefinition, _impl_.engine_)
      + sizeof(TableDefinition::_impl_.engine_)
      - PROTOBUF_FIELD_OFFSET(TableDefinition, _impl_.table_partition_)>(
          reinterpret_cast<char*>(&_impl_.table_partition_),
          reinterpret_cast<char*>(&other->_impl_.table_partition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableDefinition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[9]);
}

// ===================================================================

class Part::_Internal {
 public:
  static const ::dingodb::pb::meta::DingoCommonId& id(const Part* msg);
  static const ::dingodb::pb::common::Range& range(const Part* msg);
  static const ::dingodb::pb::common::Location& leader(const Part* msg);
};

const ::dingodb::pb::meta::DingoCommonId&
Part::_Internal::id(const Part* msg) {
  return *msg->_impl_.id_;
}
const ::dingodb::pb::common::Range&
Part::_Internal::range(const Part* msg) {
  return *msg->_impl_.range_;
}
const ::dingodb::pb::common::Location&
Part::_Internal::leader(const Part* msg) {
  return *msg->_impl_.leader_;
}
void Part::clear_range() {
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
}
void Part::clear_leader() {
  if (GetArenaForAllocation() == nullptr && _impl_.leader_ != nullptr) {
    delete _impl_.leader_;
  }
  _impl_.leader_ = nullptr;
}
void Part::clear_voters() {
  _impl_.voters_.Clear();
}
void Part::clear_learners() {
  _impl_.learners_.Clear();
}
Part::Part(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.Part)
}
Part::Part(const Part& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Part* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.voters_){from._impl_.voters_}
    , decltype(_impl_.learners_){from._impl_.learners_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.leader_){nullptr}
    , decltype(_impl_.regionmap_epoch_){}
    , decltype(_impl_.storemap_epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::dingodb::pb::meta::DingoCommonId(*from._impl_.id_);
  }
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::dingodb::pb::common::Range(*from._impl_.range_);
  }
  if (from._internal_has_leader()) {
    _this->_impl_.leader_ = new ::dingodb::pb::common::Location(*from._impl_.leader_);
  }
  ::memcpy(&_impl_.regionmap_epoch_, &from._impl_.regionmap_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.storemap_epoch_) -
    reinterpret_cast<char*>(&_impl_.regionmap_epoch_)) + sizeof(_impl_.storemap_epoch_));
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.Part)
}

inline void Part::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.voters_){arena}
    , decltype(_impl_.learners_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.leader_){nullptr}
    , decltype(_impl_.regionmap_epoch_){uint64_t{0u}}
    , decltype(_impl_.storemap_epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Part::~Part() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.Part)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Part::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voters_.~RepeatedPtrField();
  _impl_.learners_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.range_;
  if (this != internal_default_instance()) delete _impl_.leader_;
}

void Part::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Part::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.Part)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voters_.Clear();
  _impl_.learners_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.leader_ != nullptr) {
    delete _impl_.leader_;
  }
  _impl_.leader_ = nullptr;
  ::memset(&_impl_.regionmap_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.storemap_epoch_) -
      reinterpret_cast<char*>(&_impl_.regionmap_epoch_)) + sizeof(_impl_.storemap_epoch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Part::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.DingoCommonId id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Range range = 2 [json_name = "range"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Location leader = 3 [json_name = "leader"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.common.Location voters = 4 [json_name = "voters"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_voters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.common.Location learners = 5 [json_name = "learners"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_learners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 regionmap_epoch = 6 [json_name = "regionmapEpoch"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.regionmap_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 storemap_epoch = 7 [json_name = "storemapEpoch"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.storemap_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Part::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.Part)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId id = 1 [json_name = "id"];
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.common.Range range = 2 [json_name = "range"];
  if (this->_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.common.Location leader = 3 [json_name = "leader"];
  if (this->_internal_has_leader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::leader(this),
        _Internal::leader(this).GetCachedSize(), target, stream);
  }

  // repeated .dingodb.pb.common.Location voters = 4 [json_name = "voters"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_voters_size()); i < n; i++) {
    const auto& repfield = this->_internal_voters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dingodb.pb.common.Location learners = 5 [json_name = "learners"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_learners_size()); i < n; i++) {
    const auto& repfield = this->_internal_learners(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 regionmap_epoch = 6 [json_name = "regionmapEpoch"];
  if (this->_internal_regionmap_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_regionmap_epoch(), target);
  }

  // uint64 storemap_epoch = 7 [json_name = "storemapEpoch"];
  if (this->_internal_storemap_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_storemap_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.Part)
  return target;
}

size_t Part::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.Part)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.Location voters = 4 [json_name = "voters"];
  total_size += 1UL * this->_internal_voters_size();
  for (const auto& msg : this->_impl_.voters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dingodb.pb.common.Location learners = 5 [json_name = "learners"];
  total_size += 1UL * this->_internal_learners_size();
  for (const auto& msg : this->_impl_.learners_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dingodb.pb.meta.DingoCommonId id = 1 [json_name = "id"];
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  // .dingodb.pb.common.Range range = 2 [json_name = "range"];
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  // .dingodb.pb.common.Location leader = 3 [json_name = "leader"];
  if (this->_internal_has_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leader_);
  }

  // uint64 regionmap_epoch = 6 [json_name = "regionmapEpoch"];
  if (this->_internal_regionmap_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_regionmap_epoch());
  }

  // uint64 storemap_epoch = 7 [json_name = "storemapEpoch"];
  if (this->_internal_storemap_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_storemap_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Part::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Part::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Part::GetClassData() const { return &_class_data_; }


void Part::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Part*>(&to_msg);
  auto& from = static_cast<const Part&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.Part)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.voters_.MergeFrom(from._impl_.voters_);
  _this->_impl_.learners_.MergeFrom(from._impl_.learners_);
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::dingodb::pb::meta::DingoCommonId::MergeFrom(
        from._internal_id());
  }
  if (from._internal_has_range()) {
    _this->_internal_mutable_range()->::dingodb::pb::common::Range::MergeFrom(
        from._internal_range());
  }
  if (from._internal_has_leader()) {
    _this->_internal_mutable_leader()->::dingodb::pb::common::Location::MergeFrom(
        from._internal_leader());
  }
  if (from._internal_regionmap_epoch() != 0) {
    _this->_internal_set_regionmap_epoch(from._internal_regionmap_epoch());
  }
  if (from._internal_storemap_epoch() != 0) {
    _this->_internal_set_storemap_epoch(from._internal_storemap_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Part::CopyFrom(const Part& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Part::IsInitialized() const {
  return true;
}

void Part::InternalSwap(Part* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.voters_.InternalSwap(&other->_impl_.voters_);
  _impl_.learners_.InternalSwap(&other->_impl_.learners_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Part, _impl_.storemap_epoch_)
      + sizeof(Part::_impl_.storemap_epoch_)
      - PROTOBUF_FIELD_OFFSET(Part, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Part::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[10]);
}

// ===================================================================

class Table::_Internal {
 public:
  static const ::dingodb::pb::meta::DingoCommonId& id(const Table* msg);
};

const ::dingodb::pb::meta::DingoCommonId&
Table::_Internal::id(const Table* msg) {
  return *msg->_impl_.id_;
}
Table::Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.Table)
}
Table::Table(const Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Table* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parts_){from._impl_.parts_}
    , decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::dingodb::pb::meta::DingoCommonId(*from._impl_.id_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.Table)
}

inline void Table::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parts_){arena}
    , decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.Table)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Table::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parts_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
}

void Table::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.Table)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parts_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Table::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.DingoCommonId id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.meta.Part parts = 2 [json_name = "parts"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Table::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.Table)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId id = 1 [json_name = "id"];
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // repeated .dingodb.pb.meta.Part parts = 2 [json_name = "parts"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parts_size()); i < n; i++) {
    const auto& repfield = this->_internal_parts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.Table)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.meta.Part parts = 2 [json_name = "parts"];
  total_size += 1UL * this->_internal_parts_size();
  for (const auto& msg : this->_impl_.parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dingodb.pb.meta.DingoCommonId id = 1 [json_name = "id"];
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Table::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Table::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Table::GetClassData() const { return &_class_data_; }


void Table::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Table*>(&to_msg);
  auto& from = static_cast<const Table&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.Table)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parts_.MergeFrom(from._impl_.parts_);
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::dingodb::pb::meta::DingoCommonId::MergeFrom(
        from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::InternalSwap(Table* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parts_.InternalSwap(&other->_impl_.parts_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Table::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[11]);
}

// ===================================================================

class GetSchemasRequest::_Internal {
 public:
  static const ::dingodb::pb::meta::DingoCommonId& schema_id(const GetSchemasRequest* msg);
};

const ::dingodb::pb::meta::DingoCommonId&
GetSchemasRequest::_Internal::schema_id(const GetSchemasRequest* msg) {
  return *msg->_impl_.schema_id_;
}
GetSchemasRequest::GetSchemasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.GetSchemasRequest)
}
GetSchemasRequest::GetSchemasRequest(const GetSchemasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSchemasRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_schema_id()) {
    _this->_impl_.schema_id_ = new ::dingodb::pb::meta::DingoCommonId(*from._impl_.schema_id_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.GetSchemasRequest)
}

inline void GetSchemasRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSchemasRequest::~GetSchemasRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.GetSchemasRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSchemasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.schema_id_;
}

void GetSchemasRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSchemasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.GetSchemasRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.schema_id_ != nullptr) {
    delete _impl_.schema_id_;
  }
  _impl_.schema_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSchemasRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.DingoCommonId schema_id = 1 [json_name = "schemaId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSchemasRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.GetSchemasRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId schema_id = 1 [json_name = "schemaId"];
  if (this->_internal_has_schema_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::schema_id(this),
        _Internal::schema_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.GetSchemasRequest)
  return target;
}

size_t GetSchemasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.GetSchemasRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId schema_id = 1 [json_name = "schemaId"];
  if (this->_internal_has_schema_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schema_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSchemasRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSchemasRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSchemasRequest::GetClassData() const { return &_class_data_; }


void GetSchemasRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSchemasRequest*>(&to_msg);
  auto& from = static_cast<const GetSchemasRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.GetSchemasRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_schema_id()) {
    _this->_internal_mutable_schema_id()->::dingodb::pb::meta::DingoCommonId::MergeFrom(
        from._internal_schema_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSchemasRequest::CopyFrom(const GetSchemasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.GetSchemasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSchemasRequest::IsInitialized() const {
  return true;
}

void GetSchemasRequest::InternalSwap(GetSchemasRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.schema_id_, other->_impl_.schema_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSchemasRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[12]);
}

// ===================================================================

class GetSchemasResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const GetSchemasResponse* msg);
};

const ::dingodb::pb::error::Error&
GetSchemasResponse::_Internal::error(const GetSchemasResponse* msg) {
  return *msg->_impl_.error_;
}
void GetSchemasResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
GetSchemasResponse::GetSchemasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.GetSchemasResponse)
}
GetSchemasResponse::GetSchemasResponse(const GetSchemasResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSchemasResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schemas_){from._impl_.schemas_}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.GetSchemasResponse)
}

inline void GetSchemasResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schemas_){arena}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSchemasResponse::~GetSchemasResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.GetSchemasResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSchemasResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schemas_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void GetSchemasResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSchemasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.GetSchemasResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schemas_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSchemasResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.meta.Schema schemas = 2 [json_name = "schemas"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schemas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSchemasResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.GetSchemasResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // repeated .dingodb.pb.meta.Schema schemas = 2 [json_name = "schemas"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_schemas_size()); i < n; i++) {
    const auto& repfield = this->_internal_schemas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.GetSchemasResponse)
  return target;
}

size_t GetSchemasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.GetSchemasResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.meta.Schema schemas = 2 [json_name = "schemas"];
  total_size += 1UL * this->_internal_schemas_size();
  for (const auto& msg : this->_impl_.schemas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSchemasResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSchemasResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSchemasResponse::GetClassData() const { return &_class_data_; }


void GetSchemasResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSchemasResponse*>(&to_msg);
  auto& from = static_cast<const GetSchemasResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.GetSchemasResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.schemas_.MergeFrom(from._impl_.schemas_);
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSchemasResponse::CopyFrom(const GetSchemasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.GetSchemasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSchemasResponse::IsInitialized() const {
  return true;
}

void GetSchemasResponse::InternalSwap(GetSchemasResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.schemas_.InternalSwap(&other->_impl_.schemas_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSchemasResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[13]);
}

// ===================================================================

class TableDefinitionWithId::_Internal {
 public:
  static const ::dingodb::pb::meta::DingoCommonId& table_id(const TableDefinitionWithId* msg);
  static const ::dingodb::pb::meta::TableDefinition& table_definition(const TableDefinitionWithId* msg);
};

const ::dingodb::pb::meta::DingoCommonId&
TableDefinitionWithId::_Internal::table_id(const TableDefinitionWithId* msg) {
  return *msg->_impl_.table_id_;
}
const ::dingodb::pb::meta::TableDefinition&
TableDefinitionWithId::_Internal::table_definition(const TableDefinitionWithId* msg) {
  return *msg->_impl_.table_definition_;
}
TableDefinitionWithId::TableDefinitionWithId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.TableDefinitionWithId)
}
TableDefinitionWithId::TableDefinitionWithId(const TableDefinitionWithId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableDefinitionWithId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.table_definition_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::dingodb::pb::meta::DingoCommonId(*from._impl_.table_id_);
  }
  if (from._internal_has_table_definition()) {
    _this->_impl_.table_definition_ = new ::dingodb::pb::meta::TableDefinition(*from._impl_.table_definition_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.TableDefinitionWithId)
}

inline void TableDefinitionWithId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.table_definition_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TableDefinitionWithId::~TableDefinitionWithId() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.TableDefinitionWithId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableDefinitionWithId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
  if (this != internal_default_instance()) delete _impl_.table_definition_;
}

void TableDefinitionWithId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableDefinitionWithId::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.TableDefinitionWithId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.table_id_ != nullptr) {
    delete _impl_.table_id_;
  }
  _impl_.table_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.table_definition_ != nullptr) {
    delete _impl_.table_definition_;
  }
  _impl_.table_definition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableDefinitionWithId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.DingoCommonId table_id = 1 [json_name = "tableId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.TableDefinition table_definition = 2 [json_name = "tableDefinition"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_definition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableDefinitionWithId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.TableDefinitionWithId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId table_id = 1 [json_name = "tableId"];
  if (this->_internal_has_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.meta.TableDefinition table_definition = 2 [json_name = "tableDefinition"];
  if (this->_internal_has_table_definition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table_definition(this),
        _Internal::table_definition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.TableDefinitionWithId)
  return target;
}

size_t TableDefinitionWithId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.TableDefinitionWithId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId table_id = 1 [json_name = "tableId"];
  if (this->_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  // .dingodb.pb.meta.TableDefinition table_definition = 2 [json_name = "tableDefinition"];
  if (this->_internal_has_table_definition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_definition_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableDefinitionWithId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableDefinitionWithId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableDefinitionWithId::GetClassData() const { return &_class_data_; }


void TableDefinitionWithId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableDefinitionWithId*>(&to_msg);
  auto& from = static_cast<const TableDefinitionWithId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.TableDefinitionWithId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_table_id()) {
    _this->_internal_mutable_table_id()->::dingodb::pb::meta::DingoCommonId::MergeFrom(
        from._internal_table_id());
  }
  if (from._internal_has_table_definition()) {
    _this->_internal_mutable_table_definition()->::dingodb::pb::meta::TableDefinition::MergeFrom(
        from._internal_table_definition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableDefinitionWithId::CopyFrom(const TableDefinitionWithId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.TableDefinitionWithId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDefinitionWithId::IsInitialized() const {
  return true;
}

void TableDefinitionWithId::InternalSwap(TableDefinitionWithId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableDefinitionWithId, _impl_.table_definition_)
      + sizeof(TableDefinitionWithId::_impl_.table_definition_)
      - PROTOBUF_FIELD_OFFSET(TableDefinitionWithId, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableDefinitionWithId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[14]);
}

// ===================================================================

class GetTablesRequest::_Internal {
 public:
  static const ::dingodb::pb::meta::DingoCommonId& schema_id(const GetTablesRequest* msg);
};

const ::dingodb::pb::meta::DingoCommonId&
GetTablesRequest::_Internal::schema_id(const GetTablesRequest* msg) {
  return *msg->_impl_.schema_id_;
}
GetTablesRequest::GetTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.GetTablesRequest)
}
GetTablesRequest::GetTablesRequest(const GetTablesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTablesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_schema_id()) {
    _this->_impl_.schema_id_ = new ::dingodb::pb::meta::DingoCommonId(*from._impl_.schema_id_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.GetTablesRequest)
}

inline void GetTablesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTablesRequest::~GetTablesRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.GetTablesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTablesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.schema_id_;
}

void GetTablesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.GetTablesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.schema_id_ != nullptr) {
    delete _impl_.schema_id_;
  }
  _impl_.schema_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTablesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.DingoCommonId schema_id = 1 [json_name = "schemaId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTablesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.GetTablesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId schema_id = 1 [json_name = "schemaId"];
  if (this->_internal_has_schema_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::schema_id(this),
        _Internal::schema_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.GetTablesRequest)
  return target;
}

size_t GetTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.GetTablesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId schema_id = 1 [json_name = "schemaId"];
  if (this->_internal_has_schema_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schema_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTablesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTablesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTablesRequest::GetClassData() const { return &_class_data_; }


void GetTablesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTablesRequest*>(&to_msg);
  auto& from = static_cast<const GetTablesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.GetTablesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_schema_id()) {
    _this->_internal_mutable_schema_id()->::dingodb::pb::meta::DingoCommonId::MergeFrom(
        from._internal_schema_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTablesRequest::CopyFrom(const GetTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.GetTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesRequest::IsInitialized() const {
  return true;
}

void GetTablesRequest::InternalSwap(GetTablesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.schema_id_, other->_impl_.schema_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTablesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[15]);
}

// ===================================================================

class GetTablesResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const GetTablesResponse* msg);
};

const ::dingodb::pb::error::Error&
GetTablesResponse::_Internal::error(const GetTablesResponse* msg) {
  return *msg->_impl_.error_;
}
void GetTablesResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
GetTablesResponse::GetTablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.GetTablesResponse)
}
GetTablesResponse::GetTablesResponse(const GetTablesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTablesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_definition_with_ids_){from._impl_.table_definition_with_ids_}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.GetTablesResponse)
}

inline void GetTablesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_definition_with_ids_){arena}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTablesResponse::~GetTablesResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.GetTablesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTablesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_definition_with_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void GetTablesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTablesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.GetTablesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_definition_with_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTablesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.meta.TableDefinitionWithId table_definition_with_ids = 2 [json_name = "tableDefinitionWithIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_definition_with_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTablesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.GetTablesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // repeated .dingodb.pb.meta.TableDefinitionWithId table_definition_with_ids = 2 [json_name = "tableDefinitionWithIds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_table_definition_with_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_table_definition_with_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.GetTablesResponse)
  return target;
}

size_t GetTablesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.GetTablesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.meta.TableDefinitionWithId table_definition_with_ids = 2 [json_name = "tableDefinitionWithIds"];
  total_size += 1UL * this->_internal_table_definition_with_ids_size();
  for (const auto& msg : this->_impl_.table_definition_with_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTablesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTablesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTablesResponse::GetClassData() const { return &_class_data_; }


void GetTablesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTablesResponse*>(&to_msg);
  auto& from = static_cast<const GetTablesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.GetTablesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.table_definition_with_ids_.MergeFrom(from._impl_.table_definition_with_ids_);
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTablesResponse::CopyFrom(const GetTablesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.GetTablesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesResponse::IsInitialized() const {
  return true;
}

void GetTablesResponse::InternalSwap(GetTablesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.table_definition_with_ids_.InternalSwap(&other->_impl_.table_definition_with_ids_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTablesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[16]);
}

// ===================================================================

class GetTableRequest::_Internal {
 public:
  static const ::dingodb::pb::meta::DingoCommonId& table_id(const GetTableRequest* msg);
};

const ::dingodb::pb::meta::DingoCommonId&
GetTableRequest::_Internal::table_id(const GetTableRequest* msg) {
  return *msg->_impl_.table_id_;
}
GetTableRequest::GetTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.GetTableRequest)
}
GetTableRequest::GetTableRequest(const GetTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::dingodb::pb::meta::DingoCommonId(*from._impl_.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.GetTableRequest)
}

inline void GetTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTableRequest::~GetTableRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.GetTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void GetTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.GetTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.table_id_ != nullptr) {
    delete _impl_.table_id_;
  }
  _impl_.table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.DingoCommonId table_id = 1 [json_name = "tableId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.GetTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId table_id = 1 [json_name = "tableId"];
  if (this->_internal_has_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.GetTableRequest)
  return target;
}

size_t GetTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.GetTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId table_id = 1 [json_name = "tableId"];
  if (this->_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTableRequest::GetClassData() const { return &_class_data_; }


void GetTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTableRequest*>(&to_msg);
  auto& from = static_cast<const GetTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.GetTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_table_id()) {
    _this->_internal_mutable_table_id()->::dingodb::pb::meta::DingoCommonId::MergeFrom(
        from._internal_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTableRequest::CopyFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableRequest::IsInitialized() const {
  return true;
}

void GetTableRequest::InternalSwap(GetTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.table_id_, other->_impl_.table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[17]);
}

// ===================================================================

class GetTableResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const GetTableResponse* msg);
  static const ::dingodb::pb::meta::Table& table(const GetTableResponse* msg);
};

const ::dingodb::pb::error::Error&
GetTableResponse::_Internal::error(const GetTableResponse* msg) {
  return *msg->_impl_.error_;
}
const ::dingodb::pb::meta::Table&
GetTableResponse::_Internal::table(const GetTableResponse* msg) {
  return *msg->_impl_.table_;
}
void GetTableResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
GetTableResponse::GetTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.GetTableResponse)
}
GetTableResponse::GetTableResponse(const GetTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  if (from._internal_has_table()) {
    _this->_impl_.table_ = new ::dingodb::pb::meta::Table(*from._impl_.table_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.GetTableResponse)
}

inline void GetTableResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTableResponse::~GetTableResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.GetTableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
  if (this != internal_default_instance()) delete _impl_.table_;
}

void GetTableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.GetTableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.table_ != nullptr) {
    delete _impl_.table_;
  }
  _impl_.table_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.Table table = 2 [json_name = "table"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.GetTableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.meta.Table table = 2 [json_name = "table"];
  if (this->_internal_has_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table(this),
        _Internal::table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.GetTableResponse)
  return target;
}

size_t GetTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.GetTableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .dingodb.pb.meta.Table table = 2 [json_name = "table"];
  if (this->_internal_has_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTableResponse::GetClassData() const { return &_class_data_; }


void GetTableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTableResponse*>(&to_msg);
  auto& from = static_cast<const GetTableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.GetTableResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_has_table()) {
    _this->_internal_mutable_table()->::dingodb::pb::meta::Table::MergeFrom(
        from._internal_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTableResponse::CopyFrom(const GetTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.GetTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableResponse::IsInitialized() const {
  return true;
}

void GetTableResponse::InternalSwap(GetTableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTableResponse, _impl_.table_)
      + sizeof(GetTableResponse::_impl_.table_)
      - PROTOBUF_FIELD_OFFSET(GetTableResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[18]);
}

// ===================================================================

class CreateTableRequest::_Internal {
 public:
  static const ::dingodb::pb::meta::DingoCommonId& schema_id(const CreateTableRequest* msg);
  static const ::dingodb::pb::meta::TableDefinition& table_definition(const CreateTableRequest* msg);
};

const ::dingodb::pb::meta::DingoCommonId&
CreateTableRequest::_Internal::schema_id(const CreateTableRequest* msg) {
  return *msg->_impl_.schema_id_;
}
const ::dingodb::pb::meta::TableDefinition&
CreateTableRequest::_Internal::table_definition(const CreateTableRequest* msg) {
  return *msg->_impl_.table_definition_;
}
CreateTableRequest::CreateTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.CreateTableRequest)
}
CreateTableRequest::CreateTableRequest(const CreateTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_id_){nullptr}
    , decltype(_impl_.table_definition_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_schema_id()) {
    _this->_impl_.schema_id_ = new ::dingodb::pb::meta::DingoCommonId(*from._impl_.schema_id_);
  }
  if (from._internal_has_table_definition()) {
    _this->_impl_.table_definition_ = new ::dingodb::pb::meta::TableDefinition(*from._impl_.table_definition_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.CreateTableRequest)
}

inline void CreateTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_id_){nullptr}
    , decltype(_impl_.table_definition_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateTableRequest::~CreateTableRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.CreateTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.schema_id_;
  if (this != internal_default_instance()) delete _impl_.table_definition_;
}

void CreateTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.CreateTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.schema_id_ != nullptr) {
    delete _impl_.schema_id_;
  }
  _impl_.schema_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.table_definition_ != nullptr) {
    delete _impl_.table_definition_;
  }
  _impl_.table_definition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.DingoCommonId schema_id = 1 [json_name = "schemaId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.TableDefinition table_definition = 2 [json_name = "tableDefinition"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_definition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.CreateTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId schema_id = 1 [json_name = "schemaId"];
  if (this->_internal_has_schema_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::schema_id(this),
        _Internal::schema_id(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.meta.TableDefinition table_definition = 2 [json_name = "tableDefinition"];
  if (this->_internal_has_table_definition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table_definition(this),
        _Internal::table_definition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.CreateTableRequest)
  return target;
}

size_t CreateTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.CreateTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId schema_id = 1 [json_name = "schemaId"];
  if (this->_internal_has_schema_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schema_id_);
  }

  // .dingodb.pb.meta.TableDefinition table_definition = 2 [json_name = "tableDefinition"];
  if (this->_internal_has_table_definition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_definition_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTableRequest::GetClassData() const { return &_class_data_; }


void CreateTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateTableRequest*>(&to_msg);
  auto& from = static_cast<const CreateTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.CreateTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_schema_id()) {
    _this->_internal_mutable_schema_id()->::dingodb::pb::meta::DingoCommonId::MergeFrom(
        from._internal_schema_id());
  }
  if (from._internal_has_table_definition()) {
    _this->_internal_mutable_table_definition()->::dingodb::pb::meta::TableDefinition::MergeFrom(
        from._internal_table_definition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTableRequest::CopyFrom(const CreateTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.CreateTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableRequest::IsInitialized() const {
  return true;
}

void CreateTableRequest::InternalSwap(CreateTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTableRequest, _impl_.table_definition_)
      + sizeof(CreateTableRequest::_impl_.table_definition_)
      - PROTOBUF_FIELD_OFFSET(CreateTableRequest, _impl_.schema_id_)>(
          reinterpret_cast<char*>(&_impl_.schema_id_),
          reinterpret_cast<char*>(&other->_impl_.schema_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[19]);
}

// ===================================================================

class CreateTableResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const CreateTableResponse* msg);
  static const ::dingodb::pb::meta::Table& table(const CreateTableResponse* msg);
};

const ::dingodb::pb::error::Error&
CreateTableResponse::_Internal::error(const CreateTableResponse* msg) {
  return *msg->_impl_.error_;
}
const ::dingodb::pb::meta::Table&
CreateTableResponse::_Internal::table(const CreateTableResponse* msg) {
  return *msg->_impl_.table_;
}
void CreateTableResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
CreateTableResponse::CreateTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.CreateTableResponse)
}
CreateTableResponse::CreateTableResponse(const CreateTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateTableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  if (from._internal_has_table()) {
    _this->_impl_.table_ = new ::dingodb::pb::meta::Table(*from._impl_.table_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.CreateTableResponse)
}

inline void CreateTableResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.table_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateTableResponse::~CreateTableResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.CreateTableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateTableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
  if (this != internal_default_instance()) delete _impl_.table_;
}

void CreateTableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.CreateTableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.table_ != nullptr) {
    delete _impl_.table_;
  }
  _impl_.table_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.Table table = 2 [json_name = "table"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.CreateTableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.meta.Table table = 2 [json_name = "table"];
  if (this->_internal_has_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table(this),
        _Internal::table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.CreateTableResponse)
  return target;
}

size_t CreateTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.CreateTableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .dingodb.pb.meta.Table table = 2 [json_name = "table"];
  if (this->_internal_has_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateTableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTableResponse::GetClassData() const { return &_class_data_; }


void CreateTableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateTableResponse*>(&to_msg);
  auto& from = static_cast<const CreateTableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.CreateTableResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_has_table()) {
    _this->_internal_mutable_table()->::dingodb::pb::meta::Table::MergeFrom(
        from._internal_table());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTableResponse::CopyFrom(const CreateTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.CreateTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTableResponse::IsInitialized() const {
  return true;
}

void CreateTableResponse::InternalSwap(CreateTableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTableResponse, _impl_.table_)
      + sizeof(CreateTableResponse::_impl_.table_)
      - PROTOBUF_FIELD_OFFSET(CreateTableResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[20]);
}

// ===================================================================

class CreateSchemaRequest::_Internal {
 public:
  static const ::dingodb::pb::meta::DingoCommonId& parent_schema_id(const CreateSchemaRequest* msg);
};

const ::dingodb::pb::meta::DingoCommonId&
CreateSchemaRequest::_Internal::parent_schema_id(const CreateSchemaRequest* msg) {
  return *msg->_impl_.parent_schema_id_;
}
CreateSchemaRequest::CreateSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.CreateSchemaRequest)
}
CreateSchemaRequest::CreateSchemaRequest(const CreateSchemaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSchemaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_name_){}
    , decltype(_impl_.parent_schema_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schema_name().empty()) {
    _this->_impl_.schema_name_.Set(from._internal_schema_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent_schema_id()) {
    _this->_impl_.parent_schema_id_ = new ::dingodb::pb::meta::DingoCommonId(*from._impl_.parent_schema_id_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.CreateSchemaRequest)
}

inline void CreateSchemaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_name_){}
    , decltype(_impl_.parent_schema_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.schema_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.schema_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateSchemaRequest::~CreateSchemaRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.CreateSchemaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateSchemaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schema_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_schema_id_;
}

void CreateSchemaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSchemaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.CreateSchemaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schema_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.parent_schema_id_ != nullptr) {
    delete _impl_.parent_schema_id_;
  }
  _impl_.parent_schema_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSchemaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.DingoCommonId parent_schema_id = 1 [json_name = "parentSchemaId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_schema_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string schema_name = 2 [json_name = "schemaName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.meta.CreateSchemaRequest.schema_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSchemaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.CreateSchemaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId parent_schema_id = 1 [json_name = "parentSchemaId"];
  if (this->_internal_has_parent_schema_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::parent_schema_id(this),
        _Internal::parent_schema_id(this).GetCachedSize(), target, stream);
  }

  // string schema_name = 2 [json_name = "schemaName"];
  if (!this->_internal_schema_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_name().data(), static_cast<int>(this->_internal_schema_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.meta.CreateSchemaRequest.schema_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_schema_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.CreateSchemaRequest)
  return target;
}

size_t CreateSchemaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.CreateSchemaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string schema_name = 2 [json_name = "schemaName"];
  if (!this->_internal_schema_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_name());
  }

  // .dingodb.pb.meta.DingoCommonId parent_schema_id = 1 [json_name = "parentSchemaId"];
  if (this->_internal_has_parent_schema_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_schema_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSchemaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSchemaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSchemaRequest::GetClassData() const { return &_class_data_; }


void CreateSchemaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSchemaRequest*>(&to_msg);
  auto& from = static_cast<const CreateSchemaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.CreateSchemaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_schema_name().empty()) {
    _this->_internal_set_schema_name(from._internal_schema_name());
  }
  if (from._internal_has_parent_schema_id()) {
    _this->_internal_mutable_parent_schema_id()->::dingodb::pb::meta::DingoCommonId::MergeFrom(
        from._internal_parent_schema_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSchemaRequest::CopyFrom(const CreateSchemaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.CreateSchemaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSchemaRequest::IsInitialized() const {
  return true;
}

void CreateSchemaRequest::InternalSwap(CreateSchemaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.schema_name_, lhs_arena,
      &other->_impl_.schema_name_, rhs_arena
  );
  swap(_impl_.parent_schema_id_, other->_impl_.parent_schema_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSchemaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[21]);
}

// ===================================================================

class CreateSchemaResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const CreateSchemaResponse* msg);
  static const ::dingodb::pb::meta::Schema& schema(const CreateSchemaResponse* msg);
};

const ::dingodb::pb::error::Error&
CreateSchemaResponse::_Internal::error(const CreateSchemaResponse* msg) {
  return *msg->_impl_.error_;
}
const ::dingodb::pb::meta::Schema&
CreateSchemaResponse::_Internal::schema(const CreateSchemaResponse* msg) {
  return *msg->_impl_.schema_;
}
void CreateSchemaResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
CreateSchemaResponse::CreateSchemaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.CreateSchemaResponse)
}
CreateSchemaResponse::CreateSchemaResponse(const CreateSchemaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSchemaResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.schema_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  if (from._internal_has_schema()) {
    _this->_impl_.schema_ = new ::dingodb::pb::meta::Schema(*from._impl_.schema_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.CreateSchemaResponse)
}

inline void CreateSchemaResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.schema_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateSchemaResponse::~CreateSchemaResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.CreateSchemaResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateSchemaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
  if (this != internal_default_instance()) delete _impl_.schema_;
}

void CreateSchemaResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSchemaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.CreateSchemaResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.schema_ != nullptr) {
    delete _impl_.schema_;
  }
  _impl_.schema_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSchemaResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.Schema schema = 2 [json_name = "schema"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSchemaResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.CreateSchemaResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.meta.Schema schema = 2 [json_name = "schema"];
  if (this->_internal_has_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::schema(this),
        _Internal::schema(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.CreateSchemaResponse)
  return target;
}

size_t CreateSchemaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.CreateSchemaResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .dingodb.pb.meta.Schema schema = 2 [json_name = "schema"];
  if (this->_internal_has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schema_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSchemaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSchemaResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSchemaResponse::GetClassData() const { return &_class_data_; }


void CreateSchemaResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSchemaResponse*>(&to_msg);
  auto& from = static_cast<const CreateSchemaResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.CreateSchemaResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_has_schema()) {
    _this->_internal_mutable_schema()->::dingodb::pb::meta::Schema::MergeFrom(
        from._internal_schema());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSchemaResponse::CopyFrom(const CreateSchemaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.CreateSchemaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSchemaResponse::IsInitialized() const {
  return true;
}

void CreateSchemaResponse::InternalSwap(CreateSchemaResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateSchemaResponse, _impl_.schema_)
      + sizeof(CreateSchemaResponse::_impl_.schema_)
      - PROTOBUF_FIELD_OFFSET(CreateSchemaResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSchemaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[22]);
}

// ===================================================================

class DropTableRequest::_Internal {
 public:
  static const ::dingodb::pb::meta::DingoCommonId& table_id(const DropTableRequest* msg);
};

const ::dingodb::pb::meta::DingoCommonId&
DropTableRequest::_Internal::table_id(const DropTableRequest* msg) {
  return *msg->_impl_.table_id_;
}
DropTableRequest::DropTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.DropTableRequest)
}
DropTableRequest::DropTableRequest(const DropTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropTableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::dingodb::pb::meta::DingoCommonId(*from._impl_.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.DropTableRequest)
}

inline void DropTableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropTableRequest::~DropTableRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.DropTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void DropTableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.DropTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.table_id_ != nullptr) {
    delete _impl_.table_id_;
  }
  _impl_.table_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.meta.DingoCommonId table_id = 1 [json_name = "tableId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.DropTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId table_id = 1 [json_name = "tableId"];
  if (this->_internal_has_table_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.DropTableRequest)
  return target;
}

size_t DropTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.DropTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.meta.DingoCommonId table_id = 1 [json_name = "tableId"];
  if (this->_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropTableRequest::GetClassData() const { return &_class_data_; }


void DropTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropTableRequest*>(&to_msg);
  auto& from = static_cast<const DropTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.DropTableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_table_id()) {
    _this->_internal_mutable_table_id()->::dingodb::pb::meta::DingoCommonId::MergeFrom(
        from._internal_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropTableRequest::CopyFrom(const DropTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.DropTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropTableRequest::IsInitialized() const {
  return true;
}

void DropTableRequest::InternalSwap(DropTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.table_id_, other->_impl_.table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[23]);
}

// ===================================================================

class DropTableResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const DropTableResponse* msg);
};

const ::dingodb::pb::error::Error&
DropTableResponse::_Internal::error(const DropTableResponse* msg) {
  return *msg->_impl_.error_;
}
void DropTableResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
DropTableResponse::DropTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.meta.DropTableResponse)
}
DropTableResponse::DropTableResponse(const DropTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DropTableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.meta.DropTableResponse)
}

inline void DropTableResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DropTableResponse::~DropTableResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.meta.DropTableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DropTableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void DropTableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DropTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.meta.DropTableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DropTableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DropTableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.meta.DropTableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.meta.DropTableResponse)
  return target;
}

size_t DropTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.meta.DropTableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DropTableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DropTableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DropTableResponse::GetClassData() const { return &_class_data_; }


void DropTableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DropTableResponse*>(&to_msg);
  auto& from = static_cast<const DropTableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.meta.DropTableResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DropTableResponse::CopyFrom(const DropTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.meta.DropTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropTableResponse::IsInitialized() const {
  return true;
}

void DropTableResponse::InternalSwap(DropTableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropTableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_meta_2eproto_getter, &descriptor_table_meta_2eproto_once,
      file_level_metadata_meta_2eproto[24]);
}

// ===================================================================

MetaService::~MetaService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MetaService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_meta_2eproto);
  return file_level_service_descriptors_meta_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MetaService::GetDescriptor() {
  return descriptor();
}

void MetaService::GetSchemas(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::meta::GetSchemasRequest*,
                         ::dingodb::pb::meta::GetSchemasResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSchemas() not implemented.");
  done->Run();
}

void MetaService::GetTables(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::meta::GetTablesRequest*,
                         ::dingodb::pb::meta::GetTablesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTables() not implemented.");
  done->Run();
}

void MetaService::GetTable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::meta::GetTableRequest*,
                         ::dingodb::pb::meta::GetTableResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTable() not implemented.");
  done->Run();
}

void MetaService::CreateTable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::meta::CreateTableRequest*,
                         ::dingodb::pb::meta::CreateTableResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateTable() not implemented.");
  done->Run();
}

void MetaService::DropTable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::meta::DropTableRequest*,
                         ::dingodb::pb::meta::DropTableResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DropTable() not implemented.");
  done->Run();
}

void MetaService::CreateSchema(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::meta::CreateSchemaRequest*,
                         ::dingodb::pb::meta::CreateSchemaResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateSchema() not implemented.");
  done->Run();
}

void MetaService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_meta_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetSchemas(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::meta::GetSchemasRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::meta::GetSchemasResponse*>(
                 response),
             done);
      break;
    case 1:
      GetTables(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::meta::GetTablesRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::meta::GetTablesResponse*>(
                 response),
             done);
      break;
    case 2:
      GetTable(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::meta::GetTableRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::meta::GetTableResponse*>(
                 response),
             done);
      break;
    case 3:
      CreateTable(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::meta::CreateTableRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::meta::CreateTableResponse*>(
                 response),
             done);
      break;
    case 4:
      DropTable(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::meta::DropTableRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::meta::DropTableResponse*>(
                 response),
             done);
      break;
    case 5:
      CreateSchema(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::meta::CreateSchemaRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::meta::CreateSchemaResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MetaService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dingodb::pb::meta::GetSchemasRequest::default_instance();
    case 1:
      return ::dingodb::pb::meta::GetTablesRequest::default_instance();
    case 2:
      return ::dingodb::pb::meta::GetTableRequest::default_instance();
    case 3:
      return ::dingodb::pb::meta::CreateTableRequest::default_instance();
    case 4:
      return ::dingodb::pb::meta::DropTableRequest::default_instance();
    case 5:
      return ::dingodb::pb::meta::CreateSchemaRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MetaService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dingodb::pb::meta::GetSchemasResponse::default_instance();
    case 1:
      return ::dingodb::pb::meta::GetTablesResponse::default_instance();
    case 2:
      return ::dingodb::pb::meta::GetTableResponse::default_instance();
    case 3:
      return ::dingodb::pb::meta::CreateTableResponse::default_instance();
    case 4:
      return ::dingodb::pb::meta::DropTableResponse::default_instance();
    case 5:
      return ::dingodb::pb::meta::CreateSchemaResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MetaService_Stub::MetaService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MetaService_Stub::MetaService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
MetaService_Stub::~MetaService_Stub() {
  if (owns_channel_) delete channel_;
}

void MetaService_Stub::GetSchemas(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::meta::GetSchemasRequest* request,
                              ::dingodb::pb::meta::GetSchemasResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MetaService_Stub::GetTables(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::meta::GetTablesRequest* request,
                              ::dingodb::pb::meta::GetTablesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void MetaService_Stub::GetTable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::meta::GetTableRequest* request,
                              ::dingodb::pb::meta::GetTableResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void MetaService_Stub::CreateTable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::meta::CreateTableRequest* request,
                              ::dingodb::pb::meta::CreateTableResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void MetaService_Stub::DropTable(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::meta::DropTableRequest* request,
                              ::dingodb::pb::meta::DropTableResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void MetaService_Stub::CreateSchema(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::meta::CreateSchemaRequest* request,
                              ::dingodb::pb::meta::CreateSchemaResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace meta
}  // namespace pb
}  // namespace dingodb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::DingoCommonId*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::DingoCommonId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::DingoCommonId >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::ColumnDefinition*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::ColumnDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::ColumnDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::Index*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::Index >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::Index >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::RangePartition*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::RangePartition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::RangePartition >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::HashPartition*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::HashPartition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::HashPartition >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::PartitionRule*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::PartitionRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::PartitionRule >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::Schema*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::Schema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::Schema >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::TableDefinition_IndexesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::TableDefinition_IndexesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::TableDefinition_IndexesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::TableDefinition_PropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::TableDefinition_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::TableDefinition_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::TableDefinition*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::TableDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::TableDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::Part*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::Part >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::Part >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::Table*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::Table >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::GetSchemasRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::GetSchemasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::GetSchemasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::GetSchemasResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::GetSchemasResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::GetSchemasResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::TableDefinitionWithId*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::TableDefinitionWithId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::TableDefinitionWithId >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::GetTablesRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::GetTablesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::GetTablesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::GetTablesResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::GetTablesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::GetTablesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::GetTableRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::GetTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::GetTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::GetTableResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::GetTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::GetTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::CreateTableRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::CreateTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::CreateTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::CreateTableResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::CreateTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::CreateTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::CreateSchemaRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::CreateSchemaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::CreateSchemaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::CreateSchemaResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::CreateSchemaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::CreateSchemaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::DropTableRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::DropTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::DropTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::meta::DropTableResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::meta::DropTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::meta::DropTableResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
