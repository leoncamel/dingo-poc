// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_store_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_store_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "error.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_store_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_store_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_store_2eproto;
namespace dingodb {
namespace pb {
namespace store {
class AddRegionRequest;
struct AddRegionRequestDefaultTypeInternal;
extern AddRegionRequestDefaultTypeInternal _AddRegionRequest_default_instance_;
class AddRegionResponse;
struct AddRegionResponseDefaultTypeInternal;
extern AddRegionResponseDefaultTypeInternal _AddRegionResponse_default_instance_;
class DestroyRegionRequest;
struct DestroyRegionRequestDefaultTypeInternal;
extern DestroyRegionRequestDefaultTypeInternal _DestroyRegionRequest_default_instance_;
class DestroyRegionResponse;
struct DestroyRegionResponseDefaultTypeInternal;
extern DestroyRegionResponseDefaultTypeInternal _DestroyRegionResponse_default_instance_;
class KvBatchGetRequest;
struct KvBatchGetRequestDefaultTypeInternal;
extern KvBatchGetRequestDefaultTypeInternal _KvBatchGetRequest_default_instance_;
class KvBatchGetResponse;
struct KvBatchGetResponseDefaultTypeInternal;
extern KvBatchGetResponseDefaultTypeInternal _KvBatchGetResponse_default_instance_;
class KvBatchPutIfAbsentRequest;
struct KvBatchPutIfAbsentRequestDefaultTypeInternal;
extern KvBatchPutIfAbsentRequestDefaultTypeInternal _KvBatchPutIfAbsentRequest_default_instance_;
class KvBatchPutIfAbsentResponse;
struct KvBatchPutIfAbsentResponseDefaultTypeInternal;
extern KvBatchPutIfAbsentResponseDefaultTypeInternal _KvBatchPutIfAbsentResponse_default_instance_;
class KvBatchPutRequest;
struct KvBatchPutRequestDefaultTypeInternal;
extern KvBatchPutRequestDefaultTypeInternal _KvBatchPutRequest_default_instance_;
class KvBatchPutResponse;
struct KvBatchPutResponseDefaultTypeInternal;
extern KvBatchPutResponseDefaultTypeInternal _KvBatchPutResponse_default_instance_;
class KvGetRequest;
struct KvGetRequestDefaultTypeInternal;
extern KvGetRequestDefaultTypeInternal _KvGetRequest_default_instance_;
class KvGetResponse;
struct KvGetResponseDefaultTypeInternal;
extern KvGetResponseDefaultTypeInternal _KvGetResponse_default_instance_;
class KvPutIfAbsentRequest;
struct KvPutIfAbsentRequestDefaultTypeInternal;
extern KvPutIfAbsentRequestDefaultTypeInternal _KvPutIfAbsentRequest_default_instance_;
class KvPutIfAbsentResponse;
struct KvPutIfAbsentResponseDefaultTypeInternal;
extern KvPutIfAbsentResponseDefaultTypeInternal _KvPutIfAbsentResponse_default_instance_;
class KvPutRequest;
struct KvPutRequestDefaultTypeInternal;
extern KvPutRequestDefaultTypeInternal _KvPutRequest_default_instance_;
class KvPutResponse;
struct KvPutResponseDefaultTypeInternal;
extern KvPutResponseDefaultTypeInternal _KvPutResponse_default_instance_;
}  // namespace store
}  // namespace pb
}  // namespace dingodb
PROTOBUF_NAMESPACE_OPEN
template<> ::dingodb::pb::store::AddRegionRequest* Arena::CreateMaybeMessage<::dingodb::pb::store::AddRegionRequest>(Arena*);
template<> ::dingodb::pb::store::AddRegionResponse* Arena::CreateMaybeMessage<::dingodb::pb::store::AddRegionResponse>(Arena*);
template<> ::dingodb::pb::store::DestroyRegionRequest* Arena::CreateMaybeMessage<::dingodb::pb::store::DestroyRegionRequest>(Arena*);
template<> ::dingodb::pb::store::DestroyRegionResponse* Arena::CreateMaybeMessage<::dingodb::pb::store::DestroyRegionResponse>(Arena*);
template<> ::dingodb::pb::store::KvBatchGetRequest* Arena::CreateMaybeMessage<::dingodb::pb::store::KvBatchGetRequest>(Arena*);
template<> ::dingodb::pb::store::KvBatchGetResponse* Arena::CreateMaybeMessage<::dingodb::pb::store::KvBatchGetResponse>(Arena*);
template<> ::dingodb::pb::store::KvBatchPutIfAbsentRequest* Arena::CreateMaybeMessage<::dingodb::pb::store::KvBatchPutIfAbsentRequest>(Arena*);
template<> ::dingodb::pb::store::KvBatchPutIfAbsentResponse* Arena::CreateMaybeMessage<::dingodb::pb::store::KvBatchPutIfAbsentResponse>(Arena*);
template<> ::dingodb::pb::store::KvBatchPutRequest* Arena::CreateMaybeMessage<::dingodb::pb::store::KvBatchPutRequest>(Arena*);
template<> ::dingodb::pb::store::KvBatchPutResponse* Arena::CreateMaybeMessage<::dingodb::pb::store::KvBatchPutResponse>(Arena*);
template<> ::dingodb::pb::store::KvGetRequest* Arena::CreateMaybeMessage<::dingodb::pb::store::KvGetRequest>(Arena*);
template<> ::dingodb::pb::store::KvGetResponse* Arena::CreateMaybeMessage<::dingodb::pb::store::KvGetResponse>(Arena*);
template<> ::dingodb::pb::store::KvPutIfAbsentRequest* Arena::CreateMaybeMessage<::dingodb::pb::store::KvPutIfAbsentRequest>(Arena*);
template<> ::dingodb::pb::store::KvPutIfAbsentResponse* Arena::CreateMaybeMessage<::dingodb::pb::store::KvPutIfAbsentResponse>(Arena*);
template<> ::dingodb::pb::store::KvPutRequest* Arena::CreateMaybeMessage<::dingodb::pb::store::KvPutRequest>(Arena*);
template<> ::dingodb::pb::store::KvPutResponse* Arena::CreateMaybeMessage<::dingodb::pb::store::KvPutResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dingodb {
namespace pb {
namespace store {

// ===================================================================

class AddRegionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.AddRegionRequest) */ {
 public:
  inline AddRegionRequest() : AddRegionRequest(nullptr) {}
  ~AddRegionRequest() override;
  explicit PROTOBUF_CONSTEXPR AddRegionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRegionRequest(const AddRegionRequest& from);
  AddRegionRequest(AddRegionRequest&& from) noexcept
    : AddRegionRequest() {
    *this = ::std::move(from);
  }

  inline AddRegionRequest& operator=(const AddRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRegionRequest& operator=(AddRegionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRegionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRegionRequest* internal_default_instance() {
    return reinterpret_cast<const AddRegionRequest*>(
               &_AddRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddRegionRequest& a, AddRegionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRegionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRegionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRegionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRegionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRegionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRegionRequest& from) {
    AddRegionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRegionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.AddRegionRequest";
  }
  protected:
  explicit AddRegionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
  };
  // .dingodb.pb.common.Region region = 1 [json_name = "region"];
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::dingodb::pb::common::Region& region() const;
  PROTOBUF_NODISCARD ::dingodb::pb::common::Region* release_region();
  ::dingodb::pb::common::Region* mutable_region();
  void set_allocated_region(::dingodb::pb::common::Region* region);
  private:
  const ::dingodb::pb::common::Region& _internal_region() const;
  ::dingodb::pb::common::Region* _internal_mutable_region();
  public:
  void unsafe_arena_set_allocated_region(
      ::dingodb::pb::common::Region* region);
  ::dingodb::pb::common::Region* unsafe_arena_release_region();

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.AddRegionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dingodb::pb::common::Region* region_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class AddRegionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.AddRegionResponse) */ {
 public:
  inline AddRegionResponse() : AddRegionResponse(nullptr) {}
  ~AddRegionResponse() override;
  explicit PROTOBUF_CONSTEXPR AddRegionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRegionResponse(const AddRegionResponse& from);
  AddRegionResponse(AddRegionResponse&& from) noexcept
    : AddRegionResponse() {
    *this = ::std::move(from);
  }

  inline AddRegionResponse& operator=(const AddRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRegionResponse& operator=(AddRegionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRegionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRegionResponse* internal_default_instance() {
    return reinterpret_cast<const AddRegionResponse*>(
               &_AddRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddRegionResponse& a, AddRegionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRegionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRegionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRegionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRegionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRegionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddRegionResponse& from) {
    AddRegionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRegionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.AddRegionResponse";
  }
  protected:
  explicit AddRegionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::dingodb::pb::error::Error& error() const;
  PROTOBUF_NODISCARD ::dingodb::pb::error::Error* release_error();
  ::dingodb::pb::error::Error* mutable_error();
  void set_allocated_error(::dingodb::pb::error::Error* error);
  private:
  const ::dingodb::pb::error::Error& _internal_error() const;
  ::dingodb::pb::error::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::dingodb::pb::error::Error* error);
  ::dingodb::pb::error::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.AddRegionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dingodb::pb::error::Error* error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class DestroyRegionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.DestroyRegionRequest) */ {
 public:
  inline DestroyRegionRequest() : DestroyRegionRequest(nullptr) {}
  ~DestroyRegionRequest() override;
  explicit PROTOBUF_CONSTEXPR DestroyRegionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestroyRegionRequest(const DestroyRegionRequest& from);
  DestroyRegionRequest(DestroyRegionRequest&& from) noexcept
    : DestroyRegionRequest() {
    *this = ::std::move(from);
  }

  inline DestroyRegionRequest& operator=(const DestroyRegionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyRegionRequest& operator=(DestroyRegionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestroyRegionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyRegionRequest* internal_default_instance() {
    return reinterpret_cast<const DestroyRegionRequest*>(
               &_DestroyRegionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DestroyRegionRequest& a, DestroyRegionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyRegionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyRegionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyRegionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyRegionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DestroyRegionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DestroyRegionRequest& from) {
    DestroyRegionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyRegionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.DestroyRegionRequest";
  }
  protected:
  explicit DestroyRegionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionIdFieldNumber = 1,
  };
  // uint64 region_id = 1 [json_name = "regionId"];
  void clear_region_id();
  uint64_t region_id() const;
  void set_region_id(uint64_t value);
  private:
  uint64_t _internal_region_id() const;
  void _internal_set_region_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.DestroyRegionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t region_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class DestroyRegionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.DestroyRegionResponse) */ {
 public:
  inline DestroyRegionResponse() : DestroyRegionResponse(nullptr) {}
  ~DestroyRegionResponse() override;
  explicit PROTOBUF_CONSTEXPR DestroyRegionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestroyRegionResponse(const DestroyRegionResponse& from);
  DestroyRegionResponse(DestroyRegionResponse&& from) noexcept
    : DestroyRegionResponse() {
    *this = ::std::move(from);
  }

  inline DestroyRegionResponse& operator=(const DestroyRegionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyRegionResponse& operator=(DestroyRegionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestroyRegionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyRegionResponse* internal_default_instance() {
    return reinterpret_cast<const DestroyRegionResponse*>(
               &_DestroyRegionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DestroyRegionResponse& a, DestroyRegionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyRegionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyRegionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyRegionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyRegionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DestroyRegionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DestroyRegionResponse& from) {
    DestroyRegionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyRegionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.DestroyRegionResponse";
  }
  protected:
  explicit DestroyRegionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::dingodb::pb::error::Error& error() const;
  PROTOBUF_NODISCARD ::dingodb::pb::error::Error* release_error();
  ::dingodb::pb::error::Error* mutable_error();
  void set_allocated_error(::dingodb::pb::error::Error* error);
  private:
  const ::dingodb::pb::error::Error& _internal_error() const;
  ::dingodb::pb::error::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::dingodb::pb::error::Error* error);
  ::dingodb::pb::error::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.DestroyRegionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dingodb::pb::error::Error* error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvGetRequest) */ {
 public:
  inline KvGetRequest() : KvGetRequest(nullptr) {}
  ~KvGetRequest() override;
  explicit PROTOBUF_CONSTEXPR KvGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvGetRequest(const KvGetRequest& from);
  KvGetRequest(KvGetRequest&& from) noexcept
    : KvGetRequest() {
    *this = ::std::move(from);
  }

  inline KvGetRequest& operator=(const KvGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvGetRequest& operator=(KvGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvGetRequest* internal_default_instance() {
    return reinterpret_cast<const KvGetRequest*>(
               &_KvGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KvGetRequest& a, KvGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvGetRequest& from) {
    KvGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvGetRequest";
  }
  protected:
  explicit KvGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kRegionIdFieldNumber = 1,
  };
  // bytes key = 2 [json_name = "key"];
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 region_id = 1 [json_name = "regionId"];
  void clear_region_id();
  uint64_t region_id() const;
  void set_region_id(uint64_t value);
  private:
  uint64_t _internal_region_id() const;
  void _internal_set_region_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    uint64_t region_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvGetResponse) */ {
 public:
  inline KvGetResponse() : KvGetResponse(nullptr) {}
  ~KvGetResponse() override;
  explicit PROTOBUF_CONSTEXPR KvGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvGetResponse(const KvGetResponse& from);
  KvGetResponse(KvGetResponse&& from) noexcept
    : KvGetResponse() {
    *this = ::std::move(from);
  }

  inline KvGetResponse& operator=(const KvGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvGetResponse& operator=(KvGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvGetResponse* internal_default_instance() {
    return reinterpret_cast<const KvGetResponse*>(
               &_KvGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KvGetResponse& a, KvGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KvGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvGetResponse& from) {
    KvGetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvGetResponse";
  }
  protected:
  explicit KvGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // bytes value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::dingodb::pb::error::Error& error() const;
  PROTOBUF_NODISCARD ::dingodb::pb::error::Error* release_error();
  ::dingodb::pb::error::Error* mutable_error();
  void set_allocated_error(::dingodb::pb::error::Error* error);
  private:
  const ::dingodb::pb::error::Error& _internal_error() const;
  ::dingodb::pb::error::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::dingodb::pb::error::Error* error);
  ::dingodb::pb::error::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::dingodb::pb::error::Error* error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvBatchGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvBatchGetRequest) */ {
 public:
  inline KvBatchGetRequest() : KvBatchGetRequest(nullptr) {}
  ~KvBatchGetRequest() override;
  explicit PROTOBUF_CONSTEXPR KvBatchGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvBatchGetRequest(const KvBatchGetRequest& from);
  KvBatchGetRequest(KvBatchGetRequest&& from) noexcept
    : KvBatchGetRequest() {
    *this = ::std::move(from);
  }

  inline KvBatchGetRequest& operator=(const KvBatchGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchGetRequest& operator=(KvBatchGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvBatchGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvBatchGetRequest* internal_default_instance() {
    return reinterpret_cast<const KvBatchGetRequest*>(
               &_KvBatchGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KvBatchGetRequest& a, KvBatchGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvBatchGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvBatchGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvBatchGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvBatchGetRequest& from) {
    KvBatchGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvBatchGetRequest";
  }
  protected:
  explicit KvBatchGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kRegionIdFieldNumber = 1,
  };
  // repeated bytes keys = 2 [json_name = "keys"];
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // uint64 region_id = 1 [json_name = "regionId"];
  void clear_region_id();
  uint64_t region_id() const;
  void set_region_id(uint64_t value);
  private:
  uint64_t _internal_region_id() const;
  void _internal_set_region_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvBatchGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
    uint64_t region_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvBatchGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvBatchGetResponse) */ {
 public:
  inline KvBatchGetResponse() : KvBatchGetResponse(nullptr) {}
  ~KvBatchGetResponse() override;
  explicit PROTOBUF_CONSTEXPR KvBatchGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvBatchGetResponse(const KvBatchGetResponse& from);
  KvBatchGetResponse(KvBatchGetResponse&& from) noexcept
    : KvBatchGetResponse() {
    *this = ::std::move(from);
  }

  inline KvBatchGetResponse& operator=(const KvBatchGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchGetResponse& operator=(KvBatchGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvBatchGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvBatchGetResponse* internal_default_instance() {
    return reinterpret_cast<const KvBatchGetResponse*>(
               &_KvBatchGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(KvBatchGetResponse& a, KvBatchGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvBatchGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvBatchGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvBatchGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvBatchGetResponse& from) {
    KvBatchGetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvBatchGetResponse";
  }
  protected:
  explicit KvBatchGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::dingodb::pb::common::KeyValue* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >*
      mutable_kvs();
  private:
  const ::dingodb::pb::common::KeyValue& _internal_kvs(int index) const;
  ::dingodb::pb::common::KeyValue* _internal_add_kvs();
  public:
  const ::dingodb::pb::common::KeyValue& kvs(int index) const;
  ::dingodb::pb::common::KeyValue* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >&
      kvs() const;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::dingodb::pb::error::Error& error() const;
  PROTOBUF_NODISCARD ::dingodb::pb::error::Error* release_error();
  ::dingodb::pb::error::Error* mutable_error();
  void set_allocated_error(::dingodb::pb::error::Error* error);
  private:
  const ::dingodb::pb::error::Error& _internal_error() const;
  ::dingodb::pb::error::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::dingodb::pb::error::Error* error);
  ::dingodb::pb::error::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvBatchGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue > kvs_;
    ::dingodb::pb::error::Error* error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvPutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvPutRequest) */ {
 public:
  inline KvPutRequest() : KvPutRequest(nullptr) {}
  ~KvPutRequest() override;
  explicit PROTOBUF_CONSTEXPR KvPutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvPutRequest(const KvPutRequest& from);
  KvPutRequest(KvPutRequest&& from) noexcept
    : KvPutRequest() {
    *this = ::std::move(from);
  }

  inline KvPutRequest& operator=(const KvPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvPutRequest& operator=(KvPutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvPutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvPutRequest* internal_default_instance() {
    return reinterpret_cast<const KvPutRequest*>(
               &_KvPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KvPutRequest& a, KvPutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvPutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvPutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvPutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvPutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvPutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvPutRequest& from) {
    KvPutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvPutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvPutRequest";
  }
  protected:
  explicit KvPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvFieldNumber = 2,
    kRegionIdFieldNumber = 1,
  };
  // .dingodb.pb.common.KeyValue kv = 2 [json_name = "kv"];
  bool has_kv() const;
  private:
  bool _internal_has_kv() const;
  public:
  void clear_kv();
  const ::dingodb::pb::common::KeyValue& kv() const;
  PROTOBUF_NODISCARD ::dingodb::pb::common::KeyValue* release_kv();
  ::dingodb::pb::common::KeyValue* mutable_kv();
  void set_allocated_kv(::dingodb::pb::common::KeyValue* kv);
  private:
  const ::dingodb::pb::common::KeyValue& _internal_kv() const;
  ::dingodb::pb::common::KeyValue* _internal_mutable_kv();
  public:
  void unsafe_arena_set_allocated_kv(
      ::dingodb::pb::common::KeyValue* kv);
  ::dingodb::pb::common::KeyValue* unsafe_arena_release_kv();

  // uint64 region_id = 1 [json_name = "regionId"];
  void clear_region_id();
  uint64_t region_id() const;
  void set_region_id(uint64_t value);
  private:
  uint64_t _internal_region_id() const;
  void _internal_set_region_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvPutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dingodb::pb::common::KeyValue* kv_;
    uint64_t region_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvPutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvPutResponse) */ {
 public:
  inline KvPutResponse() : KvPutResponse(nullptr) {}
  ~KvPutResponse() override;
  explicit PROTOBUF_CONSTEXPR KvPutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvPutResponse(const KvPutResponse& from);
  KvPutResponse(KvPutResponse&& from) noexcept
    : KvPutResponse() {
    *this = ::std::move(from);
  }

  inline KvPutResponse& operator=(const KvPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvPutResponse& operator=(KvPutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvPutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvPutResponse* internal_default_instance() {
    return reinterpret_cast<const KvPutResponse*>(
               &_KvPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KvPutResponse& a, KvPutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KvPutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvPutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvPutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvPutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvPutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvPutResponse& from) {
    KvPutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvPutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvPutResponse";
  }
  protected:
  explicit KvPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::dingodb::pb::error::Error& error() const;
  PROTOBUF_NODISCARD ::dingodb::pb::error::Error* release_error();
  ::dingodb::pb::error::Error* mutable_error();
  void set_allocated_error(::dingodb::pb::error::Error* error);
  private:
  const ::dingodb::pb::error::Error& _internal_error() const;
  ::dingodb::pb::error::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::dingodb::pb::error::Error* error);
  ::dingodb::pb::error::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvPutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dingodb::pb::error::Error* error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvBatchPutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvBatchPutRequest) */ {
 public:
  inline KvBatchPutRequest() : KvBatchPutRequest(nullptr) {}
  ~KvBatchPutRequest() override;
  explicit PROTOBUF_CONSTEXPR KvBatchPutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvBatchPutRequest(const KvBatchPutRequest& from);
  KvBatchPutRequest(KvBatchPutRequest&& from) noexcept
    : KvBatchPutRequest() {
    *this = ::std::move(from);
  }

  inline KvBatchPutRequest& operator=(const KvBatchPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchPutRequest& operator=(KvBatchPutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvBatchPutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvBatchPutRequest* internal_default_instance() {
    return reinterpret_cast<const KvBatchPutRequest*>(
               &_KvBatchPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(KvBatchPutRequest& a, KvBatchPutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchPutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchPutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvBatchPutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvBatchPutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvBatchPutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvBatchPutRequest& from) {
    KvBatchPutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchPutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvBatchPutRequest";
  }
  protected:
  explicit KvBatchPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 2,
    kRegionIdFieldNumber = 1,
  };
  // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::dingodb::pb::common::KeyValue* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >*
      mutable_kvs();
  private:
  const ::dingodb::pb::common::KeyValue& _internal_kvs(int index) const;
  ::dingodb::pb::common::KeyValue* _internal_add_kvs();
  public:
  const ::dingodb::pb::common::KeyValue& kvs(int index) const;
  ::dingodb::pb::common::KeyValue* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >&
      kvs() const;

  // uint64 region_id = 1 [json_name = "regionId"];
  void clear_region_id();
  uint64_t region_id() const;
  void set_region_id(uint64_t value);
  private:
  uint64_t _internal_region_id() const;
  void _internal_set_region_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvBatchPutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue > kvs_;
    uint64_t region_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvBatchPutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvBatchPutResponse) */ {
 public:
  inline KvBatchPutResponse() : KvBatchPutResponse(nullptr) {}
  ~KvBatchPutResponse() override;
  explicit PROTOBUF_CONSTEXPR KvBatchPutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvBatchPutResponse(const KvBatchPutResponse& from);
  KvBatchPutResponse(KvBatchPutResponse&& from) noexcept
    : KvBatchPutResponse() {
    *this = ::std::move(from);
  }

  inline KvBatchPutResponse& operator=(const KvBatchPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchPutResponse& operator=(KvBatchPutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvBatchPutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvBatchPutResponse* internal_default_instance() {
    return reinterpret_cast<const KvBatchPutResponse*>(
               &_KvBatchPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(KvBatchPutResponse& a, KvBatchPutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchPutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchPutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvBatchPutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvBatchPutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvBatchPutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvBatchPutResponse& from) {
    KvBatchPutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchPutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvBatchPutResponse";
  }
  protected:
  explicit KvBatchPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::dingodb::pb::error::Error& error() const;
  PROTOBUF_NODISCARD ::dingodb::pb::error::Error* release_error();
  ::dingodb::pb::error::Error* mutable_error();
  void set_allocated_error(::dingodb::pb::error::Error* error);
  private:
  const ::dingodb::pb::error::Error& _internal_error() const;
  ::dingodb::pb::error::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::dingodb::pb::error::Error* error);
  ::dingodb::pb::error::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvBatchPutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dingodb::pb::error::Error* error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvPutIfAbsentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvPutIfAbsentRequest) */ {
 public:
  inline KvPutIfAbsentRequest() : KvPutIfAbsentRequest(nullptr) {}
  ~KvPutIfAbsentRequest() override;
  explicit PROTOBUF_CONSTEXPR KvPutIfAbsentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvPutIfAbsentRequest(const KvPutIfAbsentRequest& from);
  KvPutIfAbsentRequest(KvPutIfAbsentRequest&& from) noexcept
    : KvPutIfAbsentRequest() {
    *this = ::std::move(from);
  }

  inline KvPutIfAbsentRequest& operator=(const KvPutIfAbsentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvPutIfAbsentRequest& operator=(KvPutIfAbsentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvPutIfAbsentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvPutIfAbsentRequest* internal_default_instance() {
    return reinterpret_cast<const KvPutIfAbsentRequest*>(
               &_KvPutIfAbsentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(KvPutIfAbsentRequest& a, KvPutIfAbsentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvPutIfAbsentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvPutIfAbsentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvPutIfAbsentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvPutIfAbsentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvPutIfAbsentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvPutIfAbsentRequest& from) {
    KvPutIfAbsentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvPutIfAbsentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvPutIfAbsentRequest";
  }
  protected:
  explicit KvPutIfAbsentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvFieldNumber = 2,
    kRegionIdFieldNumber = 1,
  };
  // .dingodb.pb.common.KeyValue kv = 2 [json_name = "kv"];
  bool has_kv() const;
  private:
  bool _internal_has_kv() const;
  public:
  void clear_kv();
  const ::dingodb::pb::common::KeyValue& kv() const;
  PROTOBUF_NODISCARD ::dingodb::pb::common::KeyValue* release_kv();
  ::dingodb::pb::common::KeyValue* mutable_kv();
  void set_allocated_kv(::dingodb::pb::common::KeyValue* kv);
  private:
  const ::dingodb::pb::common::KeyValue& _internal_kv() const;
  ::dingodb::pb::common::KeyValue* _internal_mutable_kv();
  public:
  void unsafe_arena_set_allocated_kv(
      ::dingodb::pb::common::KeyValue* kv);
  ::dingodb::pb::common::KeyValue* unsafe_arena_release_kv();

  // uint64 region_id = 1 [json_name = "regionId"];
  void clear_region_id();
  uint64_t region_id() const;
  void set_region_id(uint64_t value);
  private:
  uint64_t _internal_region_id() const;
  void _internal_set_region_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvPutIfAbsentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dingodb::pb::common::KeyValue* kv_;
    uint64_t region_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvPutIfAbsentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvPutIfAbsentResponse) */ {
 public:
  inline KvPutIfAbsentResponse() : KvPutIfAbsentResponse(nullptr) {}
  ~KvPutIfAbsentResponse() override;
  explicit PROTOBUF_CONSTEXPR KvPutIfAbsentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvPutIfAbsentResponse(const KvPutIfAbsentResponse& from);
  KvPutIfAbsentResponse(KvPutIfAbsentResponse&& from) noexcept
    : KvPutIfAbsentResponse() {
    *this = ::std::move(from);
  }

  inline KvPutIfAbsentResponse& operator=(const KvPutIfAbsentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvPutIfAbsentResponse& operator=(KvPutIfAbsentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvPutIfAbsentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvPutIfAbsentResponse* internal_default_instance() {
    return reinterpret_cast<const KvPutIfAbsentResponse*>(
               &_KvPutIfAbsentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(KvPutIfAbsentResponse& a, KvPutIfAbsentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KvPutIfAbsentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvPutIfAbsentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvPutIfAbsentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvPutIfAbsentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvPutIfAbsentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvPutIfAbsentResponse& from) {
    KvPutIfAbsentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvPutIfAbsentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvPutIfAbsentResponse";
  }
  protected:
  explicit KvPutIfAbsentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kIsPutFieldNumber = 2,
  };
  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::dingodb::pb::error::Error& error() const;
  PROTOBUF_NODISCARD ::dingodb::pb::error::Error* release_error();
  ::dingodb::pb::error::Error* mutable_error();
  void set_allocated_error(::dingodb::pb::error::Error* error);
  private:
  const ::dingodb::pb::error::Error& _internal_error() const;
  ::dingodb::pb::error::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::dingodb::pb::error::Error* error);
  ::dingodb::pb::error::Error* unsafe_arena_release_error();

  // bool is_put = 2 [json_name = "isPut"];
  void clear_is_put();
  bool is_put() const;
  void set_is_put(bool value);
  private:
  bool _internal_is_put() const;
  void _internal_set_is_put(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvPutIfAbsentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dingodb::pb::error::Error* error_;
    bool is_put_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvBatchPutIfAbsentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvBatchPutIfAbsentRequest) */ {
 public:
  inline KvBatchPutIfAbsentRequest() : KvBatchPutIfAbsentRequest(nullptr) {}
  ~KvBatchPutIfAbsentRequest() override;
  explicit PROTOBUF_CONSTEXPR KvBatchPutIfAbsentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvBatchPutIfAbsentRequest(const KvBatchPutIfAbsentRequest& from);
  KvBatchPutIfAbsentRequest(KvBatchPutIfAbsentRequest&& from) noexcept
    : KvBatchPutIfAbsentRequest() {
    *this = ::std::move(from);
  }

  inline KvBatchPutIfAbsentRequest& operator=(const KvBatchPutIfAbsentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchPutIfAbsentRequest& operator=(KvBatchPutIfAbsentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvBatchPutIfAbsentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvBatchPutIfAbsentRequest* internal_default_instance() {
    return reinterpret_cast<const KvBatchPutIfAbsentRequest*>(
               &_KvBatchPutIfAbsentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(KvBatchPutIfAbsentRequest& a, KvBatchPutIfAbsentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchPutIfAbsentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchPutIfAbsentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvBatchPutIfAbsentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvBatchPutIfAbsentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvBatchPutIfAbsentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvBatchPutIfAbsentRequest& from) {
    KvBatchPutIfAbsentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchPutIfAbsentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvBatchPutIfAbsentRequest";
  }
  protected:
  explicit KvBatchPutIfAbsentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 2,
    kRegionIdFieldNumber = 1,
  };
  // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::dingodb::pb::common::KeyValue* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >*
      mutable_kvs();
  private:
  const ::dingodb::pb::common::KeyValue& _internal_kvs(int index) const;
  ::dingodb::pb::common::KeyValue* _internal_add_kvs();
  public:
  const ::dingodb::pb::common::KeyValue& kvs(int index) const;
  ::dingodb::pb::common::KeyValue* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >&
      kvs() const;

  // uint64 region_id = 1 [json_name = "regionId"];
  void clear_region_id();
  uint64_t region_id() const;
  void set_region_id(uint64_t value);
  private:
  uint64_t _internal_region_id() const;
  void _internal_set_region_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvBatchPutIfAbsentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue > kvs_;
    uint64_t region_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class KvBatchPutIfAbsentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.store.KvBatchPutIfAbsentResponse) */ {
 public:
  inline KvBatchPutIfAbsentResponse() : KvBatchPutIfAbsentResponse(nullptr) {}
  ~KvBatchPutIfAbsentResponse() override;
  explicit PROTOBUF_CONSTEXPR KvBatchPutIfAbsentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvBatchPutIfAbsentResponse(const KvBatchPutIfAbsentResponse& from);
  KvBatchPutIfAbsentResponse(KvBatchPutIfAbsentResponse&& from) noexcept
    : KvBatchPutIfAbsentResponse() {
    *this = ::std::move(from);
  }

  inline KvBatchPutIfAbsentResponse& operator=(const KvBatchPutIfAbsentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvBatchPutIfAbsentResponse& operator=(KvBatchPutIfAbsentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvBatchPutIfAbsentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvBatchPutIfAbsentResponse* internal_default_instance() {
    return reinterpret_cast<const KvBatchPutIfAbsentResponse*>(
               &_KvBatchPutIfAbsentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(KvBatchPutIfAbsentResponse& a, KvBatchPutIfAbsentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KvBatchPutIfAbsentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvBatchPutIfAbsentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvBatchPutIfAbsentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvBatchPutIfAbsentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvBatchPutIfAbsentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KvBatchPutIfAbsentResponse& from) {
    KvBatchPutIfAbsentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvBatchPutIfAbsentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.store.KvBatchPutIfAbsentResponse";
  }
  protected:
  explicit KvBatchPutIfAbsentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPutKeysFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated bytes put_keys = 2 [json_name = "putKeys"];
  int put_keys_size() const;
  private:
  int _internal_put_keys_size() const;
  public:
  void clear_put_keys();
  const std::string& put_keys(int index) const;
  std::string* mutable_put_keys(int index);
  void set_put_keys(int index, const std::string& value);
  void set_put_keys(int index, std::string&& value);
  void set_put_keys(int index, const char* value);
  void set_put_keys(int index, const void* value, size_t size);
  std::string* add_put_keys();
  void add_put_keys(const std::string& value);
  void add_put_keys(std::string&& value);
  void add_put_keys(const char* value);
  void add_put_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& put_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_put_keys();
  private:
  const std::string& _internal_put_keys(int index) const;
  std::string* _internal_add_put_keys();
  public:

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::dingodb::pb::error::Error& error() const;
  PROTOBUF_NODISCARD ::dingodb::pb::error::Error* release_error();
  ::dingodb::pb::error::Error* mutable_error();
  void set_allocated_error(::dingodb::pb::error::Error* error);
  private:
  const ::dingodb::pb::error::Error& _internal_error() const;
  ::dingodb::pb::error::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::dingodb::pb::error::Error* error);
  ::dingodb::pb::error::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:dingodb.pb.store.KvBatchPutIfAbsentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> put_keys_;
    ::dingodb::pb::error::Error* error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_store_2eproto;
};
// ===================================================================

class StoreService_Stub;

class StoreService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline StoreService() {};
 public:
  virtual ~StoreService();

  typedef StoreService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AddRegion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::AddRegionRequest* request,
                       ::dingodb::pb::store::AddRegionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DestroyRegion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::DestroyRegionRequest* request,
                       ::dingodb::pb::store::DestroyRegionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void KvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvGetRequest* request,
                       ::dingodb::pb::store::KvGetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void KvBatchGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvBatchGetRequest* request,
                       ::dingodb::pb::store::KvBatchGetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void KvPut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvPutRequest* request,
                       ::dingodb::pb::store::KvPutResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void KvBatchPut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvBatchPutRequest* request,
                       ::dingodb::pb::store::KvBatchPutResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void KvPutIfAbsent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvPutIfAbsentRequest* request,
                       ::dingodb::pb::store::KvPutIfAbsentResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void KvBatchPutIfAbsent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvBatchPutIfAbsentRequest* request,
                       ::dingodb::pb::store::KvBatchPutIfAbsentResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StoreService);
};

class StoreService_Stub : public StoreService {
 public:
  StoreService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  StoreService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~StoreService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements StoreService ------------------------------------------

  void AddRegion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::AddRegionRequest* request,
                       ::dingodb::pb::store::AddRegionResponse* response,
                       ::google::protobuf::Closure* done);
  void DestroyRegion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::DestroyRegionRequest* request,
                       ::dingodb::pb::store::DestroyRegionResponse* response,
                       ::google::protobuf::Closure* done);
  void KvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvGetRequest* request,
                       ::dingodb::pb::store::KvGetResponse* response,
                       ::google::protobuf::Closure* done);
  void KvBatchGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvBatchGetRequest* request,
                       ::dingodb::pb::store::KvBatchGetResponse* response,
                       ::google::protobuf::Closure* done);
  void KvPut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvPutRequest* request,
                       ::dingodb::pb::store::KvPutResponse* response,
                       ::google::protobuf::Closure* done);
  void KvBatchPut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvBatchPutRequest* request,
                       ::dingodb::pb::store::KvBatchPutResponse* response,
                       ::google::protobuf::Closure* done);
  void KvPutIfAbsent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvPutIfAbsentRequest* request,
                       ::dingodb::pb::store::KvPutIfAbsentResponse* response,
                       ::google::protobuf::Closure* done);
  void KvBatchPutIfAbsent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::dingodb::pb::store::KvBatchPutIfAbsentRequest* request,
                       ::dingodb::pb::store::KvBatchPutIfAbsentResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StoreService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddRegionRequest

// .dingodb.pb.common.Region region = 1 [json_name = "region"];
inline bool AddRegionRequest::_internal_has_region() const {
  return this != internal_default_instance() && _impl_.region_ != nullptr;
}
inline bool AddRegionRequest::has_region() const {
  return _internal_has_region();
}
inline const ::dingodb::pb::common::Region& AddRegionRequest::_internal_region() const {
  const ::dingodb::pb::common::Region* p = _impl_.region_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::common::Region&>(
      ::dingodb::pb::common::_Region_default_instance_);
}
inline const ::dingodb::pb::common::Region& AddRegionRequest::region() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.AddRegionRequest.region)
  return _internal_region();
}
inline void AddRegionRequest::unsafe_arena_set_allocated_region(
    ::dingodb::pb::common::Region* region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_);
  }
  _impl_.region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.AddRegionRequest.region)
}
inline ::dingodb::pb::common::Region* AddRegionRequest::release_region() {
  
  ::dingodb::pb::common::Region* temp = _impl_.region_;
  _impl_.region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::common::Region* AddRegionRequest::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.AddRegionRequest.region)
  
  ::dingodb::pb::common::Region* temp = _impl_.region_;
  _impl_.region_ = nullptr;
  return temp;
}
inline ::dingodb::pb::common::Region* AddRegionRequest::_internal_mutable_region() {
  
  if (_impl_.region_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::common::Region>(GetArenaForAllocation());
    _impl_.region_ = p;
  }
  return _impl_.region_;
}
inline ::dingodb::pb::common::Region* AddRegionRequest::mutable_region() {
  ::dingodb::pb::common::Region* _msg = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.AddRegionRequest.region)
  return _msg;
}
inline void AddRegionRequest::set_allocated_region(::dingodb::pb::common::Region* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region));
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.region_ = region;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.AddRegionRequest.region)
}

// -------------------------------------------------------------------

// AddRegionResponse

// .dingodb.pb.error.Error error = 1 [json_name = "error"];
inline bool AddRegionResponse::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool AddRegionResponse::has_error() const {
  return _internal_has_error();
}
inline const ::dingodb::pb::error::Error& AddRegionResponse::_internal_error() const {
  const ::dingodb::pb::error::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::error::Error&>(
      ::dingodb::pb::error::_Error_default_instance_);
}
inline const ::dingodb::pb::error::Error& AddRegionResponse::error() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.AddRegionResponse.error)
  return _internal_error();
}
inline void AddRegionResponse::unsafe_arena_set_allocated_error(
    ::dingodb::pb::error::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.AddRegionResponse.error)
}
inline ::dingodb::pb::error::Error* AddRegionResponse::release_error() {
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::error::Error* AddRegionResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.AddRegionResponse.error)
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::dingodb::pb::error::Error* AddRegionResponse::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::error::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::dingodb::pb::error::Error* AddRegionResponse::mutable_error() {
  ::dingodb::pb::error::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.AddRegionResponse.error)
  return _msg;
}
inline void AddRegionResponse::set_allocated_error(::dingodb::pb::error::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.AddRegionResponse.error)
}

// -------------------------------------------------------------------

// DestroyRegionRequest

// uint64 region_id = 1 [json_name = "regionId"];
inline void DestroyRegionRequest::clear_region_id() {
  _impl_.region_id_ = uint64_t{0u};
}
inline uint64_t DestroyRegionRequest::_internal_region_id() const {
  return _impl_.region_id_;
}
inline uint64_t DestroyRegionRequest::region_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.DestroyRegionRequest.region_id)
  return _internal_region_id();
}
inline void DestroyRegionRequest::_internal_set_region_id(uint64_t value) {
  
  _impl_.region_id_ = value;
}
inline void DestroyRegionRequest::set_region_id(uint64_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.store.DestroyRegionRequest.region_id)
}

// -------------------------------------------------------------------

// DestroyRegionResponse

// .dingodb.pb.error.Error error = 1 [json_name = "error"];
inline bool DestroyRegionResponse::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool DestroyRegionResponse::has_error() const {
  return _internal_has_error();
}
inline const ::dingodb::pb::error::Error& DestroyRegionResponse::_internal_error() const {
  const ::dingodb::pb::error::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::error::Error&>(
      ::dingodb::pb::error::_Error_default_instance_);
}
inline const ::dingodb::pb::error::Error& DestroyRegionResponse::error() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.DestroyRegionResponse.error)
  return _internal_error();
}
inline void DestroyRegionResponse::unsafe_arena_set_allocated_error(
    ::dingodb::pb::error::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.DestroyRegionResponse.error)
}
inline ::dingodb::pb::error::Error* DestroyRegionResponse::release_error() {
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::error::Error* DestroyRegionResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.DestroyRegionResponse.error)
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::dingodb::pb::error::Error* DestroyRegionResponse::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::error::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::dingodb::pb::error::Error* DestroyRegionResponse::mutable_error() {
  ::dingodb::pb::error::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.DestroyRegionResponse.error)
  return _msg;
}
inline void DestroyRegionResponse::set_allocated_error(::dingodb::pb::error::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.DestroyRegionResponse.error)
}

// -------------------------------------------------------------------

// KvGetRequest

// uint64 region_id = 1 [json_name = "regionId"];
inline void KvGetRequest::clear_region_id() {
  _impl_.region_id_ = uint64_t{0u};
}
inline uint64_t KvGetRequest::_internal_region_id() const {
  return _impl_.region_id_;
}
inline uint64_t KvGetRequest::region_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvGetRequest.region_id)
  return _internal_region_id();
}
inline void KvGetRequest::_internal_set_region_id(uint64_t value) {
  
  _impl_.region_id_ = value;
}
inline void KvGetRequest::set_region_id(uint64_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvGetRequest.region_id)
}

// bytes key = 2 [json_name = "key"];
inline void KvGetRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KvGetRequest::key() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvGetRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvGetRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvGetRequest.key)
}
inline std::string* KvGetRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvGetRequest.key)
  return _s;
}
inline const std::string& KvGetRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void KvGetRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* KvGetRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* KvGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.KvGetRequest.key)
  return _impl_.key_.Release();
}
inline void KvGetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.KvGetRequest.key)
}

// -------------------------------------------------------------------

// KvGetResponse

// .dingodb.pb.error.Error error = 1 [json_name = "error"];
inline bool KvGetResponse::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool KvGetResponse::has_error() const {
  return _internal_has_error();
}
inline const ::dingodb::pb::error::Error& KvGetResponse::_internal_error() const {
  const ::dingodb::pb::error::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::error::Error&>(
      ::dingodb::pb::error::_Error_default_instance_);
}
inline const ::dingodb::pb::error::Error& KvGetResponse::error() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvGetResponse.error)
  return _internal_error();
}
inline void KvGetResponse::unsafe_arena_set_allocated_error(
    ::dingodb::pb::error::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.KvGetResponse.error)
}
inline ::dingodb::pb::error::Error* KvGetResponse::release_error() {
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::error::Error* KvGetResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.KvGetResponse.error)
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::dingodb::pb::error::Error* KvGetResponse::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::error::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::dingodb::pb::error::Error* KvGetResponse::mutable_error() {
  ::dingodb::pb::error::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvGetResponse.error)
  return _msg;
}
inline void KvGetResponse::set_allocated_error(::dingodb::pb::error::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.KvGetResponse.error)
}

// bytes value = 2 [json_name = "value"];
inline void KvGetResponse::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& KvGetResponse::value() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvGetResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvGetResponse::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvGetResponse.value)
}
inline std::string* KvGetResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvGetResponse.value)
  return _s;
}
inline const std::string& KvGetResponse::_internal_value() const {
  return _impl_.value_.Get();
}
inline void KvGetResponse::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* KvGetResponse::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* KvGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.KvGetResponse.value)
  return _impl_.value_.Release();
}
inline void KvGetResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.KvGetResponse.value)
}

// -------------------------------------------------------------------

// KvBatchGetRequest

// uint64 region_id = 1 [json_name = "regionId"];
inline void KvBatchGetRequest::clear_region_id() {
  _impl_.region_id_ = uint64_t{0u};
}
inline uint64_t KvBatchGetRequest::_internal_region_id() const {
  return _impl_.region_id_;
}
inline uint64_t KvBatchGetRequest::region_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchGetRequest.region_id)
  return _internal_region_id();
}
inline void KvBatchGetRequest::_internal_set_region_id(uint64_t value) {
  
  _impl_.region_id_ = value;
}
inline void KvBatchGetRequest::set_region_id(uint64_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvBatchGetRequest.region_id)
}

// repeated bytes keys = 2 [json_name = "keys"];
inline int KvBatchGetRequest::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int KvBatchGetRequest::keys_size() const {
  return _internal_keys_size();
}
inline void KvBatchGetRequest::clear_keys() {
  _impl_.keys_.Clear();
}
inline std::string* KvBatchGetRequest::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:dingodb.pb.store.KvBatchGetRequest.keys)
  return _s;
}
inline const std::string& KvBatchGetRequest::_internal_keys(int index) const {
  return _impl_.keys_.Get(index);
}
inline const std::string& KvBatchGetRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchGetRequest.keys)
  return _internal_keys(index);
}
inline std::string* KvBatchGetRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvBatchGetRequest.keys)
  return _impl_.keys_.Mutable(index);
}
inline void KvBatchGetRequest::set_keys(int index, const std::string& value) {
  _impl_.keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvBatchGetRequest.keys)
}
inline void KvBatchGetRequest::set_keys(int index, std::string&& value) {
  _impl_.keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvBatchGetRequest.keys)
}
inline void KvBatchGetRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dingodb.pb.store.KvBatchGetRequest.keys)
}
inline void KvBatchGetRequest::set_keys(int index, const void* value, size_t size) {
  _impl_.keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dingodb.pb.store.KvBatchGetRequest.keys)
}
inline std::string* KvBatchGetRequest::_internal_add_keys() {
  return _impl_.keys_.Add();
}
inline void KvBatchGetRequest::add_keys(const std::string& value) {
  _impl_.keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dingodb.pb.store.KvBatchGetRequest.keys)
}
inline void KvBatchGetRequest::add_keys(std::string&& value) {
  _impl_.keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dingodb.pb.store.KvBatchGetRequest.keys)
}
inline void KvBatchGetRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dingodb.pb.store.KvBatchGetRequest.keys)
}
inline void KvBatchGetRequest::add_keys(const void* value, size_t size) {
  _impl_.keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dingodb.pb.store.KvBatchGetRequest.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
KvBatchGetRequest::keys() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.store.KvBatchGetRequest.keys)
  return _impl_.keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
KvBatchGetRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.store.KvBatchGetRequest.keys)
  return &_impl_.keys_;
}

// -------------------------------------------------------------------

// KvBatchGetResponse

// .dingodb.pb.error.Error error = 1 [json_name = "error"];
inline bool KvBatchGetResponse::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool KvBatchGetResponse::has_error() const {
  return _internal_has_error();
}
inline const ::dingodb::pb::error::Error& KvBatchGetResponse::_internal_error() const {
  const ::dingodb::pb::error::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::error::Error&>(
      ::dingodb::pb::error::_Error_default_instance_);
}
inline const ::dingodb::pb::error::Error& KvBatchGetResponse::error() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchGetResponse.error)
  return _internal_error();
}
inline void KvBatchGetResponse::unsafe_arena_set_allocated_error(
    ::dingodb::pb::error::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.KvBatchGetResponse.error)
}
inline ::dingodb::pb::error::Error* KvBatchGetResponse::release_error() {
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::error::Error* KvBatchGetResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.KvBatchGetResponse.error)
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::dingodb::pb::error::Error* KvBatchGetResponse::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::error::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::dingodb::pb::error::Error* KvBatchGetResponse::mutable_error() {
  ::dingodb::pb::error::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvBatchGetResponse.error)
  return _msg;
}
inline void KvBatchGetResponse::set_allocated_error(::dingodb::pb::error::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.KvBatchGetResponse.error)
}

// repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
inline int KvBatchGetResponse::_internal_kvs_size() const {
  return _impl_.kvs_.size();
}
inline int KvBatchGetResponse::kvs_size() const {
  return _internal_kvs_size();
}
inline ::dingodb::pb::common::KeyValue* KvBatchGetResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvBatchGetResponse.kvs)
  return _impl_.kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >*
KvBatchGetResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.store.KvBatchGetResponse.kvs)
  return &_impl_.kvs_;
}
inline const ::dingodb::pb::common::KeyValue& KvBatchGetResponse::_internal_kvs(int index) const {
  return _impl_.kvs_.Get(index);
}
inline const ::dingodb::pb::common::KeyValue& KvBatchGetResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchGetResponse.kvs)
  return _internal_kvs(index);
}
inline ::dingodb::pb::common::KeyValue* KvBatchGetResponse::_internal_add_kvs() {
  return _impl_.kvs_.Add();
}
inline ::dingodb::pb::common::KeyValue* KvBatchGetResponse::add_kvs() {
  ::dingodb::pb::common::KeyValue* _add = _internal_add_kvs();
  // @@protoc_insertion_point(field_add:dingodb.pb.store.KvBatchGetResponse.kvs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >&
KvBatchGetResponse::kvs() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.store.KvBatchGetResponse.kvs)
  return _impl_.kvs_;
}

// -------------------------------------------------------------------

// KvPutRequest

// uint64 region_id = 1 [json_name = "regionId"];
inline void KvPutRequest::clear_region_id() {
  _impl_.region_id_ = uint64_t{0u};
}
inline uint64_t KvPutRequest::_internal_region_id() const {
  return _impl_.region_id_;
}
inline uint64_t KvPutRequest::region_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvPutRequest.region_id)
  return _internal_region_id();
}
inline void KvPutRequest::_internal_set_region_id(uint64_t value) {
  
  _impl_.region_id_ = value;
}
inline void KvPutRequest::set_region_id(uint64_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvPutRequest.region_id)
}

// .dingodb.pb.common.KeyValue kv = 2 [json_name = "kv"];
inline bool KvPutRequest::_internal_has_kv() const {
  return this != internal_default_instance() && _impl_.kv_ != nullptr;
}
inline bool KvPutRequest::has_kv() const {
  return _internal_has_kv();
}
inline const ::dingodb::pb::common::KeyValue& KvPutRequest::_internal_kv() const {
  const ::dingodb::pb::common::KeyValue* p = _impl_.kv_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::common::KeyValue&>(
      ::dingodb::pb::common::_KeyValue_default_instance_);
}
inline const ::dingodb::pb::common::KeyValue& KvPutRequest::kv() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvPutRequest.kv)
  return _internal_kv();
}
inline void KvPutRequest::unsafe_arena_set_allocated_kv(
    ::dingodb::pb::common::KeyValue* kv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_);
  }
  _impl_.kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.KvPutRequest.kv)
}
inline ::dingodb::pb::common::KeyValue* KvPutRequest::release_kv() {
  
  ::dingodb::pb::common::KeyValue* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::common::KeyValue* KvPutRequest::unsafe_arena_release_kv() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.KvPutRequest.kv)
  
  ::dingodb::pb::common::KeyValue* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
  return temp;
}
inline ::dingodb::pb::common::KeyValue* KvPutRequest::_internal_mutable_kv() {
  
  if (_impl_.kv_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::common::KeyValue>(GetArenaForAllocation());
    _impl_.kv_ = p;
  }
  return _impl_.kv_;
}
inline ::dingodb::pb::common::KeyValue* KvPutRequest::mutable_kv() {
  ::dingodb::pb::common::KeyValue* _msg = _internal_mutable_kv();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvPutRequest.kv)
  return _msg;
}
inline void KvPutRequest::set_allocated_kv(::dingodb::pb::common::KeyValue* kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_);
  }
  if (kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kv));
    if (message_arena != submessage_arena) {
      kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kv_ = kv;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.KvPutRequest.kv)
}

// -------------------------------------------------------------------

// KvPutResponse

// .dingodb.pb.error.Error error = 1 [json_name = "error"];
inline bool KvPutResponse::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool KvPutResponse::has_error() const {
  return _internal_has_error();
}
inline const ::dingodb::pb::error::Error& KvPutResponse::_internal_error() const {
  const ::dingodb::pb::error::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::error::Error&>(
      ::dingodb::pb::error::_Error_default_instance_);
}
inline const ::dingodb::pb::error::Error& KvPutResponse::error() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvPutResponse.error)
  return _internal_error();
}
inline void KvPutResponse::unsafe_arena_set_allocated_error(
    ::dingodb::pb::error::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.KvPutResponse.error)
}
inline ::dingodb::pb::error::Error* KvPutResponse::release_error() {
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::error::Error* KvPutResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.KvPutResponse.error)
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::dingodb::pb::error::Error* KvPutResponse::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::error::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::dingodb::pb::error::Error* KvPutResponse::mutable_error() {
  ::dingodb::pb::error::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvPutResponse.error)
  return _msg;
}
inline void KvPutResponse::set_allocated_error(::dingodb::pb::error::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.KvPutResponse.error)
}

// -------------------------------------------------------------------

// KvBatchPutRequest

// uint64 region_id = 1 [json_name = "regionId"];
inline void KvBatchPutRequest::clear_region_id() {
  _impl_.region_id_ = uint64_t{0u};
}
inline uint64_t KvBatchPutRequest::_internal_region_id() const {
  return _impl_.region_id_;
}
inline uint64_t KvBatchPutRequest::region_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchPutRequest.region_id)
  return _internal_region_id();
}
inline void KvBatchPutRequest::_internal_set_region_id(uint64_t value) {
  
  _impl_.region_id_ = value;
}
inline void KvBatchPutRequest::set_region_id(uint64_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvBatchPutRequest.region_id)
}

// repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
inline int KvBatchPutRequest::_internal_kvs_size() const {
  return _impl_.kvs_.size();
}
inline int KvBatchPutRequest::kvs_size() const {
  return _internal_kvs_size();
}
inline ::dingodb::pb::common::KeyValue* KvBatchPutRequest::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvBatchPutRequest.kvs)
  return _impl_.kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >*
KvBatchPutRequest::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.store.KvBatchPutRequest.kvs)
  return &_impl_.kvs_;
}
inline const ::dingodb::pb::common::KeyValue& KvBatchPutRequest::_internal_kvs(int index) const {
  return _impl_.kvs_.Get(index);
}
inline const ::dingodb::pb::common::KeyValue& KvBatchPutRequest::kvs(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchPutRequest.kvs)
  return _internal_kvs(index);
}
inline ::dingodb::pb::common::KeyValue* KvBatchPutRequest::_internal_add_kvs() {
  return _impl_.kvs_.Add();
}
inline ::dingodb::pb::common::KeyValue* KvBatchPutRequest::add_kvs() {
  ::dingodb::pb::common::KeyValue* _add = _internal_add_kvs();
  // @@protoc_insertion_point(field_add:dingodb.pb.store.KvBatchPutRequest.kvs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >&
KvBatchPutRequest::kvs() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.store.KvBatchPutRequest.kvs)
  return _impl_.kvs_;
}

// -------------------------------------------------------------------

// KvBatchPutResponse

// .dingodb.pb.error.Error error = 1 [json_name = "error"];
inline bool KvBatchPutResponse::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool KvBatchPutResponse::has_error() const {
  return _internal_has_error();
}
inline const ::dingodb::pb::error::Error& KvBatchPutResponse::_internal_error() const {
  const ::dingodb::pb::error::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::error::Error&>(
      ::dingodb::pb::error::_Error_default_instance_);
}
inline const ::dingodb::pb::error::Error& KvBatchPutResponse::error() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchPutResponse.error)
  return _internal_error();
}
inline void KvBatchPutResponse::unsafe_arena_set_allocated_error(
    ::dingodb::pb::error::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.KvBatchPutResponse.error)
}
inline ::dingodb::pb::error::Error* KvBatchPutResponse::release_error() {
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::error::Error* KvBatchPutResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.KvBatchPutResponse.error)
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::dingodb::pb::error::Error* KvBatchPutResponse::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::error::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::dingodb::pb::error::Error* KvBatchPutResponse::mutable_error() {
  ::dingodb::pb::error::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvBatchPutResponse.error)
  return _msg;
}
inline void KvBatchPutResponse::set_allocated_error(::dingodb::pb::error::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.KvBatchPutResponse.error)
}

// -------------------------------------------------------------------

// KvPutIfAbsentRequest

// uint64 region_id = 1 [json_name = "regionId"];
inline void KvPutIfAbsentRequest::clear_region_id() {
  _impl_.region_id_ = uint64_t{0u};
}
inline uint64_t KvPutIfAbsentRequest::_internal_region_id() const {
  return _impl_.region_id_;
}
inline uint64_t KvPutIfAbsentRequest::region_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvPutIfAbsentRequest.region_id)
  return _internal_region_id();
}
inline void KvPutIfAbsentRequest::_internal_set_region_id(uint64_t value) {
  
  _impl_.region_id_ = value;
}
inline void KvPutIfAbsentRequest::set_region_id(uint64_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvPutIfAbsentRequest.region_id)
}

// .dingodb.pb.common.KeyValue kv = 2 [json_name = "kv"];
inline bool KvPutIfAbsentRequest::_internal_has_kv() const {
  return this != internal_default_instance() && _impl_.kv_ != nullptr;
}
inline bool KvPutIfAbsentRequest::has_kv() const {
  return _internal_has_kv();
}
inline const ::dingodb::pb::common::KeyValue& KvPutIfAbsentRequest::_internal_kv() const {
  const ::dingodb::pb::common::KeyValue* p = _impl_.kv_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::common::KeyValue&>(
      ::dingodb::pb::common::_KeyValue_default_instance_);
}
inline const ::dingodb::pb::common::KeyValue& KvPutIfAbsentRequest::kv() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvPutIfAbsentRequest.kv)
  return _internal_kv();
}
inline void KvPutIfAbsentRequest::unsafe_arena_set_allocated_kv(
    ::dingodb::pb::common::KeyValue* kv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_);
  }
  _impl_.kv_ = kv;
  if (kv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.KvPutIfAbsentRequest.kv)
}
inline ::dingodb::pb::common::KeyValue* KvPutIfAbsentRequest::release_kv() {
  
  ::dingodb::pb::common::KeyValue* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::common::KeyValue* KvPutIfAbsentRequest::unsafe_arena_release_kv() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.KvPutIfAbsentRequest.kv)
  
  ::dingodb::pb::common::KeyValue* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
  return temp;
}
inline ::dingodb::pb::common::KeyValue* KvPutIfAbsentRequest::_internal_mutable_kv() {
  
  if (_impl_.kv_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::common::KeyValue>(GetArenaForAllocation());
    _impl_.kv_ = p;
  }
  return _impl_.kv_;
}
inline ::dingodb::pb::common::KeyValue* KvPutIfAbsentRequest::mutable_kv() {
  ::dingodb::pb::common::KeyValue* _msg = _internal_mutable_kv();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvPutIfAbsentRequest.kv)
  return _msg;
}
inline void KvPutIfAbsentRequest::set_allocated_kv(::dingodb::pb::common::KeyValue* kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_);
  }
  if (kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kv));
    if (message_arena != submessage_arena) {
      kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kv_ = kv;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.KvPutIfAbsentRequest.kv)
}

// -------------------------------------------------------------------

// KvPutIfAbsentResponse

// .dingodb.pb.error.Error error = 1 [json_name = "error"];
inline bool KvPutIfAbsentResponse::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool KvPutIfAbsentResponse::has_error() const {
  return _internal_has_error();
}
inline const ::dingodb::pb::error::Error& KvPutIfAbsentResponse::_internal_error() const {
  const ::dingodb::pb::error::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::error::Error&>(
      ::dingodb::pb::error::_Error_default_instance_);
}
inline const ::dingodb::pb::error::Error& KvPutIfAbsentResponse::error() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvPutIfAbsentResponse.error)
  return _internal_error();
}
inline void KvPutIfAbsentResponse::unsafe_arena_set_allocated_error(
    ::dingodb::pb::error::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.KvPutIfAbsentResponse.error)
}
inline ::dingodb::pb::error::Error* KvPutIfAbsentResponse::release_error() {
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::error::Error* KvPutIfAbsentResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.KvPutIfAbsentResponse.error)
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::dingodb::pb::error::Error* KvPutIfAbsentResponse::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::error::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::dingodb::pb::error::Error* KvPutIfAbsentResponse::mutable_error() {
  ::dingodb::pb::error::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvPutIfAbsentResponse.error)
  return _msg;
}
inline void KvPutIfAbsentResponse::set_allocated_error(::dingodb::pb::error::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.KvPutIfAbsentResponse.error)
}

// bool is_put = 2 [json_name = "isPut"];
inline void KvPutIfAbsentResponse::clear_is_put() {
  _impl_.is_put_ = false;
}
inline bool KvPutIfAbsentResponse::_internal_is_put() const {
  return _impl_.is_put_;
}
inline bool KvPutIfAbsentResponse::is_put() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvPutIfAbsentResponse.is_put)
  return _internal_is_put();
}
inline void KvPutIfAbsentResponse::_internal_set_is_put(bool value) {
  
  _impl_.is_put_ = value;
}
inline void KvPutIfAbsentResponse::set_is_put(bool value) {
  _internal_set_is_put(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvPutIfAbsentResponse.is_put)
}

// -------------------------------------------------------------------

// KvBatchPutIfAbsentRequest

// uint64 region_id = 1 [json_name = "regionId"];
inline void KvBatchPutIfAbsentRequest::clear_region_id() {
  _impl_.region_id_ = uint64_t{0u};
}
inline uint64_t KvBatchPutIfAbsentRequest::_internal_region_id() const {
  return _impl_.region_id_;
}
inline uint64_t KvBatchPutIfAbsentRequest::region_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchPutIfAbsentRequest.region_id)
  return _internal_region_id();
}
inline void KvBatchPutIfAbsentRequest::_internal_set_region_id(uint64_t value) {
  
  _impl_.region_id_ = value;
}
inline void KvBatchPutIfAbsentRequest::set_region_id(uint64_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvBatchPutIfAbsentRequest.region_id)
}

// repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
inline int KvBatchPutIfAbsentRequest::_internal_kvs_size() const {
  return _impl_.kvs_.size();
}
inline int KvBatchPutIfAbsentRequest::kvs_size() const {
  return _internal_kvs_size();
}
inline ::dingodb::pb::common::KeyValue* KvBatchPutIfAbsentRequest::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvBatchPutIfAbsentRequest.kvs)
  return _impl_.kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >*
KvBatchPutIfAbsentRequest::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.store.KvBatchPutIfAbsentRequest.kvs)
  return &_impl_.kvs_;
}
inline const ::dingodb::pb::common::KeyValue& KvBatchPutIfAbsentRequest::_internal_kvs(int index) const {
  return _impl_.kvs_.Get(index);
}
inline const ::dingodb::pb::common::KeyValue& KvBatchPutIfAbsentRequest::kvs(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchPutIfAbsentRequest.kvs)
  return _internal_kvs(index);
}
inline ::dingodb::pb::common::KeyValue* KvBatchPutIfAbsentRequest::_internal_add_kvs() {
  return _impl_.kvs_.Add();
}
inline ::dingodb::pb::common::KeyValue* KvBatchPutIfAbsentRequest::add_kvs() {
  ::dingodb::pb::common::KeyValue* _add = _internal_add_kvs();
  // @@protoc_insertion_point(field_add:dingodb.pb.store.KvBatchPutIfAbsentRequest.kvs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::KeyValue >&
KvBatchPutIfAbsentRequest::kvs() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.store.KvBatchPutIfAbsentRequest.kvs)
  return _impl_.kvs_;
}

// -------------------------------------------------------------------

// KvBatchPutIfAbsentResponse

// .dingodb.pb.error.Error error = 1 [json_name = "error"];
inline bool KvBatchPutIfAbsentResponse::_internal_has_error() const {
  return this != internal_default_instance() && _impl_.error_ != nullptr;
}
inline bool KvBatchPutIfAbsentResponse::has_error() const {
  return _internal_has_error();
}
inline const ::dingodb::pb::error::Error& KvBatchPutIfAbsentResponse::_internal_error() const {
  const ::dingodb::pb::error::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::error::Error&>(
      ::dingodb::pb::error::_Error_default_instance_);
}
inline const ::dingodb::pb::error::Error& KvBatchPutIfAbsentResponse::error() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchPutIfAbsentResponse.error)
  return _internal_error();
}
inline void KvBatchPutIfAbsentResponse::unsafe_arena_set_allocated_error(
    ::dingodb::pb::error::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.store.KvBatchPutIfAbsentResponse.error)
}
inline ::dingodb::pb::error::Error* KvBatchPutIfAbsentResponse::release_error() {
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::error::Error* KvBatchPutIfAbsentResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:dingodb.pb.store.KvBatchPutIfAbsentResponse.error)
  
  ::dingodb::pb::error::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::dingodb::pb::error::Error* KvBatchPutIfAbsentResponse::_internal_mutable_error() {
  
  if (_impl_.error_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::error::Error>(GetArenaForAllocation());
    _impl_.error_ = p;
  }
  return _impl_.error_;
}
inline ::dingodb::pb::error::Error* KvBatchPutIfAbsentResponse::mutable_error() {
  ::dingodb::pb::error::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvBatchPutIfAbsentResponse.error)
  return _msg;
}
inline void KvBatchPutIfAbsentResponse::set_allocated_error(::dingodb::pb::error::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_ = error;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.store.KvBatchPutIfAbsentResponse.error)
}

// repeated bytes put_keys = 2 [json_name = "putKeys"];
inline int KvBatchPutIfAbsentResponse::_internal_put_keys_size() const {
  return _impl_.put_keys_.size();
}
inline int KvBatchPutIfAbsentResponse::put_keys_size() const {
  return _internal_put_keys_size();
}
inline void KvBatchPutIfAbsentResponse::clear_put_keys() {
  _impl_.put_keys_.Clear();
}
inline std::string* KvBatchPutIfAbsentResponse::add_put_keys() {
  std::string* _s = _internal_add_put_keys();
  // @@protoc_insertion_point(field_add_mutable:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
  return _s;
}
inline const std::string& KvBatchPutIfAbsentResponse::_internal_put_keys(int index) const {
  return _impl_.put_keys_.Get(index);
}
inline const std::string& KvBatchPutIfAbsentResponse::put_keys(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
  return _internal_put_keys(index);
}
inline std::string* KvBatchPutIfAbsentResponse::mutable_put_keys(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
  return _impl_.put_keys_.Mutable(index);
}
inline void KvBatchPutIfAbsentResponse::set_put_keys(int index, const std::string& value) {
  _impl_.put_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
}
inline void KvBatchPutIfAbsentResponse::set_put_keys(int index, std::string&& value) {
  _impl_.put_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
}
inline void KvBatchPutIfAbsentResponse::set_put_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.put_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
}
inline void KvBatchPutIfAbsentResponse::set_put_keys(int index, const void* value, size_t size) {
  _impl_.put_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
}
inline std::string* KvBatchPutIfAbsentResponse::_internal_add_put_keys() {
  return _impl_.put_keys_.Add();
}
inline void KvBatchPutIfAbsentResponse::add_put_keys(const std::string& value) {
  _impl_.put_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
}
inline void KvBatchPutIfAbsentResponse::add_put_keys(std::string&& value) {
  _impl_.put_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
}
inline void KvBatchPutIfAbsentResponse::add_put_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.put_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
}
inline void KvBatchPutIfAbsentResponse::add_put_keys(const void* value, size_t size) {
  _impl_.put_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
KvBatchPutIfAbsentResponse::put_keys() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
  return _impl_.put_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
KvBatchPutIfAbsentResponse::mutable_put_keys() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.store.KvBatchPutIfAbsentResponse.put_keys)
  return &_impl_.put_keys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace store
}  // namespace pb
}  // namespace dingodb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_store_2eproto
