// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dingodb {
namespace pb {
namespace common {
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR Range::Range(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeDefaultTypeInternal() {}
  union {
    Range _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeDefaultTypeInternal _Range_default_instance_;
PROTOBUF_CONSTEXPR KeyValue::KeyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyValueDefaultTypeInternal() {}
  union {
    KeyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyValueDefaultTypeInternal _KeyValue_default_instance_;
PROTOBUF_CONSTEXPR Coordinator::Coordinator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinatorDefaultTypeInternal() {}
  union {
    Coordinator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinatorDefaultTypeInternal _Coordinator_default_instance_;
PROTOBUF_CONSTEXPR CoordinatorMap::CoordinatorMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.coordinators_)*/{}
  , /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinatorMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinatorMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinatorMapDefaultTypeInternal() {}
  union {
    CoordinatorMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinatorMapDefaultTypeInternal _CoordinatorMap_default_instance_;
PROTOBUF_CONSTEXPR Store::Store(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_location_)*/nullptr
  , /*decltype(_impl_.raft_location_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreDefaultTypeInternal() {}
  union {
    Store _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreDefaultTypeInternal _Store_default_instance_;
PROTOBUF_CONSTEXPR StoreMap::StoreMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stores_)*/{}
  , /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreMapDefaultTypeInternal() {}
  union {
    StoreMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreMapDefaultTypeInternal _StoreMap_default_instance_;
PROTOBUF_CONSTEXPR Peer::Peer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_location_)*/nullptr
  , /*decltype(_impl_.raft_location_)*/nullptr
  , /*decltype(_impl_.store_id_)*/uint64_t{0u}
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerDefaultTypeInternal() {}
  union {
    Peer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerDefaultTypeInternal _Peer_default_instance_;
PROTOBUF_CONSTEXPR Region::Region(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peers_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_.leader_store_id_)*/int64_t{0}
  , /*decltype(_impl_.schema_id_)*/uint64_t{0u}
  , /*decltype(_impl_.table_id_)*/uint64_t{0u}
  , /*decltype(_impl_.create_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionDefaultTypeInternal() {}
  union {
    Region _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionDefaultTypeInternal _Region_default_instance_;
PROTOBUF_CONSTEXPR RegionMap::RegionMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.regions_)*/{}
  , /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegionMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionMapDefaultTypeInternal() {}
  union {
    RegionMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionMapDefaultTypeInternal _RegionMap_default_instance_;
}  // namespace common
}  // namespace pb
}  // namespace dingodb
static ::_pb::Metadata file_level_metadata_common_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Location, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Location, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Range, _impl_.start_key_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Range, _impl_.end_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::KeyValue, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::KeyValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Coordinator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Coordinator, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Coordinator, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Coordinator, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Coordinator, _impl_.resource_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::CoordinatorMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::CoordinatorMap, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::CoordinatorMap, _impl_.coordinators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Store, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Store, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Store, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Store, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Store, _impl_.server_location_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Store, _impl_.raft_location_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Store, _impl_.resource_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::StoreMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::StoreMap, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::StoreMap, _impl_.stores_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Peer, _impl_.store_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Peer, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Peer, _impl_.server_location_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Peer, _impl_.raft_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _impl_.leader_store_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _impl_.peers_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _impl_.schema_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::Region, _impl_.create_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::RegionMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::RegionMap, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::common::RegionMap, _impl_.regions_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dingodb::pb::common::Location)},
  { 8, -1, -1, sizeof(::dingodb::pb::common::Range)},
  { 16, -1, -1, sizeof(::dingodb::pb::common::KeyValue)},
  { 24, -1, -1, sizeof(::dingodb::pb::common::Coordinator)},
  { 34, -1, -1, sizeof(::dingodb::pb::common::CoordinatorMap)},
  { 42, -1, -1, sizeof(::dingodb::pb::common::Store)},
  { 54, -1, -1, sizeof(::dingodb::pb::common::StoreMap)},
  { 62, -1, -1, sizeof(::dingodb::pb::common::Peer)},
  { 72, -1, -1, sizeof(::dingodb::pb::common::Region)},
  { 88, -1, -1, sizeof(::dingodb::pb::common::RegionMap)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dingodb::pb::common::_Location_default_instance_._instance,
  &::dingodb::pb::common::_Range_default_instance_._instance,
  &::dingodb::pb::common::_KeyValue_default_instance_._instance,
  &::dingodb::pb::common::_Coordinator_default_instance_._instance,
  &::dingodb::pb::common::_CoordinatorMap_default_instance_._instance,
  &::dingodb::pb::common::_Store_default_instance_._instance,
  &::dingodb::pb::common::_StoreMap_default_instance_._instance,
  &::dingodb::pb::common::_Peer_default_instance_._instance,
  &::dingodb::pb::common::_Region_default_instance_._instance,
  &::dingodb::pb::common::_RegionMap_default_instance_._instance,
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\021dingodb.pb.common\"2\n\010Loc"
  "ation\022\022\n\004host\030\001 \001(\tR\004host\022\022\n\004port\030\002 \001(\005R"
  "\004port\"=\n\005Range\022\033\n\tstart_key\030\001 \001(\014R\010start"
  "Key\022\027\n\007end_key\030\002 \001(\014R\006endKey\"2\n\010KeyValue"
  "\022\020\n\003key\030\001 \001(\014R\003key\022\024\n\005value\030\002 \001(\014R\005value"
  "\"\264\001\n\013Coordinator\022\016\n\002id\030\001 \001(\004R\002id\0229\n\005stat"
  "e\030\002 \001(\0162#.dingodb.pb.common.CoordinatorS"
  "tateR\005state\0227\n\010location\030\003 \001(\0132\033.dingodb."
  "pb.common.LocationR\010location\022!\n\014resource"
  "_tag\030\004 \001(\tR\013resourceTag\"j\n\016CoordinatorMa"
  "p\022\024\n\005epoch\030\001 \001(\004R\005epoch\022B\n\014coordinators\030"
  "\002 \003(\0132\036.dingodb.pb.common.CoordinatorR\014c"
  "oordinators\"\215\002\n\005Store\022\016\n\002id\030\001 \001(\004R\002id\022\024\n"
  "\005epoch\030\002 \001(\004R\005epoch\0223\n\005state\030\003 \001(\0162\035.din"
  "godb.pb.common.StoreStateR\005state\022D\n\017serv"
  "er_location\030\004 \001(\0132\033.dingodb.pb.common.Lo"
  "cationR\016serverLocation\022@\n\rraft_location\030"
  "\005 \001(\0132\033.dingodb.pb.common.LocationR\014raft"
  "Location\022!\n\014resource_tag\030\006 \001(\tR\013resource"
  "Tag\"R\n\010StoreMap\022\024\n\005epoch\030\001 \001(\004R\005epoch\0220\n"
  "\006stores\030\002 \003(\0132\030.dingodb.pb.common.StoreR"
  "\006stores\"\332\001\n\004Peer\022\031\n\010store_id\030\001 \001(\004R\007stor"
  "eId\022/\n\004role\030\002 \001(\0162\033.dingodb.pb.common.Pe"
  "erRoleR\004role\022D\n\017server_location\030\003 \001(\0132\033."
  "dingodb.pb.common.LocationR\016serverLocati"
  "on\022@\n\rraft_location\030\004 \001(\0132\033.dingodb.pb.c"
  "ommon.LocationR\014raftLocation\"\342\002\n\006Region\022"
  "\016\n\002id\030\001 \001(\004R\002id\022\024\n\005epoch\030\002 \001(\004R\005epoch\022\022\n"
  "\004name\030\003 \001(\tR\004name\0224\n\005state\030\004 \001(\0162\036.dingo"
  "db.pb.common.RegionStateR\005state\022&\n\017leade"
  "r_store_id\030\005 \001(\003R\rleaderStoreId\022-\n\005peers"
  "\030\006 \003(\0132\027.dingodb.pb.common.PeerR\005peers\022."
  "\n\005range\030\007 \001(\0132\030.dingodb.pb.common.RangeR"
  "\005range\022\033\n\tschema_id\030\010 \001(\004R\010schemaId\022\031\n\010t"
  "able_id\030\t \001(\004R\007tableId\022)\n\020create_timesta"
  "mp\030\n \001(\004R\017createTimestamp\"V\n\tRegionMap\022\024"
  "\n\005epoch\030\001 \001(\004R\005epoch\0223\n\007regions\030\002 \003(\0132\031."
  "dingodb.pb.common.RegionR\007regions*[\n\006Eng"
  "ine\022\017\n\013ENG_ROCKSDB\020\000\022\016\n\nENG_MEMORY\020\001\022\013\n\007"
  "ENG_XDP\020\002\022\021\n\rENG_RAFTSTORE\020\003\022\020\n\014ENG_COLU"
  "MNAR\020\004*C\n\020CoordinatorState\022\026\n\022COORDINATO"
  "R_NORMAL\020\000\022\027\n\023COORDINATOR_OFFLINE\020\001*O\n\nS"
  "toreState\022\020\n\014STORE_NORMAL\020\000\022\r\n\tSTORE_NEW"
  "\020\001\022\021\n\rSTORE_OFFLINE\020\002\022\r\n\tSTORE_OUT\020\003*\217\002\n"
  "\013RegionState\022\021\n\rREGION_NORMAL\020\000\022\016\n\nREGIO"
  "N_NEW\020\001\022\023\n\017REGION_DEGRADED\020\002\022\021\n\rREGION_D"
  "ANGER\020\003\022\021\n\rREGION_EXPAND\020\004\022\024\n\020REGION_EXP"
  "ANDING\020\005\022\023\n\017REGION_EXPANDED\020\006\022\021\n\rREGION_"
  "SHRINK\020\007\022\025\n\021REGION_SHIRINKING\020\010\022\021\n\rREGIO"
  "N_SHRANK\020\t\022\021\n\rREGION_DELETE\020\n\022\023\n\017REGION_"
  "DELETING\020\013\022\022\n\016REGION_DELETED\020\014*\"\n\010PeerRo"
  "le\022\t\n\005VOTER\020\000\022\013\n\007LEARNER\020\001B\215\001\n\025com.dingo"
  "db.pb.commonB\013CommonProtoP\001\200\001\001\242\002\003DPC\252\002\021D"
  "ingodb.Pb.Common\312\002\021Dingodb\\Pb\\Common\342\002\035D"
  "ingodb\\Pb\\Common\\GPBMetadata\352\002\023Dingodb::"
  "Pb::Commonb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false, false, 2218, descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace dingodb {
namespace pb {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CoordinatorState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool CoordinatorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoreState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool StoreState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
bool RegionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerRole_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[4];
}
bool PeerRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.common.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.common.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:dingodb.pb.common.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.common.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1 [json_name = "host"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.common.Location.host"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 2 [json_name = "port"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.common.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1 [json_name = "host"];
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.common.Location.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // int32 port = 2 [json_name = "port"];
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.common.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.common.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1 [json_name = "host"];
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // int32 port = 2 [json_name = "port"];
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.common.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.common.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class Range::_Internal {
 public:
};

Range::Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.common.Range)
}
Range::Range(const Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Range* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_key_){}
    , decltype(_impl_.end_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.start_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_key().empty()) {
    _this->_impl_.start_key_.Set(from._internal_start_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_key().empty()) {
    _this->_impl_.end_key_.Set(from._internal_end_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.common.Range)
}

inline void Range::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_key_){}
    , decltype(_impl_.end_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.start_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:dingodb.pb.common.Range)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Range::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_key_.Destroy();
  _impl_.end_key_.Destroy();
}

void Range::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.common.Range)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.start_key_.ClearToEmpty();
  _impl_.end_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Range::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes start_key = 1 [json_name = "startKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_start_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes end_key = 2 [json_name = "endKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_end_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Range::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.common.Range)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start_key = 1 [json_name = "startKey"];
  if (!this->_internal_start_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_start_key(), target);
  }

  // bytes end_key = 2 [json_name = "endKey"];
  if (!this->_internal_end_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_end_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.common.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.common.Range)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_key = 1 [json_name = "startKey"];
  if (!this->_internal_start_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_key());
  }

  // bytes end_key = 2 [json_name = "endKey"];
  if (!this->_internal_end_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_end_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Range::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Range::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Range::GetClassData() const { return &_class_data_; }


void Range::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Range*>(&to_msg);
  auto& from = static_cast<const Range&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.common.Range)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_start_key().empty()) {
    _this->_internal_set_start_key(from._internal_start_key());
  }
  if (!from._internal_end_key().empty()) {
    _this->_internal_set_end_key(from._internal_end_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.common.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::InternalSwap(Range* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_key_, lhs_arena,
      &other->_impl_.start_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_key_, lhs_arena,
      &other->_impl_.end_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Range::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class KeyValue::_Internal {
 public:
};

KeyValue::KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.common.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.common.KeyValue)
}

inline void KeyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:dingodb.pb.common.KeyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void KeyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.common.KeyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.common.KeyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.common.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.common.KeyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyValue::GetClassData() const { return &_class_data_; }


void KeyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyValue*>(&to_msg);
  auto& from = static_cast<const KeyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.common.KeyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.common.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class Coordinator::_Internal {
 public:
  static const ::dingodb::pb::common::Location& location(const Coordinator* msg);
};

const ::dingodb::pb::common::Location&
Coordinator::_Internal::location(const Coordinator* msg) {
  return *msg->_impl_.location_;
}
Coordinator::Coordinator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.common.Coordinator)
}
Coordinator::Coordinator(const Coordinator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coordinator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_tag_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_tag().empty()) {
    _this->_impl_.resource_tag_.Set(from._internal_resource_tag(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::dingodb::pb::common::Location(*from._impl_.location_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.common.Coordinator)
}

inline void Coordinator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_tag_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Coordinator::~Coordinator() {
  // @@protoc_insertion_point(destructor:dingodb.pb.common.Coordinator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coordinator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void Coordinator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coordinator::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.common.Coordinator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_tag_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.CoordinatorState state = 2 [json_name = "state"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::dingodb::pb::common::CoordinatorState>(val));
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Location location = 3 [json_name = "location"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resource_tag = 4 [json_name = "resourceTag"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_resource_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.common.Coordinator.resource_tag"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coordinator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.common.Coordinator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .dingodb.pb.common.CoordinatorState state = 2 [json_name = "state"];
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .dingodb.pb.common.Location location = 3 [json_name = "location"];
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // string resource_tag = 4 [json_name = "resourceTag"];
  if (!this->_internal_resource_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_tag().data(), static_cast<int>(this->_internal_resource_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.common.Coordinator.resource_tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_resource_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.common.Coordinator)
  return target;
}

size_t Coordinator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.common.Coordinator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_tag = 4 [json_name = "resourceTag"];
  if (!this->_internal_resource_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_tag());
  }

  // .dingodb.pb.common.Location location = 3 [json_name = "location"];
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // .dingodb.pb.common.CoordinatorState state = 2 [json_name = "state"];
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coordinator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coordinator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coordinator::GetClassData() const { return &_class_data_; }


void Coordinator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coordinator*>(&to_msg);
  auto& from = static_cast<const Coordinator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.common.Coordinator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_tag().empty()) {
    _this->_internal_set_resource_tag(from._internal_resource_tag());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::dingodb::pb::common::Location::MergeFrom(
        from._internal_location());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coordinator::CopyFrom(const Coordinator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.common.Coordinator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinator::IsInitialized() const {
  return true;
}

void Coordinator::InternalSwap(Coordinator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_tag_, lhs_arena,
      &other->_impl_.resource_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinator, _impl_.state_)
      + sizeof(Coordinator::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Coordinator, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class CoordinatorMap::_Internal {
 public:
};

CoordinatorMap::CoordinatorMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.common.CoordinatorMap)
}
CoordinatorMap::CoordinatorMap(const CoordinatorMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinatorMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.coordinators_){from._impl_.coordinators_}
    , decltype(_impl_.epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.epoch_ = from._impl_.epoch_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.common.CoordinatorMap)
}

inline void CoordinatorMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.coordinators_){arena}
    , decltype(_impl_.epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CoordinatorMap::~CoordinatorMap() {
  // @@protoc_insertion_point(destructor:dingodb.pb.common.CoordinatorMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinatorMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coordinators_.~RepeatedPtrField();
}

void CoordinatorMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinatorMap::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.common.CoordinatorMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coordinators_.Clear();
  _impl_.epoch_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinatorMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 epoch = 1 [json_name = "epoch"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.common.Coordinator coordinators = 2 [json_name = "coordinators"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coordinators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinatorMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.common.CoordinatorMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 1 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epoch(), target);
  }

  // repeated .dingodb.pb.common.Coordinator coordinators = 2 [json_name = "coordinators"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coordinators_size()); i < n; i++) {
    const auto& repfield = this->_internal_coordinators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.common.CoordinatorMap)
  return target;
}

size_t CoordinatorMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.common.CoordinatorMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.Coordinator coordinators = 2 [json_name = "coordinators"];
  total_size += 1UL * this->_internal_coordinators_size();
  for (const auto& msg : this->_impl_.coordinators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 epoch = 1 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinatorMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinatorMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinatorMap::GetClassData() const { return &_class_data_; }


void CoordinatorMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinatorMap*>(&to_msg);
  auto& from = static_cast<const CoordinatorMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.common.CoordinatorMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coordinators_.MergeFrom(from._impl_.coordinators_);
  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinatorMap::CopyFrom(const CoordinatorMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.common.CoordinatorMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinatorMap::IsInitialized() const {
  return true;
}

void CoordinatorMap::InternalSwap(CoordinatorMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.coordinators_.InternalSwap(&other->_impl_.coordinators_);
  swap(_impl_.epoch_, other->_impl_.epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinatorMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class Store::_Internal {
 public:
  static const ::dingodb::pb::common::Location& server_location(const Store* msg);
  static const ::dingodb::pb::common::Location& raft_location(const Store* msg);
};

const ::dingodb::pb::common::Location&
Store::_Internal::server_location(const Store* msg) {
  return *msg->_impl_.server_location_;
}
const ::dingodb::pb::common::Location&
Store::_Internal::raft_location(const Store* msg) {
  return *msg->_impl_.raft_location_;
}
Store::Store(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.common.Store)
}
Store::Store(const Store& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Store* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_tag_){}
    , decltype(_impl_.server_location_){nullptr}
    , decltype(_impl_.raft_location_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.epoch_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.resource_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_tag().empty()) {
    _this->_impl_.resource_tag_.Set(from._internal_resource_tag(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_server_location()) {
    _this->_impl_.server_location_ = new ::dingodb::pb::common::Location(*from._impl_.server_location_);
  }
  if (from._internal_has_raft_location()) {
    _this->_impl_.raft_location_ = new ::dingodb::pb::common::Location(*from._impl_.raft_location_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.common.Store)
}

inline void Store::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_tag_){}
    , decltype(_impl_.server_location_){nullptr}
    , decltype(_impl_.raft_location_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.epoch_){uint64_t{0u}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.resource_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resource_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Store::~Store() {
  // @@protoc_insertion_point(destructor:dingodb.pb.common.Store)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Store::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.server_location_;
  if (this != internal_default_instance()) delete _impl_.raft_location_;
}

void Store::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Store::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.common.Store)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_tag_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.server_location_ != nullptr) {
    delete _impl_.server_location_;
  }
  _impl_.server_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.raft_location_ != nullptr) {
    delete _impl_.raft_location_;
  }
  _impl_.raft_location_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Store::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch = 2 [json_name = "epoch"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.StoreState state = 3 [json_name = "state"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::dingodb::pb::common::StoreState>(val));
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Location server_location = 4 [json_name = "serverLocation"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Location raft_location = 5 [json_name = "raftLocation"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string resource_tag = 6 [json_name = "resourceTag"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_resource_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.common.Store.resource_tag"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Store::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.common.Store)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 epoch = 2 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_epoch(), target);
  }

  // .dingodb.pb.common.StoreState state = 3 [json_name = "state"];
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // .dingodb.pb.common.Location server_location = 4 [json_name = "serverLocation"];
  if (this->_internal_has_server_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::server_location(this),
        _Internal::server_location(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.common.Location raft_location = 5 [json_name = "raftLocation"];
  if (this->_internal_has_raft_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::raft_location(this),
        _Internal::raft_location(this).GetCachedSize(), target, stream);
  }

  // string resource_tag = 6 [json_name = "resourceTag"];
  if (!this->_internal_resource_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_tag().data(), static_cast<int>(this->_internal_resource_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.common.Store.resource_tag");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_resource_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.common.Store)
  return target;
}

size_t Store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.common.Store)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_tag = 6 [json_name = "resourceTag"];
  if (!this->_internal_resource_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_tag());
  }

  // .dingodb.pb.common.Location server_location = 4 [json_name = "serverLocation"];
  if (this->_internal_has_server_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_location_);
  }

  // .dingodb.pb.common.Location raft_location = 5 [json_name = "raftLocation"];
  if (this->_internal_has_raft_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.raft_location_);
  }

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 epoch = 2 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  // .dingodb.pb.common.StoreState state = 3 [json_name = "state"];
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Store::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Store::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Store::GetClassData() const { return &_class_data_; }


void Store::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Store*>(&to_msg);
  auto& from = static_cast<const Store&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.common.Store)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_tag().empty()) {
    _this->_internal_set_resource_tag(from._internal_resource_tag());
  }
  if (from._internal_has_server_location()) {
    _this->_internal_mutable_server_location()->::dingodb::pb::common::Location::MergeFrom(
        from._internal_server_location());
  }
  if (from._internal_has_raft_location()) {
    _this->_internal_mutable_raft_location()->::dingodb::pb::common::Location::MergeFrom(
        from._internal_raft_location());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Store::CopyFrom(const Store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.common.Store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Store::IsInitialized() const {
  return true;
}

void Store::InternalSwap(Store* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resource_tag_, lhs_arena,
      &other->_impl_.resource_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Store, _impl_.state_)
      + sizeof(Store::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Store, _impl_.server_location_)>(
          reinterpret_cast<char*>(&_impl_.server_location_),
          reinterpret_cast<char*>(&other->_impl_.server_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Store::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// ===================================================================

class StoreMap::_Internal {
 public:
};

StoreMap::StoreMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.common.StoreMap)
}
StoreMap::StoreMap(const StoreMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stores_){from._impl_.stores_}
    , decltype(_impl_.epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.epoch_ = from._impl_.epoch_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.common.StoreMap)
}

inline void StoreMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stores_){arena}
    , decltype(_impl_.epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StoreMap::~StoreMap() {
  // @@protoc_insertion_point(destructor:dingodb.pb.common.StoreMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stores_.~RepeatedPtrField();
}

void StoreMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreMap::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.common.StoreMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stores_.Clear();
  _impl_.epoch_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 epoch = 1 [json_name = "epoch"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.common.Store stores = 2 [json_name = "stores"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoreMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.common.StoreMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 1 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epoch(), target);
  }

  // repeated .dingodb.pb.common.Store stores = 2 [json_name = "stores"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stores_size()); i < n; i++) {
    const auto& repfield = this->_internal_stores(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.common.StoreMap)
  return target;
}

size_t StoreMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.common.StoreMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.Store stores = 2 [json_name = "stores"];
  total_size += 1UL * this->_internal_stores_size();
  for (const auto& msg : this->_impl_.stores_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 epoch = 1 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreMap::GetClassData() const { return &_class_data_; }


void StoreMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreMap*>(&to_msg);
  auto& from = static_cast<const StoreMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.common.StoreMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stores_.MergeFrom(from._impl_.stores_);
  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreMap::CopyFrom(const StoreMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.common.StoreMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreMap::IsInitialized() const {
  return true;
}

void StoreMap::InternalSwap(StoreMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stores_.InternalSwap(&other->_impl_.stores_);
  swap(_impl_.epoch_, other->_impl_.epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}

// ===================================================================

class Peer::_Internal {
 public:
  static const ::dingodb::pb::common::Location& server_location(const Peer* msg);
  static const ::dingodb::pb::common::Location& raft_location(const Peer* msg);
};

const ::dingodb::pb::common::Location&
Peer::_Internal::server_location(const Peer* msg) {
  return *msg->_impl_.server_location_;
}
const ::dingodb::pb::common::Location&
Peer::_Internal::raft_location(const Peer* msg) {
  return *msg->_impl_.raft_location_;
}
Peer::Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.common.Peer)
}
Peer::Peer(const Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Peer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_location_){nullptr}
    , decltype(_impl_.raft_location_){nullptr}
    , decltype(_impl_.store_id_){}
    , decltype(_impl_.role_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_location()) {
    _this->_impl_.server_location_ = new ::dingodb::pb::common::Location(*from._impl_.server_location_);
  }
  if (from._internal_has_raft_location()) {
    _this->_impl_.raft_location_ = new ::dingodb::pb::common::Location(*from._impl_.raft_location_);
  }
  ::memcpy(&_impl_.store_id_, &from._impl_.store_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.role_) -
    reinterpret_cast<char*>(&_impl_.store_id_)) + sizeof(_impl_.role_));
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.common.Peer)
}

inline void Peer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_location_){nullptr}
    , decltype(_impl_.raft_location_){nullptr}
    , decltype(_impl_.store_id_){uint64_t{0u}}
    , decltype(_impl_.role_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:dingodb.pb.common.Peer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Peer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.server_location_;
  if (this != internal_default_instance()) delete _impl_.raft_location_;
}

void Peer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.common.Peer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.server_location_ != nullptr) {
    delete _impl_.server_location_;
  }
  _impl_.server_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.raft_location_ != nullptr) {
    delete _impl_.raft_location_;
  }
  _impl_.raft_location_ = nullptr;
  ::memset(&_impl_.store_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.role_) -
      reinterpret_cast<char*>(&_impl_.store_id_)) + sizeof(_impl_.role_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Peer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 store_id = 1 [json_name = "storeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.store_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.PeerRole role = 2 [json_name = "role"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::dingodb::pb::common::PeerRole>(val));
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Location server_location = 3 [json_name = "serverLocation"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Location raft_location = 4 [json_name = "raftLocation"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_raft_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Peer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.common.Peer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 store_id = 1 [json_name = "storeId"];
  if (this->_internal_store_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_store_id(), target);
  }

  // .dingodb.pb.common.PeerRole role = 2 [json_name = "role"];
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_role(), target);
  }

  // .dingodb.pb.common.Location server_location = 3 [json_name = "serverLocation"];
  if (this->_internal_has_server_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::server_location(this),
        _Internal::server_location(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.common.Location raft_location = 4 [json_name = "raftLocation"];
  if (this->_internal_has_raft_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::raft_location(this),
        _Internal::raft_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.common.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.common.Peer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.common.Location server_location = 3 [json_name = "serverLocation"];
  if (this->_internal_has_server_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_location_);
  }

  // .dingodb.pb.common.Location raft_location = 4 [json_name = "raftLocation"];
  if (this->_internal_has_raft_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.raft_location_);
  }

  // uint64 store_id = 1 [json_name = "storeId"];
  if (this->_internal_store_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_store_id());
  }

  // .dingodb.pb.common.PeerRole role = 2 [json_name = "role"];
  if (this->_internal_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Peer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Peer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Peer::GetClassData() const { return &_class_data_; }


void Peer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Peer*>(&to_msg);
  auto& from = static_cast<const Peer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.common.Peer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_location()) {
    _this->_internal_mutable_server_location()->::dingodb::pb::common::Location::MergeFrom(
        from._internal_server_location());
  }
  if (from._internal_has_raft_location()) {
    _this->_internal_mutable_raft_location()->::dingodb::pb::common::Location::MergeFrom(
        from._internal_raft_location());
  }
  if (from._internal_store_id() != 0) {
    _this->_internal_set_store_id(from._internal_store_id());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.common.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::InternalSwap(Peer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Peer, _impl_.role_)
      + sizeof(Peer::_impl_.role_)
      - PROTOBUF_FIELD_OFFSET(Peer, _impl_.server_location_)>(
          reinterpret_cast<char*>(&_impl_.server_location_),
          reinterpret_cast<char*>(&other->_impl_.server_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Peer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[7]);
}

// ===================================================================

class Region::_Internal {
 public:
  static const ::dingodb::pb::common::Range& range(const Region* msg);
};

const ::dingodb::pb::common::Range&
Region::_Internal::range(const Region* msg) {
  return *msg->_impl_.range_;
}
Region::Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.common.Region)
}
Region::Region(const Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Region* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){from._impl_.peers_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.epoch_){}
    , decltype(_impl_.leader_store_id_){}
    , decltype(_impl_.schema_id_){}
    , decltype(_impl_.table_id_){}
    , decltype(_impl_.create_timestamp_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::dingodb::pb::common::Range(*from._impl_.range_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.common.Region)
}

inline void Region::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peers_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.epoch_){uint64_t{0u}}
    , decltype(_impl_.leader_store_id_){int64_t{0}}
    , decltype(_impl_.schema_id_){uint64_t{0u}}
    , decltype(_impl_.table_id_){uint64_t{0u}}
    , decltype(_impl_.create_timestamp_){uint64_t{0u}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:dingodb.pb.common.Region)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Region::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peers_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.range_;
}

void Region::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.common.Region)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.peers_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Region::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch = 2 [json_name = "epoch"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3 [json_name = "name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.common.Region.name"));
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.RegionState state = 4 [json_name = "state"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::dingodb::pb::common::RegionState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 leader_store_id = 5 [json_name = "leaderStoreId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.leader_store_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.common.Peer peers = 6 [json_name = "peers"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Range range = 7 [json_name = "range"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 schema_id = 8 [json_name = "schemaId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.schema_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 table_id = 9 [json_name = "tableId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 create_timestamp = 10 [json_name = "createTimestamp"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.create_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Region::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.common.Region)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 epoch = 2 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_epoch(), target);
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.common.Region.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .dingodb.pb.common.RegionState state = 4 [json_name = "state"];
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // int64 leader_store_id = 5 [json_name = "leaderStoreId"];
  if (this->_internal_leader_store_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_leader_store_id(), target);
  }

  // repeated .dingodb.pb.common.Peer peers = 6 [json_name = "peers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peers_size()); i < n; i++) {
    const auto& repfield = this->_internal_peers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .dingodb.pb.common.Range range = 7 [json_name = "range"];
  if (this->_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // uint64 schema_id = 8 [json_name = "schemaId"];
  if (this->_internal_schema_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_schema_id(), target);
  }

  // uint64 table_id = 9 [json_name = "tableId"];
  if (this->_internal_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_table_id(), target);
  }

  // uint64 create_timestamp = 10 [json_name = "createTimestamp"];
  if (this->_internal_create_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_create_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.common.Region)
  return target;
}

size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.common.Region)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.Peer peers = 6 [json_name = "peers"];
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->_impl_.peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .dingodb.pb.common.Range range = 7 [json_name = "range"];
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 epoch = 2 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  // int64 leader_store_id = 5 [json_name = "leaderStoreId"];
  if (this->_internal_leader_store_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_leader_store_id());
  }

  // uint64 schema_id = 8 [json_name = "schemaId"];
  if (this->_internal_schema_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_schema_id());
  }

  // uint64 table_id = 9 [json_name = "tableId"];
  if (this->_internal_table_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_table_id());
  }

  // uint64 create_timestamp = 10 [json_name = "createTimestamp"];
  if (this->_internal_create_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_create_timestamp());
  }

  // .dingodb.pb.common.RegionState state = 4 [json_name = "state"];
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Region::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Region::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Region::GetClassData() const { return &_class_data_; }


void Region::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Region*>(&to_msg);
  auto& from = static_cast<const Region&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.common.Region)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.peers_.MergeFrom(from._impl_.peers_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_range()) {
    _this->_internal_mutable_range()->::dingodb::pb::common::Range::MergeFrom(
        from._internal_range());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_leader_store_id() != 0) {
    _this->_internal_set_leader_store_id(from._internal_leader_store_id());
  }
  if (from._internal_schema_id() != 0) {
    _this->_internal_set_schema_id(from._internal_schema_id());
  }
  if (from._internal_table_id() != 0) {
    _this->_internal_set_table_id(from._internal_table_id());
  }
  if (from._internal_create_timestamp() != 0) {
    _this->_internal_set_create_timestamp(from._internal_create_timestamp());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.common.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  return true;
}

void Region::InternalSwap(Region* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.peers_.InternalSwap(&other->_impl_.peers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Region, _impl_.state_)
      + sizeof(Region::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Region, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Region::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[8]);
}

// ===================================================================

class RegionMap::_Internal {
 public:
};

RegionMap::RegionMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.common.RegionMap)
}
RegionMap::RegionMap(const RegionMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegionMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.regions_){from._impl_.regions_}
    , decltype(_impl_.epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.epoch_ = from._impl_.epoch_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.common.RegionMap)
}

inline void RegionMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.regions_){arena}
    , decltype(_impl_.epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegionMap::~RegionMap() {
  // @@protoc_insertion_point(destructor:dingodb.pb.common.RegionMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.regions_.~RepeatedPtrField();
}

void RegionMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionMap::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.common.RegionMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.regions_.Clear();
  _impl_.epoch_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 epoch = 1 [json_name = "epoch"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.common.Region regions = 2 [json_name = "regions"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.common.RegionMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 1 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epoch(), target);
  }

  // repeated .dingodb.pb.common.Region regions = 2 [json_name = "regions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_regions_size()); i < n; i++) {
    const auto& repfield = this->_internal_regions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.common.RegionMap)
  return target;
}

size_t RegionMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.common.RegionMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.Region regions = 2 [json_name = "regions"];
  total_size += 1UL * this->_internal_regions_size();
  for (const auto& msg : this->_impl_.regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 epoch = 1 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegionMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionMap::GetClassData() const { return &_class_data_; }


void RegionMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegionMap*>(&to_msg);
  auto& from = static_cast<const RegionMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.common.RegionMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.regions_.MergeFrom(from._impl_.regions_);
  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionMap::CopyFrom(const RegionMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.common.RegionMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionMap::IsInitialized() const {
  return true;
}

void RegionMap::InternalSwap(RegionMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.regions_.InternalSwap(&other->_impl_.regions_);
  swap(_impl_.epoch_, other->_impl_.epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace pb
}  // namespace dingodb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dingodb::pb::common::Location*
Arena::CreateMaybeMessage< ::dingodb::pb::common::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::common::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::common::Range*
Arena::CreateMaybeMessage< ::dingodb::pb::common::Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::common::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::common::KeyValue*
Arena::CreateMaybeMessage< ::dingodb::pb::common::KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::common::KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::common::Coordinator*
Arena::CreateMaybeMessage< ::dingodb::pb::common::Coordinator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::common::Coordinator >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::common::CoordinatorMap*
Arena::CreateMaybeMessage< ::dingodb::pb::common::CoordinatorMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::common::CoordinatorMap >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::common::Store*
Arena::CreateMaybeMessage< ::dingodb::pb::common::Store >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::common::Store >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::common::StoreMap*
Arena::CreateMaybeMessage< ::dingodb::pb::common::StoreMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::common::StoreMap >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::common::Peer*
Arena::CreateMaybeMessage< ::dingodb::pb::common::Peer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::common::Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::common::Region*
Arena::CreateMaybeMessage< ::dingodb::pb::common::Region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::common::Region >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::common::RegionMap*
Arena::CreateMaybeMessage< ::dingodb::pb::common::RegionMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::common::RegionMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
