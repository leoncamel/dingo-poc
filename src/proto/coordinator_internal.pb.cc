// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator_internal.proto

#include "coordinator_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dingodb {
namespace pb {
namespace coordinator_internal {
PROTOBUF_CONSTEXPR PartitionInternal::PartitionInternal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_ids_)*/{}
  , /*decltype(_impl_._region_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionInternalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionInternalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionInternalDefaultTypeInternal() {}
  union {
    PartitionInternal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionInternalDefaultTypeInternal _PartitionInternal_default_instance_;
PROTOBUF_CONSTEXPR TableInternal::TableInternal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partitions_)*/{}
  , /*decltype(_impl_.definition_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableInternalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableInternalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableInternalDefaultTypeInternal() {}
  union {
    TableInternal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableInternalDefaultTypeInternal _TableInternal_default_instance_;
}  // namespace coordinator_internal
}  // namespace pb
}  // namespace dingodb
static ::_pb::Metadata file_level_metadata_coordinator_5finternal_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_coordinator_5finternal_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_coordinator_5finternal_2eproto = nullptr;

const uint32_t TableStruct_coordinator_5finternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator_internal::PartitionInternal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator_internal::PartitionInternal, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator_internal::PartitionInternal, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator_internal::PartitionInternal, _impl_.region_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator_internal::TableInternal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator_internal::TableInternal, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator_internal::TableInternal, _impl_.definition_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator_internal::TableInternal, _impl_.partitions_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dingodb::pb::coordinator_internal::PartitionInternal)},
  { 9, -1, -1, sizeof(::dingodb::pb::coordinator_internal::TableInternal)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dingodb::pb::coordinator_internal::_PartitionInternal_default_instance_._instance,
  &::dingodb::pb::coordinator_internal::_TableInternal_default_instance_._instance,
};

const char descriptor_table_protodef_coordinator_5finternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032coordinator_internal.proto\022\037dingodb.pb"
  ".coordinator_internal\032\014common.proto\032\nmet"
  "a.proto\"r\n\021PartitionInternal\022\016\n\002id\030\001 \001(\004"
  "R\002id\022.\n\005range\030\002 \001(\0132\030.dingodb.pb.common."
  "RangeR\005range\022\035\n\nregion_ids\030\003 \003(\004R\tregion"
  "Ids\"\265\001\n\rTableInternal\022\016\n\002id\030\001 \001(\004R\002id\022@\n"
  "\ndefinition\030\002 \001(\0132 .dingodb.pb.meta.Tabl"
  "eDefinitionR\ndefinition\022R\n\npartitions\030\003 "
  "\003(\01322.dingodb.pb.coordinator_internal.Pa"
  "rtitionInternalR\npartitionsB\331\001\n#com.ding"
  "odb.pb.coordinator_internalB\030Coordinator"
  "InternalProtoP\001\242\002\003DPC\252\002\036Dingodb.Pb.Coord"
  "inatorInternal\312\002\036Dingodb\\Pb\\CoordinatorI"
  "nternal\342\002*Dingodb\\Pb\\CoordinatorInternal"
  "\\GPBMetadata\352\002 Dingodb::Pb::CoordinatorI"
  "nternalb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_coordinator_5finternal_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_meta_2eproto,
};
static ::_pbi::once_flag descriptor_table_coordinator_5finternal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_coordinator_5finternal_2eproto = {
    false, false, 615, descriptor_table_protodef_coordinator_5finternal_2eproto,
    "coordinator_internal.proto",
    &descriptor_table_coordinator_5finternal_2eproto_once, descriptor_table_coordinator_5finternal_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_coordinator_5finternal_2eproto::offsets,
    file_level_metadata_coordinator_5finternal_2eproto, file_level_enum_descriptors_coordinator_5finternal_2eproto,
    file_level_service_descriptors_coordinator_5finternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_coordinator_5finternal_2eproto_getter() {
  return &descriptor_table_coordinator_5finternal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_coordinator_5finternal_2eproto(&descriptor_table_coordinator_5finternal_2eproto);
namespace dingodb {
namespace pb {
namespace coordinator_internal {

// ===================================================================

class PartitionInternal::_Internal {
 public:
  static const ::dingodb::pb::common::Range& range(const PartitionInternal* msg);
};

const ::dingodb::pb::common::Range&
PartitionInternal::_Internal::range(const PartitionInternal* msg) {
  return *msg->_impl_.range_;
}
void PartitionInternal::clear_range() {
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
}
PartitionInternal::PartitionInternal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator_internal.PartitionInternal)
}
PartitionInternal::PartitionInternal(const PartitionInternal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartitionInternal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_ids_){from._impl_.region_ids_}
    , /*decltype(_impl_._region_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::dingodb::pb::common::Range(*from._impl_.range_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator_internal.PartitionInternal)
}

inline void PartitionInternal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_ids_){arena}
    , /*decltype(_impl_._region_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PartitionInternal::~PartitionInternal() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator_internal.PartitionInternal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartitionInternal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_ids_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.range_;
}

void PartitionInternal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartitionInternal::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator_internal.PartitionInternal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionInternal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Range range = 2 [json_name = "range"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 region_ids = 3 [json_name = "regionIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_region_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_region_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartitionInternal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator_internal.PartitionInternal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .dingodb.pb.common.Range range = 2 [json_name = "range"];
  if (this->_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 region_ids = 3 [json_name = "regionIds"];
  {
    int byte_size = _impl_._region_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_region_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator_internal.PartitionInternal)
  return target;
}

size_t PartitionInternal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator_internal.PartitionInternal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 region_ids = 3 [json_name = "regionIds"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.region_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._region_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .dingodb.pb.common.Range range = 2 [json_name = "range"];
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartitionInternal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartitionInternal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartitionInternal::GetClassData() const { return &_class_data_; }


void PartitionInternal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartitionInternal*>(&to_msg);
  auto& from = static_cast<const PartitionInternal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator_internal.PartitionInternal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.region_ids_.MergeFrom(from._impl_.region_ids_);
  if (from._internal_has_range()) {
    _this->_internal_mutable_range()->::dingodb::pb::common::Range::MergeFrom(
        from._internal_range());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionInternal::CopyFrom(const PartitionInternal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator_internal.PartitionInternal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionInternal::IsInitialized() const {
  return true;
}

void PartitionInternal::InternalSwap(PartitionInternal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.region_ids_.InternalSwap(&other->_impl_.region_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartitionInternal, _impl_.id_)
      + sizeof(PartitionInternal::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(PartitionInternal, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionInternal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_5finternal_2eproto_getter, &descriptor_table_coordinator_5finternal_2eproto_once,
      file_level_metadata_coordinator_5finternal_2eproto[0]);
}

// ===================================================================

class TableInternal::_Internal {
 public:
  static const ::dingodb::pb::meta::TableDefinition& definition(const TableInternal* msg);
};

const ::dingodb::pb::meta::TableDefinition&
TableInternal::_Internal::definition(const TableInternal* msg) {
  return *msg->_impl_.definition_;
}
void TableInternal::clear_definition() {
  if (GetArenaForAllocation() == nullptr && _impl_.definition_ != nullptr) {
    delete _impl_.definition_;
  }
  _impl_.definition_ = nullptr;
}
TableInternal::TableInternal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator_internal.TableInternal)
}
TableInternal::TableInternal(const TableInternal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableInternal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){from._impl_.partitions_}
    , decltype(_impl_.definition_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_definition()) {
    _this->_impl_.definition_ = new ::dingodb::pb::meta::TableDefinition(*from._impl_.definition_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator_internal.TableInternal)
}

inline void TableInternal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partitions_){arena}
    , decltype(_impl_.definition_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TableInternal::~TableInternal() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator_internal.TableInternal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableInternal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partitions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.definition_;
}

void TableInternal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableInternal::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator_internal.TableInternal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partitions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.definition_ != nullptr) {
    delete _impl_.definition_;
  }
  _impl_.definition_ = nullptr;
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableInternal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.meta.TableDefinition definition = 2 [json_name = "definition"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_definition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.coordinator_internal.PartitionInternal partitions = 3 [json_name = "partitions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableInternal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator_internal.TableInternal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .dingodb.pb.meta.TableDefinition definition = 2 [json_name = "definition"];
  if (this->_internal_has_definition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::definition(this),
        _Internal::definition(this).GetCachedSize(), target, stream);
  }

  // repeated .dingodb.pb.coordinator_internal.PartitionInternal partitions = 3 [json_name = "partitions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partitions_size()); i < n; i++) {
    const auto& repfield = this->_internal_partitions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator_internal.TableInternal)
  return target;
}

size_t TableInternal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator_internal.TableInternal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.coordinator_internal.PartitionInternal partitions = 3 [json_name = "partitions"];
  total_size += 1UL * this->_internal_partitions_size();
  for (const auto& msg : this->_impl_.partitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dingodb.pb.meta.TableDefinition definition = 2 [json_name = "definition"];
  if (this->_internal_has_definition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.definition_);
  }

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableInternal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableInternal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableInternal::GetClassData() const { return &_class_data_; }


void TableInternal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableInternal*>(&to_msg);
  auto& from = static_cast<const TableInternal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator_internal.TableInternal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partitions_.MergeFrom(from._impl_.partitions_);
  if (from._internal_has_definition()) {
    _this->_internal_mutable_definition()->::dingodb::pb::meta::TableDefinition::MergeFrom(
        from._internal_definition());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableInternal::CopyFrom(const TableInternal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator_internal.TableInternal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInternal::IsInitialized() const {
  return true;
}

void TableInternal::InternalSwap(TableInternal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partitions_.InternalSwap(&other->_impl_.partitions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableInternal, _impl_.id_)
      + sizeof(TableInternal::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(TableInternal, _impl_.definition_)>(
          reinterpret_cast<char*>(&_impl_.definition_),
          reinterpret_cast<char*>(&other->_impl_.definition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableInternal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_5finternal_2eproto_getter, &descriptor_table_coordinator_5finternal_2eproto_once,
      file_level_metadata_coordinator_5finternal_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace coordinator_internal
}  // namespace pb
}  // namespace dingodb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator_internal::PartitionInternal*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator_internal::PartitionInternal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator_internal::PartitionInternal >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator_internal::TableInternal*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator_internal::TableInternal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator_internal::TableInternal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
