// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator.proto

#include "coordinator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dingodb {
namespace pb {
namespace coordinator {
PROTOBUF_CONSTEXPR StoreHeartbeatRequest::StoreHeartbeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.regions_)*/{}
  , /*decltype(_impl_.store_)*/nullptr
  , /*decltype(_impl_.self_storemap_epoch_)*/uint64_t{0u}
  , /*decltype(_impl_.self_regionmap_epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreHeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreHeartbeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreHeartbeatRequestDefaultTypeInternal() {}
  union {
    StoreHeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreHeartbeatRequestDefaultTypeInternal _StoreHeartbeatRequest_default_instance_;
PROTOBUF_CONSTEXPR StoreHeartbeatResponse::StoreHeartbeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.storemap_)*/nullptr
  , /*decltype(_impl_.regionmap_)*/nullptr
  , /*decltype(_impl_.storemap_epoch_)*/uint64_t{0u}
  , /*decltype(_impl_.regionmap_epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreHeartbeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreHeartbeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreHeartbeatResponseDefaultTypeInternal() {}
  union {
    StoreHeartbeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreHeartbeatResponseDefaultTypeInternal _StoreHeartbeatResponse_default_instance_;
PROTOBUF_CONSTEXPR HelloRequest::HelloRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hello_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloRequestDefaultTypeInternal() {}
  union {
    HelloRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
PROTOBUF_CONSTEXPR HelloResponse::HelloResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_detail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloResponseDefaultTypeInternal() {}
  union {
    HelloResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloResponseDefaultTypeInternal _HelloResponse_default_instance_;
PROTOBUF_CONSTEXPR GetRegionMapRequest::GetRegionMapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRegionMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRegionMapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRegionMapRequestDefaultTypeInternal() {}
  union {
    GetRegionMapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRegionMapRequestDefaultTypeInternal _GetRegionMapRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRegionMapResponse::GetRegionMapResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.regionmap_)*/nullptr
  , /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRegionMapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRegionMapResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRegionMapResponseDefaultTypeInternal() {}
  union {
    GetRegionMapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRegionMapResponseDefaultTypeInternal _GetRegionMapResponse_default_instance_;
PROTOBUF_CONSTEXPR GetStoreMapRequest::GetStoreMapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStoreMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStoreMapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStoreMapRequestDefaultTypeInternal() {}
  union {
    GetStoreMapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStoreMapRequestDefaultTypeInternal _GetStoreMapRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStoreMapResponse::GetStoreMapResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.storemap_)*/nullptr
  , /*decltype(_impl_.epoch_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStoreMapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStoreMapResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStoreMapResponseDefaultTypeInternal() {}
  union {
    GetStoreMapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStoreMapResponseDefaultTypeInternal _GetStoreMapResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateStoreRequest::CreateStoreRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cluster_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateStoreRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateStoreRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateStoreRequestDefaultTypeInternal() {}
  union {
    CreateStoreRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateStoreRequestDefaultTypeInternal _CreateStoreRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateStoreResponse::CreateStoreResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.store_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateStoreResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateStoreResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateStoreResponseDefaultTypeInternal() {}
  union {
    CreateStoreResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateStoreResponseDefaultTypeInternal _CreateStoreResponse_default_instance_;
}  // namespace coordinator
}  // namespace pb
}  // namespace dingodb
static ::_pb::Metadata file_level_metadata_coordinator_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_coordinator_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_coordinator_2eproto[1];

const uint32_t TableStruct_coordinator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatRequest, _impl_.self_storemap_epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatRequest, _impl_.self_regionmap_epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatRequest, _impl_.store_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatRequest, _impl_.regions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatResponse, _impl_.storemap_epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatResponse, _impl_.regionmap_epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatResponse, _impl_.storemap_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::StoreHeartbeatResponse, _impl_.regionmap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::HelloRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::HelloRequest, _impl_.hello_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::HelloResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::HelloResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::HelloResponse, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::HelloResponse, _impl_.status_detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetRegionMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetRegionMapRequest, _impl_.epoch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetRegionMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetRegionMapResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetRegionMapResponse, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetRegionMapResponse, _impl_.regionmap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetStoreMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetStoreMapRequest, _impl_.epoch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetStoreMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetStoreMapResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetStoreMapResponse, _impl_.epoch_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::GetStoreMapResponse, _impl_.storemap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::CreateStoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::CreateStoreRequest, _impl_.cluster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::CreateStoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::CreateStoreResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::CreateStoreResponse, _impl_.store_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::coordinator::CreateStoreResponse, _impl_.password_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dingodb::pb::coordinator::StoreHeartbeatRequest)},
  { 10, -1, -1, sizeof(::dingodb::pb::coordinator::StoreHeartbeatResponse)},
  { 21, -1, -1, sizeof(::dingodb::pb::coordinator::HelloRequest)},
  { 28, -1, -1, sizeof(::dingodb::pb::coordinator::HelloResponse)},
  { 37, -1, -1, sizeof(::dingodb::pb::coordinator::GetRegionMapRequest)},
  { 44, -1, -1, sizeof(::dingodb::pb::coordinator::GetRegionMapResponse)},
  { 53, -1, -1, sizeof(::dingodb::pb::coordinator::GetStoreMapRequest)},
  { 60, -1, -1, sizeof(::dingodb::pb::coordinator::GetStoreMapResponse)},
  { 69, -1, -1, sizeof(::dingodb::pb::coordinator::CreateStoreRequest)},
  { 76, -1, -1, sizeof(::dingodb::pb::coordinator::CreateStoreResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dingodb::pb::coordinator::_StoreHeartbeatRequest_default_instance_._instance,
  &::dingodb::pb::coordinator::_StoreHeartbeatResponse_default_instance_._instance,
  &::dingodb::pb::coordinator::_HelloRequest_default_instance_._instance,
  &::dingodb::pb::coordinator::_HelloResponse_default_instance_._instance,
  &::dingodb::pb::coordinator::_GetRegionMapRequest_default_instance_._instance,
  &::dingodb::pb::coordinator::_GetRegionMapResponse_default_instance_._instance,
  &::dingodb::pb::coordinator::_GetStoreMapRequest_default_instance_._instance,
  &::dingodb::pb::coordinator::_GetStoreMapResponse_default_instance_._instance,
  &::dingodb::pb::coordinator::_CreateStoreRequest_default_instance_._instance,
  &::dingodb::pb::coordinator::_CreateStoreResponse_default_instance_._instance,
};

const char descriptor_table_protodef_coordinator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021coordinator.proto\022\026dingodb.pb.coordina"
  "tor\032\014common.proto\032\013error.proto\"\336\001\n\025Store"
  "HeartbeatRequest\022.\n\023self_storemap_epoch\030"
  "\001 \001(\004R\021selfStoremapEpoch\0220\n\024self_regionm"
  "ap_epoch\030\002 \001(\004R\022selfRegionmapEpoch\022.\n\005st"
  "ore\030\003 \001(\0132\030.dingodb.pb.common.StoreR\005sto"
  "re\0223\n\007regions\030\004 \003(\0132\031.dingodb.pb.common."
  "RegionR\007regions\"\214\002\n\026StoreHeartbeatRespon"
  "se\022-\n\005error\030\001 \001(\0132\027.dingodb.pb.error.Err"
  "orR\005error\022%\n\016storemap_epoch\030\002 \001(\004R\rstore"
  "mapEpoch\022\'\n\017regionmap_epoch\030\003 \001(\004R\016regio"
  "nmapEpoch\0227\n\010storemap\030\004 \001(\0132\033.dingodb.pb"
  ".common.StoreMapR\010storemap\022:\n\tregionmap\030"
  "\005 \001(\0132\034.dingodb.pb.common.RegionMapR\treg"
  "ionmap\"$\n\014HelloRequest\022\024\n\005hello\030\001 \001(\004R\005h"
  "ello\"\236\001\n\rHelloResponse\022-\n\005error\030\001 \001(\0132\027."
  "dingodb.pb.error.ErrorR\005error\0229\n\005state\030\002"
  " \001(\0162#.dingodb.pb.common.CoordinatorStat"
  "eR\005state\022#\n\rstatus_detail\030\003 \001(\tR\014statusD"
  "etail\"+\n\023GetRegionMapRequest\022\024\n\005epoch\030\001 "
  "\001(\004R\005epoch\"\227\001\n\024GetRegionMapResponse\022-\n\005e"
  "rror\030\001 \001(\0132\027.dingodb.pb.error.ErrorR\005err"
  "or\022\024\n\005epoch\030\002 \001(\004R\005epoch\022:\n\tregionmap\030\003 "
  "\001(\0132\034.dingodb.pb.common.RegionMapR\tregio"
  "nmap\"*\n\022GetStoreMapRequest\022\024\n\005epoch\030\001 \001("
  "\004R\005epoch\"\223\001\n\023GetStoreMapResponse\022-\n\005erro"
  "r\030\001 \001(\0132\027.dingodb.pb.error.ErrorR\005error\022"
  "\024\n\005epoch\030\002 \001(\004R\005epoch\0227\n\010storemap\030\003 \001(\0132"
  "\033.dingodb.pb.common.StoreMapR\010storemap\"3"
  "\n\022CreateStoreRequest\022\035\n\ncluster_id\030\001 \001(\004"
  "R\tclusterId\"{\n\023CreateStoreResponse\022-\n\005er"
  "ror\030\001 \001(\0132\027.dingodb.pb.error.ErrorR\005erro"
  "r\022\031\n\010store_id\030\002 \001(\004R\007storeId\022\032\n\010password"
  "\030\003 \001(\tR\010password2\226\004\n\022CoordinatorService\022"
  "T\n\005Hello\022$.dingodb.pb.coordinator.HelloR"
  "equest\032%.dingodb.pb.coordinator.HelloRes"
  "ponse\022o\n\016StoreHeartbeat\022-.dingodb.pb.coo"
  "rdinator.StoreHeartbeatRequest\032..dingodb"
  ".pb.coordinator.StoreHeartbeatResponse\022i"
  "\n\014GetRegionMap\022+.dingodb.pb.coordinator."
  "GetRegionMapRequest\032,.dingodb.pb.coordin"
  "ator.GetRegionMapResponse\022f\n\013GetStoreMap"
  "\022*.dingodb.pb.coordinator.GetStoreMapReq"
  "uest\032+.dingodb.pb.coordinator.GetStoreMa"
  "pResponse\022f\n\013CreateStore\022*.dingodb.pb.co"
  "ordinator.CreateStoreRequest\032+.dingodb.p"
  "b.coordinator.CreateStoreResponseB\253\001\n\032co"
  "m.dingodb.pb.coordinatorB\020CoordinatorPro"
  "toP\001\200\001\001\242\002\003DPC\252\002\026Dingodb.Pb.Coordinator\312\002"
  "\026Dingodb\\Pb\\Coordinator\342\002\"Dingodb\\Pb\\Coo"
  "rdinator\\GPBMetadata\352\002\030Dingodb::Pb::Coor"
  "dinatorb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_coordinator_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_error_2eproto,
};
static ::_pbi::once_flag descriptor_table_coordinator_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_coordinator_2eproto = {
    false, false, 2055, descriptor_table_protodef_coordinator_2eproto,
    "coordinator.proto",
    &descriptor_table_coordinator_2eproto_once, descriptor_table_coordinator_2eproto_deps, 2, 10,
    schemas, file_default_instances, TableStruct_coordinator_2eproto::offsets,
    file_level_metadata_coordinator_2eproto, file_level_enum_descriptors_coordinator_2eproto,
    file_level_service_descriptors_coordinator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_coordinator_2eproto_getter() {
  return &descriptor_table_coordinator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_coordinator_2eproto(&descriptor_table_coordinator_2eproto);
namespace dingodb {
namespace pb {
namespace coordinator {

// ===================================================================

class StoreHeartbeatRequest::_Internal {
 public:
  static const ::dingodb::pb::common::Store& store(const StoreHeartbeatRequest* msg);
};

const ::dingodb::pb::common::Store&
StoreHeartbeatRequest::_Internal::store(const StoreHeartbeatRequest* msg) {
  return *msg->_impl_.store_;
}
void StoreHeartbeatRequest::clear_store() {
  if (GetArenaForAllocation() == nullptr && _impl_.store_ != nullptr) {
    delete _impl_.store_;
  }
  _impl_.store_ = nullptr;
}
void StoreHeartbeatRequest::clear_regions() {
  _impl_.regions_.Clear();
}
StoreHeartbeatRequest::StoreHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator.StoreHeartbeatRequest)
}
StoreHeartbeatRequest::StoreHeartbeatRequest(const StoreHeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreHeartbeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.regions_){from._impl_.regions_}
    , decltype(_impl_.store_){nullptr}
    , decltype(_impl_.self_storemap_epoch_){}
    , decltype(_impl_.self_regionmap_epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_store()) {
    _this->_impl_.store_ = new ::dingodb::pb::common::Store(*from._impl_.store_);
  }
  ::memcpy(&_impl_.self_storemap_epoch_, &from._impl_.self_storemap_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.self_regionmap_epoch_) -
    reinterpret_cast<char*>(&_impl_.self_storemap_epoch_)) + sizeof(_impl_.self_regionmap_epoch_));
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator.StoreHeartbeatRequest)
}

inline void StoreHeartbeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.regions_){arena}
    , decltype(_impl_.store_){nullptr}
    , decltype(_impl_.self_storemap_epoch_){uint64_t{0u}}
    , decltype(_impl_.self_regionmap_epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StoreHeartbeatRequest::~StoreHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator.StoreHeartbeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreHeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.regions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.store_;
}

void StoreHeartbeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator.StoreHeartbeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.regions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.store_ != nullptr) {
    delete _impl_.store_;
  }
  _impl_.store_ = nullptr;
  ::memset(&_impl_.self_storemap_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.self_regionmap_epoch_) -
      reinterpret_cast<char*>(&_impl_.self_storemap_epoch_)) + sizeof(_impl_.self_regionmap_epoch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreHeartbeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 self_storemap_epoch = 1 [json_name = "selfStoremapEpoch"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.self_storemap_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 self_regionmap_epoch = 2 [json_name = "selfRegionmapEpoch"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.self_regionmap_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.Store store = 3 [json_name = "store"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_store(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.common.Region regions = 4 [json_name = "regions"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoreHeartbeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator.StoreHeartbeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 self_storemap_epoch = 1 [json_name = "selfStoremapEpoch"];
  if (this->_internal_self_storemap_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_self_storemap_epoch(), target);
  }

  // uint64 self_regionmap_epoch = 2 [json_name = "selfRegionmapEpoch"];
  if (this->_internal_self_regionmap_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_self_regionmap_epoch(), target);
  }

  // .dingodb.pb.common.Store store = 3 [json_name = "store"];
  if (this->_internal_has_store()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::store(this),
        _Internal::store(this).GetCachedSize(), target, stream);
  }

  // repeated .dingodb.pb.common.Region regions = 4 [json_name = "regions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_regions_size()); i < n; i++) {
    const auto& repfield = this->_internal_regions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator.StoreHeartbeatRequest)
  return target;
}

size_t StoreHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator.StoreHeartbeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.Region regions = 4 [json_name = "regions"];
  total_size += 1UL * this->_internal_regions_size();
  for (const auto& msg : this->_impl_.regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dingodb.pb.common.Store store = 3 [json_name = "store"];
  if (this->_internal_has_store()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.store_);
  }

  // uint64 self_storemap_epoch = 1 [json_name = "selfStoremapEpoch"];
  if (this->_internal_self_storemap_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_self_storemap_epoch());
  }

  // uint64 self_regionmap_epoch = 2 [json_name = "selfRegionmapEpoch"];
  if (this->_internal_self_regionmap_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_self_regionmap_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreHeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreHeartbeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreHeartbeatRequest::GetClassData() const { return &_class_data_; }


void StoreHeartbeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreHeartbeatRequest*>(&to_msg);
  auto& from = static_cast<const StoreHeartbeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator.StoreHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.regions_.MergeFrom(from._impl_.regions_);
  if (from._internal_has_store()) {
    _this->_internal_mutable_store()->::dingodb::pb::common::Store::MergeFrom(
        from._internal_store());
  }
  if (from._internal_self_storemap_epoch() != 0) {
    _this->_internal_set_self_storemap_epoch(from._internal_self_storemap_epoch());
  }
  if (from._internal_self_regionmap_epoch() != 0) {
    _this->_internal_set_self_regionmap_epoch(from._internal_self_regionmap_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreHeartbeatRequest::CopyFrom(const StoreHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator.StoreHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreHeartbeatRequest::IsInitialized() const {
  return true;
}

void StoreHeartbeatRequest::InternalSwap(StoreHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.regions_.InternalSwap(&other->_impl_.regions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreHeartbeatRequest, _impl_.self_regionmap_epoch_)
      + sizeof(StoreHeartbeatRequest::_impl_.self_regionmap_epoch_)
      - PROTOBUF_FIELD_OFFSET(StoreHeartbeatRequest, _impl_.store_)>(
          reinterpret_cast<char*>(&_impl_.store_),
          reinterpret_cast<char*>(&other->_impl_.store_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreHeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[0]);
}

// ===================================================================

class StoreHeartbeatResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const StoreHeartbeatResponse* msg);
  static const ::dingodb::pb::common::StoreMap& storemap(const StoreHeartbeatResponse* msg);
  static const ::dingodb::pb::common::RegionMap& regionmap(const StoreHeartbeatResponse* msg);
};

const ::dingodb::pb::error::Error&
StoreHeartbeatResponse::_Internal::error(const StoreHeartbeatResponse* msg) {
  return *msg->_impl_.error_;
}
const ::dingodb::pb::common::StoreMap&
StoreHeartbeatResponse::_Internal::storemap(const StoreHeartbeatResponse* msg) {
  return *msg->_impl_.storemap_;
}
const ::dingodb::pb::common::RegionMap&
StoreHeartbeatResponse::_Internal::regionmap(const StoreHeartbeatResponse* msg) {
  return *msg->_impl_.regionmap_;
}
void StoreHeartbeatResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
void StoreHeartbeatResponse::clear_storemap() {
  if (GetArenaForAllocation() == nullptr && _impl_.storemap_ != nullptr) {
    delete _impl_.storemap_;
  }
  _impl_.storemap_ = nullptr;
}
void StoreHeartbeatResponse::clear_regionmap() {
  if (GetArenaForAllocation() == nullptr && _impl_.regionmap_ != nullptr) {
    delete _impl_.regionmap_;
  }
  _impl_.regionmap_ = nullptr;
}
StoreHeartbeatResponse::StoreHeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator.StoreHeartbeatResponse)
}
StoreHeartbeatResponse::StoreHeartbeatResponse(const StoreHeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreHeartbeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.storemap_){nullptr}
    , decltype(_impl_.regionmap_){nullptr}
    , decltype(_impl_.storemap_epoch_){}
    , decltype(_impl_.regionmap_epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  if (from._internal_has_storemap()) {
    _this->_impl_.storemap_ = new ::dingodb::pb::common::StoreMap(*from._impl_.storemap_);
  }
  if (from._internal_has_regionmap()) {
    _this->_impl_.regionmap_ = new ::dingodb::pb::common::RegionMap(*from._impl_.regionmap_);
  }
  ::memcpy(&_impl_.storemap_epoch_, &from._impl_.storemap_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.regionmap_epoch_) -
    reinterpret_cast<char*>(&_impl_.storemap_epoch_)) + sizeof(_impl_.regionmap_epoch_));
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator.StoreHeartbeatResponse)
}

inline void StoreHeartbeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.storemap_){nullptr}
    , decltype(_impl_.regionmap_){nullptr}
    , decltype(_impl_.storemap_epoch_){uint64_t{0u}}
    , decltype(_impl_.regionmap_epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StoreHeartbeatResponse::~StoreHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator.StoreHeartbeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreHeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
  if (this != internal_default_instance()) delete _impl_.storemap_;
  if (this != internal_default_instance()) delete _impl_.regionmap_;
}

void StoreHeartbeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator.StoreHeartbeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.storemap_ != nullptr) {
    delete _impl_.storemap_;
  }
  _impl_.storemap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regionmap_ != nullptr) {
    delete _impl_.regionmap_;
  }
  _impl_.regionmap_ = nullptr;
  ::memset(&_impl_.storemap_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.regionmap_epoch_) -
      reinterpret_cast<char*>(&_impl_.storemap_epoch_)) + sizeof(_impl_.regionmap_epoch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreHeartbeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 storemap_epoch = 2 [json_name = "storemapEpoch"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.storemap_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 regionmap_epoch = 3 [json_name = "regionmapEpoch"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.regionmap_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.StoreMap storemap = 4 [json_name = "storemap"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_storemap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.RegionMap regionmap = 5 [json_name = "regionmap"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_regionmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoreHeartbeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator.StoreHeartbeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // uint64 storemap_epoch = 2 [json_name = "storemapEpoch"];
  if (this->_internal_storemap_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_storemap_epoch(), target);
  }

  // uint64 regionmap_epoch = 3 [json_name = "regionmapEpoch"];
  if (this->_internal_regionmap_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_regionmap_epoch(), target);
  }

  // .dingodb.pb.common.StoreMap storemap = 4 [json_name = "storemap"];
  if (this->_internal_has_storemap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::storemap(this),
        _Internal::storemap(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.common.RegionMap regionmap = 5 [json_name = "regionmap"];
  if (this->_internal_has_regionmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::regionmap(this),
        _Internal::regionmap(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator.StoreHeartbeatResponse)
  return target;
}

size_t StoreHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator.StoreHeartbeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .dingodb.pb.common.StoreMap storemap = 4 [json_name = "storemap"];
  if (this->_internal_has_storemap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storemap_);
  }

  // .dingodb.pb.common.RegionMap regionmap = 5 [json_name = "regionmap"];
  if (this->_internal_has_regionmap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regionmap_);
  }

  // uint64 storemap_epoch = 2 [json_name = "storemapEpoch"];
  if (this->_internal_storemap_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_storemap_epoch());
  }

  // uint64 regionmap_epoch = 3 [json_name = "regionmapEpoch"];
  if (this->_internal_regionmap_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_regionmap_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreHeartbeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreHeartbeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreHeartbeatResponse::GetClassData() const { return &_class_data_; }


void StoreHeartbeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreHeartbeatResponse*>(&to_msg);
  auto& from = static_cast<const StoreHeartbeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator.StoreHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_has_storemap()) {
    _this->_internal_mutable_storemap()->::dingodb::pb::common::StoreMap::MergeFrom(
        from._internal_storemap());
  }
  if (from._internal_has_regionmap()) {
    _this->_internal_mutable_regionmap()->::dingodb::pb::common::RegionMap::MergeFrom(
        from._internal_regionmap());
  }
  if (from._internal_storemap_epoch() != 0) {
    _this->_internal_set_storemap_epoch(from._internal_storemap_epoch());
  }
  if (from._internal_regionmap_epoch() != 0) {
    _this->_internal_set_regionmap_epoch(from._internal_regionmap_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreHeartbeatResponse::CopyFrom(const StoreHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator.StoreHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreHeartbeatResponse::IsInitialized() const {
  return true;
}

void StoreHeartbeatResponse::InternalSwap(StoreHeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreHeartbeatResponse, _impl_.regionmap_epoch_)
      + sizeof(StoreHeartbeatResponse::_impl_.regionmap_epoch_)
      - PROTOBUF_FIELD_OFFSET(StoreHeartbeatResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreHeartbeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[1]);
}

// ===================================================================

class HelloRequest::_Internal {
 public:
};

HelloRequest::HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator.HelloRequest)
}
HelloRequest::HelloRequest(const HelloRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hello_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.hello_ = from._impl_.hello_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator.HelloRequest)
}

inline void HelloRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hello_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HelloRequest::~HelloRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator.HelloRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HelloRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator.HelloRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hello_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hello = 1 [json_name = "hello"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hello_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator.HelloRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hello = 1 [json_name = "hello"];
  if (this->_internal_hello() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hello(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator.HelloRequest)
  return target;
}

size_t HelloRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator.HelloRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hello = 1 [json_name = "hello"];
  if (this->_internal_hello() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hello());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloRequest::GetClassData() const { return &_class_data_; }


void HelloRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloRequest*>(&to_msg);
  auto& from = static_cast<const HelloRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator.HelloRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hello() != 0) {
    _this->_internal_set_hello(from._internal_hello());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloRequest::CopyFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRequest::IsInitialized() const {
  return true;
}

void HelloRequest::InternalSwap(HelloRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.hello_, other->_impl_.hello_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[2]);
}

// ===================================================================

class HelloResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const HelloResponse* msg);
};

const ::dingodb::pb::error::Error&
HelloResponse::_Internal::error(const HelloResponse* msg) {
  return *msg->_impl_.error_;
}
void HelloResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
HelloResponse::HelloResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator.HelloResponse)
}
HelloResponse::HelloResponse(const HelloResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_detail_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_detail().empty()) {
    _this->_impl_.status_detail_.Set(from._internal_status_detail(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator.HelloResponse)
}

inline void HelloResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_detail_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloResponse::~HelloResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator.HelloResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_detail_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void HelloResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator.HelloResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_detail_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.CoordinatorState state = 2 [json_name = "state"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::dingodb::pb::common::CoordinatorState>(val));
        } else
          goto handle_unusual;
        continue;
      // string status_detail = 3 [json_name = "statusDetail"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_status_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.coordinator.HelloResponse.status_detail"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator.HelloResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .dingodb.pb.common.CoordinatorState state = 2 [json_name = "state"];
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // string status_detail = 3 [json_name = "statusDetail"];
  if (!this->_internal_status_detail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_detail().data(), static_cast<int>(this->_internal_status_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.coordinator.HelloResponse.status_detail");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator.HelloResponse)
  return target;
}

size_t HelloResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator.HelloResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status_detail = 3 [json_name = "statusDetail"];
  if (!this->_internal_status_detail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_detail());
  }

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .dingodb.pb.common.CoordinatorState state = 2 [json_name = "state"];
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloResponse::GetClassData() const { return &_class_data_; }


void HelloResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloResponse*>(&to_msg);
  auto& from = static_cast<const HelloResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator.HelloResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status_detail().empty()) {
    _this->_internal_set_status_detail(from._internal_status_detail());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloResponse::CopyFrom(const HelloResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator.HelloResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloResponse::IsInitialized() const {
  return true;
}

void HelloResponse::InternalSwap(HelloResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_detail_, lhs_arena,
      &other->_impl_.status_detail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HelloResponse, _impl_.state_)
      + sizeof(HelloResponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(HelloResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[3]);
}

// ===================================================================

class GetRegionMapRequest::_Internal {
 public:
};

GetRegionMapRequest::GetRegionMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator.GetRegionMapRequest)
}
GetRegionMapRequest::GetRegionMapRequest(const GetRegionMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRegionMapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.epoch_ = from._impl_.epoch_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator.GetRegionMapRequest)
}

inline void GetRegionMapRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRegionMapRequest::~GetRegionMapRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator.GetRegionMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRegionMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRegionMapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRegionMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator.GetRegionMapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.epoch_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRegionMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 epoch = 1 [json_name = "epoch"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRegionMapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator.GetRegionMapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 1 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator.GetRegionMapRequest)
  return target;
}

size_t GetRegionMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator.GetRegionMapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 epoch = 1 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRegionMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRegionMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRegionMapRequest::GetClassData() const { return &_class_data_; }


void GetRegionMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRegionMapRequest*>(&to_msg);
  auto& from = static_cast<const GetRegionMapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator.GetRegionMapRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRegionMapRequest::CopyFrom(const GetRegionMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator.GetRegionMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionMapRequest::IsInitialized() const {
  return true;
}

void GetRegionMapRequest::InternalSwap(GetRegionMapRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.epoch_, other->_impl_.epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRegionMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[4]);
}

// ===================================================================

class GetRegionMapResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const GetRegionMapResponse* msg);
  static const ::dingodb::pb::common::RegionMap& regionmap(const GetRegionMapResponse* msg);
};

const ::dingodb::pb::error::Error&
GetRegionMapResponse::_Internal::error(const GetRegionMapResponse* msg) {
  return *msg->_impl_.error_;
}
const ::dingodb::pb::common::RegionMap&
GetRegionMapResponse::_Internal::regionmap(const GetRegionMapResponse* msg) {
  return *msg->_impl_.regionmap_;
}
void GetRegionMapResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
void GetRegionMapResponse::clear_regionmap() {
  if (GetArenaForAllocation() == nullptr && _impl_.regionmap_ != nullptr) {
    delete _impl_.regionmap_;
  }
  _impl_.regionmap_ = nullptr;
}
GetRegionMapResponse::GetRegionMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator.GetRegionMapResponse)
}
GetRegionMapResponse::GetRegionMapResponse(const GetRegionMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRegionMapResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.regionmap_){nullptr}
    , decltype(_impl_.epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  if (from._internal_has_regionmap()) {
    _this->_impl_.regionmap_ = new ::dingodb::pb::common::RegionMap(*from._impl_.regionmap_);
  }
  _this->_impl_.epoch_ = from._impl_.epoch_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator.GetRegionMapResponse)
}

inline void GetRegionMapResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.regionmap_){nullptr}
    , decltype(_impl_.epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRegionMapResponse::~GetRegionMapResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator.GetRegionMapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRegionMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
  if (this != internal_default_instance()) delete _impl_.regionmap_;
}

void GetRegionMapResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRegionMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator.GetRegionMapResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.regionmap_ != nullptr) {
    delete _impl_.regionmap_;
  }
  _impl_.regionmap_ = nullptr;
  _impl_.epoch_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRegionMapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch = 2 [json_name = "epoch"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.RegionMap regionmap = 3 [json_name = "regionmap"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_regionmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRegionMapResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator.GetRegionMapResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // uint64 epoch = 2 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_epoch(), target);
  }

  // .dingodb.pb.common.RegionMap regionmap = 3 [json_name = "regionmap"];
  if (this->_internal_has_regionmap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::regionmap(this),
        _Internal::regionmap(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator.GetRegionMapResponse)
  return target;
}

size_t GetRegionMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator.GetRegionMapResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .dingodb.pb.common.RegionMap regionmap = 3 [json_name = "regionmap"];
  if (this->_internal_has_regionmap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.regionmap_);
  }

  // uint64 epoch = 2 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRegionMapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRegionMapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRegionMapResponse::GetClassData() const { return &_class_data_; }


void GetRegionMapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRegionMapResponse*>(&to_msg);
  auto& from = static_cast<const GetRegionMapResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator.GetRegionMapResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_has_regionmap()) {
    _this->_internal_mutable_regionmap()->::dingodb::pb::common::RegionMap::MergeFrom(
        from._internal_regionmap());
  }
  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRegionMapResponse::CopyFrom(const GetRegionMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator.GetRegionMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionMapResponse::IsInitialized() const {
  return true;
}

void GetRegionMapResponse::InternalSwap(GetRegionMapResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRegionMapResponse, _impl_.epoch_)
      + sizeof(GetRegionMapResponse::_impl_.epoch_)
      - PROTOBUF_FIELD_OFFSET(GetRegionMapResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRegionMapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[5]);
}

// ===================================================================

class GetStoreMapRequest::_Internal {
 public:
};

GetStoreMapRequest::GetStoreMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator.GetStoreMapRequest)
}
GetStoreMapRequest::GetStoreMapRequest(const GetStoreMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStoreMapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.epoch_ = from._impl_.epoch_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator.GetStoreMapRequest)
}

inline void GetStoreMapRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetStoreMapRequest::~GetStoreMapRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator.GetStoreMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStoreMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetStoreMapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStoreMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator.GetStoreMapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.epoch_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStoreMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 epoch = 1 [json_name = "epoch"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStoreMapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator.GetStoreMapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 epoch = 1 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator.GetStoreMapRequest)
  return target;
}

size_t GetStoreMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator.GetStoreMapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 epoch = 1 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStoreMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStoreMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStoreMapRequest::GetClassData() const { return &_class_data_; }


void GetStoreMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStoreMapRequest*>(&to_msg);
  auto& from = static_cast<const GetStoreMapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator.GetStoreMapRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStoreMapRequest::CopyFrom(const GetStoreMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator.GetStoreMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreMapRequest::IsInitialized() const {
  return true;
}

void GetStoreMapRequest::InternalSwap(GetStoreMapRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.epoch_, other->_impl_.epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStoreMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[6]);
}

// ===================================================================

class GetStoreMapResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const GetStoreMapResponse* msg);
  static const ::dingodb::pb::common::StoreMap& storemap(const GetStoreMapResponse* msg);
};

const ::dingodb::pb::error::Error&
GetStoreMapResponse::_Internal::error(const GetStoreMapResponse* msg) {
  return *msg->_impl_.error_;
}
const ::dingodb::pb::common::StoreMap&
GetStoreMapResponse::_Internal::storemap(const GetStoreMapResponse* msg) {
  return *msg->_impl_.storemap_;
}
void GetStoreMapResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
void GetStoreMapResponse::clear_storemap() {
  if (GetArenaForAllocation() == nullptr && _impl_.storemap_ != nullptr) {
    delete _impl_.storemap_;
  }
  _impl_.storemap_ = nullptr;
}
GetStoreMapResponse::GetStoreMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator.GetStoreMapResponse)
}
GetStoreMapResponse::GetStoreMapResponse(const GetStoreMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStoreMapResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.storemap_){nullptr}
    , decltype(_impl_.epoch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  if (from._internal_has_storemap()) {
    _this->_impl_.storemap_ = new ::dingodb::pb::common::StoreMap(*from._impl_.storemap_);
  }
  _this->_impl_.epoch_ = from._impl_.epoch_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator.GetStoreMapResponse)
}

inline void GetStoreMapResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.storemap_){nullptr}
    , decltype(_impl_.epoch_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetStoreMapResponse::~GetStoreMapResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator.GetStoreMapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStoreMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
  if (this != internal_default_instance()) delete _impl_.storemap_;
}

void GetStoreMapResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStoreMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator.GetStoreMapResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.storemap_ != nullptr) {
    delete _impl_.storemap_;
  }
  _impl_.storemap_ = nullptr;
  _impl_.epoch_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStoreMapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 epoch = 2 [json_name = "epoch"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.StoreMap storemap = 3 [json_name = "storemap"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_storemap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStoreMapResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator.GetStoreMapResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // uint64 epoch = 2 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_epoch(), target);
  }

  // .dingodb.pb.common.StoreMap storemap = 3 [json_name = "storemap"];
  if (this->_internal_has_storemap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::storemap(this),
        _Internal::storemap(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator.GetStoreMapResponse)
  return target;
}

size_t GetStoreMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator.GetStoreMapResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // .dingodb.pb.common.StoreMap storemap = 3 [json_name = "storemap"];
  if (this->_internal_has_storemap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storemap_);
  }

  // uint64 epoch = 2 [json_name = "epoch"];
  if (this->_internal_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStoreMapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStoreMapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStoreMapResponse::GetClassData() const { return &_class_data_; }


void GetStoreMapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStoreMapResponse*>(&to_msg);
  auto& from = static_cast<const GetStoreMapResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator.GetStoreMapResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_has_storemap()) {
    _this->_internal_mutable_storemap()->::dingodb::pb::common::StoreMap::MergeFrom(
        from._internal_storemap());
  }
  if (from._internal_epoch() != 0) {
    _this->_internal_set_epoch(from._internal_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStoreMapResponse::CopyFrom(const GetStoreMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator.GetStoreMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreMapResponse::IsInitialized() const {
  return true;
}

void GetStoreMapResponse::InternalSwap(GetStoreMapResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStoreMapResponse, _impl_.epoch_)
      + sizeof(GetStoreMapResponse::_impl_.epoch_)
      - PROTOBUF_FIELD_OFFSET(GetStoreMapResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStoreMapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[7]);
}

// ===================================================================

class CreateStoreRequest::_Internal {
 public:
};

CreateStoreRequest::CreateStoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator.CreateStoreRequest)
}
CreateStoreRequest::CreateStoreRequest(const CreateStoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateStoreRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cluster_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cluster_id_ = from._impl_.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator.CreateStoreRequest)
}

inline void CreateStoreRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cluster_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateStoreRequest::~CreateStoreRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator.CreateStoreRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateStoreRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateStoreRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateStoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator.CreateStoreRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cluster_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateStoreRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cluster_id = 1 [json_name = "clusterId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateStoreRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator.CreateStoreRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1 [json_name = "clusterId"];
  if (this->_internal_cluster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cluster_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator.CreateStoreRequest)
  return target;
}

size_t CreateStoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator.CreateStoreRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cluster_id = 1 [json_name = "clusterId"];
  if (this->_internal_cluster_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cluster_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateStoreRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateStoreRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateStoreRequest::GetClassData() const { return &_class_data_; }


void CreateStoreRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateStoreRequest*>(&to_msg);
  auto& from = static_cast<const CreateStoreRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator.CreateStoreRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cluster_id() != 0) {
    _this->_internal_set_cluster_id(from._internal_cluster_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateStoreRequest::CopyFrom(const CreateStoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator.CreateStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStoreRequest::IsInitialized() const {
  return true;
}

void CreateStoreRequest::InternalSwap(CreateStoreRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.cluster_id_, other->_impl_.cluster_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStoreRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[8]);
}

// ===================================================================

class CreateStoreResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const CreateStoreResponse* msg);
};

const ::dingodb::pb::error::Error&
CreateStoreResponse::_Internal::error(const CreateStoreResponse* msg) {
  return *msg->_impl_.error_;
}
void CreateStoreResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
CreateStoreResponse::CreateStoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.coordinator.CreateStoreResponse)
}
CreateStoreResponse::CreateStoreResponse(const CreateStoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateStoreResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.store_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  _this->_impl_.store_id_ = from._impl_.store_id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.coordinator.CreateStoreResponse)
}

inline void CreateStoreResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.error_){nullptr}
    , decltype(_impl_.store_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateStoreResponse::~CreateStoreResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.coordinator.CreateStoreResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateStoreResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void CreateStoreResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateStoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.coordinator.CreateStoreResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _impl_.store_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateStoreResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 store_id = 2 [json_name = "storeId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.store_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 3 [json_name = "password"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dingodb.pb.coordinator.CreateStoreResponse.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateStoreResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.coordinator.CreateStoreResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // uint64 store_id = 2 [json_name = "storeId"];
  if (this->_internal_store_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_store_id(), target);
  }

  // string password = 3 [json_name = "password"];
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dingodb.pb.coordinator.CreateStoreResponse.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.coordinator.CreateStoreResponse)
  return target;
}

size_t CreateStoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.coordinator.CreateStoreResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 3 [json_name = "password"];
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // uint64 store_id = 2 [json_name = "storeId"];
  if (this->_internal_store_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_store_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateStoreResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateStoreResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateStoreResponse::GetClassData() const { return &_class_data_; }


void CreateStoreResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateStoreResponse*>(&to_msg);
  auto& from = static_cast<const CreateStoreResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.coordinator.CreateStoreResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_store_id() != 0) {
    _this->_internal_set_store_id(from._internal_store_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateStoreResponse::CopyFrom(const CreateStoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.coordinator.CreateStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStoreResponse::IsInitialized() const {
  return true;
}

void CreateStoreResponse::InternalSwap(CreateStoreResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateStoreResponse, _impl_.store_id_)
      + sizeof(CreateStoreResponse::_impl_.store_id_)
      - PROTOBUF_FIELD_OFFSET(CreateStoreResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStoreResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[9]);
}

// ===================================================================

CoordinatorService::~CoordinatorService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* CoordinatorService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_coordinator_2eproto);
  return file_level_service_descriptors_coordinator_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* CoordinatorService::GetDescriptor() {
  return descriptor();
}

void CoordinatorService::Hello(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::coordinator::HelloRequest*,
                         ::dingodb::pb::coordinator::HelloResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Hello() not implemented.");
  done->Run();
}

void CoordinatorService::StoreHeartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::coordinator::StoreHeartbeatRequest*,
                         ::dingodb::pb::coordinator::StoreHeartbeatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StoreHeartbeat() not implemented.");
  done->Run();
}

void CoordinatorService::GetRegionMap(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::coordinator::GetRegionMapRequest*,
                         ::dingodb::pb::coordinator::GetRegionMapResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRegionMap() not implemented.");
  done->Run();
}

void CoordinatorService::GetStoreMap(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::coordinator::GetStoreMapRequest*,
                         ::dingodb::pb::coordinator::GetStoreMapResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetStoreMap() not implemented.");
  done->Run();
}

void CoordinatorService::CreateStore(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::coordinator::CreateStoreRequest*,
                         ::dingodb::pb::coordinator::CreateStoreResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateStore() not implemented.");
  done->Run();
}

void CoordinatorService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_coordinator_2eproto[0]);
  switch(method->index()) {
    case 0:
      Hello(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::coordinator::HelloRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::coordinator::HelloResponse*>(
                 response),
             done);
      break;
    case 1:
      StoreHeartbeat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::coordinator::StoreHeartbeatRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::coordinator::StoreHeartbeatResponse*>(
                 response),
             done);
      break;
    case 2:
      GetRegionMap(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::coordinator::GetRegionMapRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::coordinator::GetRegionMapResponse*>(
                 response),
             done);
      break;
    case 3:
      GetStoreMap(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::coordinator::GetStoreMapRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::coordinator::GetStoreMapResponse*>(
                 response),
             done);
      break;
    case 4:
      CreateStore(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::coordinator::CreateStoreRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::coordinator::CreateStoreResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& CoordinatorService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dingodb::pb::coordinator::HelloRequest::default_instance();
    case 1:
      return ::dingodb::pb::coordinator::StoreHeartbeatRequest::default_instance();
    case 2:
      return ::dingodb::pb::coordinator::GetRegionMapRequest::default_instance();
    case 3:
      return ::dingodb::pb::coordinator::GetStoreMapRequest::default_instance();
    case 4:
      return ::dingodb::pb::coordinator::CreateStoreRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& CoordinatorService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dingodb::pb::coordinator::HelloResponse::default_instance();
    case 1:
      return ::dingodb::pb::coordinator::StoreHeartbeatResponse::default_instance();
    case 2:
      return ::dingodb::pb::coordinator::GetRegionMapResponse::default_instance();
    case 3:
      return ::dingodb::pb::coordinator::GetStoreMapResponse::default_instance();
    case 4:
      return ::dingodb::pb::coordinator::CreateStoreResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

CoordinatorService_Stub::CoordinatorService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CoordinatorService_Stub::CoordinatorService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
CoordinatorService_Stub::~CoordinatorService_Stub() {
  if (owns_channel_) delete channel_;
}

void CoordinatorService_Stub::Hello(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::coordinator::HelloRequest* request,
                              ::dingodb::pb::coordinator::HelloResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void CoordinatorService_Stub::StoreHeartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::coordinator::StoreHeartbeatRequest* request,
                              ::dingodb::pb::coordinator::StoreHeartbeatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void CoordinatorService_Stub::GetRegionMap(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::coordinator::GetRegionMapRequest* request,
                              ::dingodb::pb::coordinator::GetRegionMapResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void CoordinatorService_Stub::GetStoreMap(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::coordinator::GetStoreMapRequest* request,
                              ::dingodb::pb::coordinator::GetStoreMapResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void CoordinatorService_Stub::CreateStore(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::coordinator::CreateStoreRequest* request,
                              ::dingodb::pb::coordinator::CreateStoreResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace coordinator
}  // namespace pb
}  // namespace dingodb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator::StoreHeartbeatRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator::StoreHeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator::StoreHeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator::StoreHeartbeatResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator::StoreHeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator::StoreHeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator::HelloRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator::HelloRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator::HelloRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator::HelloResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator::HelloResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator::HelloResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator::GetRegionMapRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator::GetRegionMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator::GetRegionMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator::GetRegionMapResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator::GetRegionMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator::GetRegionMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator::GetStoreMapRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator::GetStoreMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator::GetStoreMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator::GetStoreMapResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator::GetStoreMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator::GetStoreMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator::CreateStoreRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator::CreateStoreRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator::CreateStoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::coordinator::CreateStoreResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::coordinator::CreateStoreResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::coordinator::CreateStoreResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
