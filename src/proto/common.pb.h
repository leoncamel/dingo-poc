// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace dingodb {
namespace pb {
namespace common {
class Coordinator;
struct CoordinatorDefaultTypeInternal;
extern CoordinatorDefaultTypeInternal _Coordinator_default_instance_;
class CoordinatorMap;
struct CoordinatorMapDefaultTypeInternal;
extern CoordinatorMapDefaultTypeInternal _CoordinatorMap_default_instance_;
class KeyValue;
struct KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Peer;
struct PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class Range;
struct RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class Region;
struct RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class RegionMap;
struct RegionMapDefaultTypeInternal;
extern RegionMapDefaultTypeInternal _RegionMap_default_instance_;
class Store;
struct StoreDefaultTypeInternal;
extern StoreDefaultTypeInternal _Store_default_instance_;
class StoreMap;
struct StoreMapDefaultTypeInternal;
extern StoreMapDefaultTypeInternal _StoreMap_default_instance_;
}  // namespace common
}  // namespace pb
}  // namespace dingodb
PROTOBUF_NAMESPACE_OPEN
template<> ::dingodb::pb::common::Coordinator* Arena::CreateMaybeMessage<::dingodb::pb::common::Coordinator>(Arena*);
template<> ::dingodb::pb::common::CoordinatorMap* Arena::CreateMaybeMessage<::dingodb::pb::common::CoordinatorMap>(Arena*);
template<> ::dingodb::pb::common::KeyValue* Arena::CreateMaybeMessage<::dingodb::pb::common::KeyValue>(Arena*);
template<> ::dingodb::pb::common::Location* Arena::CreateMaybeMessage<::dingodb::pb::common::Location>(Arena*);
template<> ::dingodb::pb::common::Peer* Arena::CreateMaybeMessage<::dingodb::pb::common::Peer>(Arena*);
template<> ::dingodb::pb::common::Range* Arena::CreateMaybeMessage<::dingodb::pb::common::Range>(Arena*);
template<> ::dingodb::pb::common::Region* Arena::CreateMaybeMessage<::dingodb::pb::common::Region>(Arena*);
template<> ::dingodb::pb::common::RegionMap* Arena::CreateMaybeMessage<::dingodb::pb::common::RegionMap>(Arena*);
template<> ::dingodb::pb::common::Store* Arena::CreateMaybeMessage<::dingodb::pb::common::Store>(Arena*);
template<> ::dingodb::pb::common::StoreMap* Arena::CreateMaybeMessage<::dingodb::pb::common::StoreMap>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dingodb {
namespace pb {
namespace common {

enum Engine : int {
  ENG_ROCKSDB = 0,
  ENG_MEMORY = 1,
  ENG_XDP = 2,
  ENG_RAFTSTORE = 3,
  ENG_COLUMNAR = 4,
  Engine_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Engine_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Engine_IsValid(int value);
constexpr Engine Engine_MIN = ENG_ROCKSDB;
constexpr Engine Engine_MAX = ENG_COLUMNAR;
constexpr int Engine_ARRAYSIZE = Engine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Engine_descriptor();
template<typename T>
inline const std::string& Engine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Engine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Engine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Engine_descriptor(), enum_t_value);
}
inline bool Engine_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Engine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Engine>(
    Engine_descriptor(), name, value);
}
enum CoordinatorState : int {
  COORDINATOR_NORMAL = 0,
  COORDINATOR_OFFLINE = 1,
  CoordinatorState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CoordinatorState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CoordinatorState_IsValid(int value);
constexpr CoordinatorState CoordinatorState_MIN = COORDINATOR_NORMAL;
constexpr CoordinatorState CoordinatorState_MAX = COORDINATOR_OFFLINE;
constexpr int CoordinatorState_ARRAYSIZE = CoordinatorState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CoordinatorState_descriptor();
template<typename T>
inline const std::string& CoordinatorState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CoordinatorState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CoordinatorState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CoordinatorState_descriptor(), enum_t_value);
}
inline bool CoordinatorState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CoordinatorState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CoordinatorState>(
    CoordinatorState_descriptor(), name, value);
}
enum StoreState : int {
  STORE_NORMAL = 0,
  STORE_NEW = 1,
  STORE_OFFLINE = 2,
  STORE_OUT = 3,
  StoreState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StoreState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StoreState_IsValid(int value);
constexpr StoreState StoreState_MIN = STORE_NORMAL;
constexpr StoreState StoreState_MAX = STORE_OUT;
constexpr int StoreState_ARRAYSIZE = StoreState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoreState_descriptor();
template<typename T>
inline const std::string& StoreState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StoreState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StoreState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StoreState_descriptor(), enum_t_value);
}
inline bool StoreState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StoreState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StoreState>(
    StoreState_descriptor(), name, value);
}
enum RegionState : int {
  REGION_NORMAL = 0,
  REGION_NEW = 1,
  REGION_DEGRADED = 2,
  REGION_DANGER = 3,
  REGION_EXPAND = 4,
  REGION_EXPANDING = 5,
  REGION_EXPANDED = 6,
  REGION_SHRINK = 7,
  REGION_SHIRINKING = 8,
  REGION_SHRANK = 9,
  REGION_DELETE = 10,
  REGION_DELETING = 11,
  REGION_DELETED = 12,
  RegionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RegionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RegionState_IsValid(int value);
constexpr RegionState RegionState_MIN = REGION_NORMAL;
constexpr RegionState RegionState_MAX = REGION_DELETED;
constexpr int RegionState_ARRAYSIZE = RegionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegionState_descriptor();
template<typename T>
inline const std::string& RegionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegionState_descriptor(), enum_t_value);
}
inline bool RegionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegionState>(
    RegionState_descriptor(), name, value);
}
enum PeerRole : int {
  VOTER = 0,
  LEARNER = 1,
  PeerRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PeerRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PeerRole_IsValid(int value);
constexpr PeerRole PeerRole_MIN = VOTER;
constexpr PeerRole PeerRole_MAX = LEARNER;
constexpr int PeerRole_ARRAYSIZE = PeerRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerRole_descriptor();
template<typename T>
inline const std::string& PeerRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeerRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeerRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeerRole_descriptor(), enum_t_value);
}
inline bool PeerRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeerRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeerRole>(
    PeerRole_descriptor(), name, value);
}
// ===================================================================

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Location& from) {
    Location::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string host = 1 [json_name = "host"];
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // int32 port = 2 [json_name = "port"];
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Range final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.Range) */ {
 public:
  inline Range() : Range(nullptr) {}
  ~Range() override;
  explicit PROTOBUF_CONSTEXPR Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Range(const Range& from);
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline Range& operator=(Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }
  inline void Swap(Range* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Range* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Range& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Range& from) {
    Range::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.Range";
  }
  protected:
  explicit Range(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartKeyFieldNumber = 1,
    kEndKeyFieldNumber = 2,
  };
  // bytes start_key = 1 [json_name = "startKey"];
  void clear_start_key();
  const std::string& start_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_key();
  PROTOBUF_NODISCARD std::string* release_start_key();
  void set_allocated_start_key(std::string* start_key);
  private:
  const std::string& _internal_start_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_key(const std::string& value);
  std::string* _internal_mutable_start_key();
  public:

  // bytes end_key = 2 [json_name = "endKey"];
  void clear_end_key();
  const std::string& end_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end_key();
  PROTOBUF_NODISCARD std::string* release_end_key();
  void set_allocated_end_key(std::string* end_key);
  private:
  const std::string& _internal_end_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end_key(const std::string& value);
  std::string* _internal_mutable_end_key();
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class KeyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  ~KeyValue() override;
  explicit PROTOBUF_CONSTEXPR KeyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyValue& from) {
    KeyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1 [json_name = "key"];
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Coordinator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.Coordinator) */ {
 public:
  inline Coordinator() : Coordinator(nullptr) {}
  ~Coordinator() override;
  explicit PROTOBUF_CONSTEXPR Coordinator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinator(const Coordinator& from);
  Coordinator(Coordinator&& from) noexcept
    : Coordinator() {
    *this = ::std::move(from);
  }

  inline Coordinator& operator=(const Coordinator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinator& operator=(Coordinator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinator* internal_default_instance() {
    return reinterpret_cast<const Coordinator*>(
               &_Coordinator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Coordinator& a, Coordinator& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinator& from) {
    Coordinator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.Coordinator";
  }
  protected:
  explicit Coordinator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceTagFieldNumber = 4,
    kLocationFieldNumber = 3,
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string resource_tag = 4 [json_name = "resourceTag"];
  void clear_resource_tag();
  const std::string& resource_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_tag();
  PROTOBUF_NODISCARD std::string* release_resource_tag();
  void set_allocated_resource_tag(std::string* resource_tag);
  private:
  const std::string& _internal_resource_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_tag(const std::string& value);
  std::string* _internal_mutable_resource_tag();
  public:

  // .dingodb.pb.common.Location location = 3 [json_name = "location"];
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::dingodb::pb::common::Location& location() const;
  PROTOBUF_NODISCARD ::dingodb::pb::common::Location* release_location();
  ::dingodb::pb::common::Location* mutable_location();
  void set_allocated_location(::dingodb::pb::common::Location* location);
  private:
  const ::dingodb::pb::common::Location& _internal_location() const;
  ::dingodb::pb::common::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::dingodb::pb::common::Location* location);
  ::dingodb::pb::common::Location* unsafe_arena_release_location();

  // uint64 id = 1 [json_name = "id"];
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // .dingodb.pb.common.CoordinatorState state = 2 [json_name = "state"];
  void clear_state();
  ::dingodb::pb::common::CoordinatorState state() const;
  void set_state(::dingodb::pb::common::CoordinatorState value);
  private:
  ::dingodb::pb::common::CoordinatorState _internal_state() const;
  void _internal_set_state(::dingodb::pb::common::CoordinatorState value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.Coordinator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_tag_;
    ::dingodb::pb::common::Location* location_;
    uint64_t id_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CoordinatorMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.CoordinatorMap) */ {
 public:
  inline CoordinatorMap() : CoordinatorMap(nullptr) {}
  ~CoordinatorMap() override;
  explicit PROTOBUF_CONSTEXPR CoordinatorMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoordinatorMap(const CoordinatorMap& from);
  CoordinatorMap(CoordinatorMap&& from) noexcept
    : CoordinatorMap() {
    *this = ::std::move(from);
  }

  inline CoordinatorMap& operator=(const CoordinatorMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinatorMap& operator=(CoordinatorMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordinatorMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoordinatorMap* internal_default_instance() {
    return reinterpret_cast<const CoordinatorMap*>(
               &_CoordinatorMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CoordinatorMap& a, CoordinatorMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinatorMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordinatorMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoordinatorMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CoordinatorMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoordinatorMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CoordinatorMap& from) {
    CoordinatorMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinatorMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.CoordinatorMap";
  }
  protected:
  explicit CoordinatorMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatorsFieldNumber = 2,
    kEpochFieldNumber = 1,
  };
  // repeated .dingodb.pb.common.Coordinator coordinators = 2 [json_name = "coordinators"];
  int coordinators_size() const;
  private:
  int _internal_coordinators_size() const;
  public:
  void clear_coordinators();
  ::dingodb::pb::common::Coordinator* mutable_coordinators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Coordinator >*
      mutable_coordinators();
  private:
  const ::dingodb::pb::common::Coordinator& _internal_coordinators(int index) const;
  ::dingodb::pb::common::Coordinator* _internal_add_coordinators();
  public:
  const ::dingodb::pb::common::Coordinator& coordinators(int index) const;
  ::dingodb::pb::common::Coordinator* add_coordinators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Coordinator >&
      coordinators() const;

  // uint64 epoch = 1 [json_name = "epoch"];
  void clear_epoch();
  uint64_t epoch() const;
  void set_epoch(uint64_t value);
  private:
  uint64_t _internal_epoch() const;
  void _internal_set_epoch(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.CoordinatorMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Coordinator > coordinators_;
    uint64_t epoch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Store final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.Store) */ {
 public:
  inline Store() : Store(nullptr) {}
  ~Store() override;
  explicit PROTOBUF_CONSTEXPR Store(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Store(const Store& from);
  Store(Store&& from) noexcept
    : Store() {
    *this = ::std::move(from);
  }

  inline Store& operator=(const Store& from) {
    CopyFrom(from);
    return *this;
  }
  inline Store& operator=(Store&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Store& default_instance() {
    return *internal_default_instance();
  }
  static inline const Store* internal_default_instance() {
    return reinterpret_cast<const Store*>(
               &_Store_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Store& a, Store& b) {
    a.Swap(&b);
  }
  inline void Swap(Store* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Store* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Store* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Store>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Store& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Store& from) {
    Store::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Store* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.Store";
  }
  protected:
  explicit Store(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceTagFieldNumber = 6,
    kServerLocationFieldNumber = 4,
    kRaftLocationFieldNumber = 5,
    kIdFieldNumber = 1,
    kEpochFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // string resource_tag = 6 [json_name = "resourceTag"];
  void clear_resource_tag();
  const std::string& resource_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_tag();
  PROTOBUF_NODISCARD std::string* release_resource_tag();
  void set_allocated_resource_tag(std::string* resource_tag);
  private:
  const std::string& _internal_resource_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_tag(const std::string& value);
  std::string* _internal_mutable_resource_tag();
  public:

  // .dingodb.pb.common.Location server_location = 4 [json_name = "serverLocation"];
  bool has_server_location() const;
  private:
  bool _internal_has_server_location() const;
  public:
  void clear_server_location();
  const ::dingodb::pb::common::Location& server_location() const;
  PROTOBUF_NODISCARD ::dingodb::pb::common::Location* release_server_location();
  ::dingodb::pb::common::Location* mutable_server_location();
  void set_allocated_server_location(::dingodb::pb::common::Location* server_location);
  private:
  const ::dingodb::pb::common::Location& _internal_server_location() const;
  ::dingodb::pb::common::Location* _internal_mutable_server_location();
  public:
  void unsafe_arena_set_allocated_server_location(
      ::dingodb::pb::common::Location* server_location);
  ::dingodb::pb::common::Location* unsafe_arena_release_server_location();

  // .dingodb.pb.common.Location raft_location = 5 [json_name = "raftLocation"];
  bool has_raft_location() const;
  private:
  bool _internal_has_raft_location() const;
  public:
  void clear_raft_location();
  const ::dingodb::pb::common::Location& raft_location() const;
  PROTOBUF_NODISCARD ::dingodb::pb::common::Location* release_raft_location();
  ::dingodb::pb::common::Location* mutable_raft_location();
  void set_allocated_raft_location(::dingodb::pb::common::Location* raft_location);
  private:
  const ::dingodb::pb::common::Location& _internal_raft_location() const;
  ::dingodb::pb::common::Location* _internal_mutable_raft_location();
  public:
  void unsafe_arena_set_allocated_raft_location(
      ::dingodb::pb::common::Location* raft_location);
  ::dingodb::pb::common::Location* unsafe_arena_release_raft_location();

  // uint64 id = 1 [json_name = "id"];
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 epoch = 2 [json_name = "epoch"];
  void clear_epoch();
  uint64_t epoch() const;
  void set_epoch(uint64_t value);
  private:
  uint64_t _internal_epoch() const;
  void _internal_set_epoch(uint64_t value);
  public:

  // .dingodb.pb.common.StoreState state = 3 [json_name = "state"];
  void clear_state();
  ::dingodb::pb::common::StoreState state() const;
  void set_state(::dingodb::pb::common::StoreState value);
  private:
  ::dingodb::pb::common::StoreState _internal_state() const;
  void _internal_set_state(::dingodb::pb::common::StoreState value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.Store)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_tag_;
    ::dingodb::pb::common::Location* server_location_;
    ::dingodb::pb::common::Location* raft_location_;
    uint64_t id_;
    uint64_t epoch_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class StoreMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.StoreMap) */ {
 public:
  inline StoreMap() : StoreMap(nullptr) {}
  ~StoreMap() override;
  explicit PROTOBUF_CONSTEXPR StoreMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreMap(const StoreMap& from);
  StoreMap(StoreMap&& from) noexcept
    : StoreMap() {
    *this = ::std::move(from);
  }

  inline StoreMap& operator=(const StoreMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreMap& operator=(StoreMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreMap* internal_default_instance() {
    return reinterpret_cast<const StoreMap*>(
               &_StoreMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StoreMap& a, StoreMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoreMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoreMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StoreMap& from) {
    StoreMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.StoreMap";
  }
  protected:
  explicit StoreMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoresFieldNumber = 2,
    kEpochFieldNumber = 1,
  };
  // repeated .dingodb.pb.common.Store stores = 2 [json_name = "stores"];
  int stores_size() const;
  private:
  int _internal_stores_size() const;
  public:
  void clear_stores();
  ::dingodb::pb::common::Store* mutable_stores(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Store >*
      mutable_stores();
  private:
  const ::dingodb::pb::common::Store& _internal_stores(int index) const;
  ::dingodb::pb::common::Store* _internal_add_stores();
  public:
  const ::dingodb::pb::common::Store& stores(int index) const;
  ::dingodb::pb::common::Store* add_stores();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Store >&
      stores() const;

  // uint64 epoch = 1 [json_name = "epoch"];
  void clear_epoch();
  uint64_t epoch() const;
  void set_epoch(uint64_t value);
  private:
  uint64_t _internal_epoch() const;
  void _internal_set_epoch(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.StoreMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Store > stores_;
    uint64_t epoch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Peer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.Peer) */ {
 public:
  inline Peer() : Peer(nullptr) {}
  ~Peer() override;
  explicit PROTOBUF_CONSTEXPR Peer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Peer(const Peer& from);
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Peer& operator=(Peer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Peer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(Peer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Peer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Peer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Peer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Peer& from) {
    Peer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.Peer";
  }
  protected:
  explicit Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerLocationFieldNumber = 3,
    kRaftLocationFieldNumber = 4,
    kStoreIdFieldNumber = 1,
    kRoleFieldNumber = 2,
  };
  // .dingodb.pb.common.Location server_location = 3 [json_name = "serverLocation"];
  bool has_server_location() const;
  private:
  bool _internal_has_server_location() const;
  public:
  void clear_server_location();
  const ::dingodb::pb::common::Location& server_location() const;
  PROTOBUF_NODISCARD ::dingodb::pb::common::Location* release_server_location();
  ::dingodb::pb::common::Location* mutable_server_location();
  void set_allocated_server_location(::dingodb::pb::common::Location* server_location);
  private:
  const ::dingodb::pb::common::Location& _internal_server_location() const;
  ::dingodb::pb::common::Location* _internal_mutable_server_location();
  public:
  void unsafe_arena_set_allocated_server_location(
      ::dingodb::pb::common::Location* server_location);
  ::dingodb::pb::common::Location* unsafe_arena_release_server_location();

  // .dingodb.pb.common.Location raft_location = 4 [json_name = "raftLocation"];
  bool has_raft_location() const;
  private:
  bool _internal_has_raft_location() const;
  public:
  void clear_raft_location();
  const ::dingodb::pb::common::Location& raft_location() const;
  PROTOBUF_NODISCARD ::dingodb::pb::common::Location* release_raft_location();
  ::dingodb::pb::common::Location* mutable_raft_location();
  void set_allocated_raft_location(::dingodb::pb::common::Location* raft_location);
  private:
  const ::dingodb::pb::common::Location& _internal_raft_location() const;
  ::dingodb::pb::common::Location* _internal_mutable_raft_location();
  public:
  void unsafe_arena_set_allocated_raft_location(
      ::dingodb::pb::common::Location* raft_location);
  ::dingodb::pb::common::Location* unsafe_arena_release_raft_location();

  // uint64 store_id = 1 [json_name = "storeId"];
  void clear_store_id();
  uint64_t store_id() const;
  void set_store_id(uint64_t value);
  private:
  uint64_t _internal_store_id() const;
  void _internal_set_store_id(uint64_t value);
  public:

  // .dingodb.pb.common.PeerRole role = 2 [json_name = "role"];
  void clear_role();
  ::dingodb::pb::common::PeerRole role() const;
  void set_role(::dingodb::pb::common::PeerRole value);
  private:
  ::dingodb::pb::common::PeerRole _internal_role() const;
  void _internal_set_role(::dingodb::pb::common::PeerRole value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.Peer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dingodb::pb::common::Location* server_location_;
    ::dingodb::pb::common::Location* raft_location_;
    uint64_t store_id_;
    int role_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Region final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.Region) */ {
 public:
  inline Region() : Region(nullptr) {}
  ~Region() override;
  explicit PROTOBUF_CONSTEXPR Region(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Region(const Region& from);
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline Region& operator=(Region&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Region& default_instance() {
    return *internal_default_instance();
  }
  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }
  inline void Swap(Region* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Region* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Region>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Region& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Region& from) {
    Region::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Region* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.Region";
  }
  protected:
  explicit Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 6,
    kNameFieldNumber = 3,
    kRangeFieldNumber = 7,
    kIdFieldNumber = 1,
    kEpochFieldNumber = 2,
    kLeaderStoreIdFieldNumber = 5,
    kSchemaIdFieldNumber = 8,
    kTableIdFieldNumber = 9,
    kCreateTimestampFieldNumber = 10,
    kStateFieldNumber = 4,
  };
  // repeated .dingodb.pb.common.Peer peers = 6 [json_name = "peers"];
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::dingodb::pb::common::Peer* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Peer >*
      mutable_peers();
  private:
  const ::dingodb::pb::common::Peer& _internal_peers(int index) const;
  ::dingodb::pb::common::Peer* _internal_add_peers();
  public:
  const ::dingodb::pb::common::Peer& peers(int index) const;
  ::dingodb::pb::common::Peer* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Peer >&
      peers() const;

  // string name = 3 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .dingodb.pb.common.Range range = 7 [json_name = "range"];
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::dingodb::pb::common::Range& range() const;
  PROTOBUF_NODISCARD ::dingodb::pb::common::Range* release_range();
  ::dingodb::pb::common::Range* mutable_range();
  void set_allocated_range(::dingodb::pb::common::Range* range);
  private:
  const ::dingodb::pb::common::Range& _internal_range() const;
  ::dingodb::pb::common::Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::dingodb::pb::common::Range* range);
  ::dingodb::pb::common::Range* unsafe_arena_release_range();

  // uint64 id = 1 [json_name = "id"];
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint64 epoch = 2 [json_name = "epoch"];
  void clear_epoch();
  uint64_t epoch() const;
  void set_epoch(uint64_t value);
  private:
  uint64_t _internal_epoch() const;
  void _internal_set_epoch(uint64_t value);
  public:

  // int64 leader_store_id = 5 [json_name = "leaderStoreId"];
  void clear_leader_store_id();
  int64_t leader_store_id() const;
  void set_leader_store_id(int64_t value);
  private:
  int64_t _internal_leader_store_id() const;
  void _internal_set_leader_store_id(int64_t value);
  public:

  // uint64 schema_id = 8 [json_name = "schemaId"];
  void clear_schema_id();
  uint64_t schema_id() const;
  void set_schema_id(uint64_t value);
  private:
  uint64_t _internal_schema_id() const;
  void _internal_set_schema_id(uint64_t value);
  public:

  // uint64 table_id = 9 [json_name = "tableId"];
  void clear_table_id();
  uint64_t table_id() const;
  void set_table_id(uint64_t value);
  private:
  uint64_t _internal_table_id() const;
  void _internal_set_table_id(uint64_t value);
  public:

  // uint64 create_timestamp = 10 [json_name = "createTimestamp"];
  void clear_create_timestamp();
  uint64_t create_timestamp() const;
  void set_create_timestamp(uint64_t value);
  private:
  uint64_t _internal_create_timestamp() const;
  void _internal_set_create_timestamp(uint64_t value);
  public:

  // .dingodb.pb.common.RegionState state = 4 [json_name = "state"];
  void clear_state();
  ::dingodb::pb::common::RegionState state() const;
  void set_state(::dingodb::pb::common::RegionState value);
  private:
  ::dingodb::pb::common::RegionState _internal_state() const;
  void _internal_set_state(::dingodb::pb::common::RegionState value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.Region)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Peer > peers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::dingodb::pb::common::Range* range_;
    uint64_t id_;
    uint64_t epoch_;
    int64_t leader_store_id_;
    uint64_t schema_id_;
    uint64_t table_id_;
    uint64_t create_timestamp_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RegionMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dingodb.pb.common.RegionMap) */ {
 public:
  inline RegionMap() : RegionMap(nullptr) {}
  ~RegionMap() override;
  explicit PROTOBUF_CONSTEXPR RegionMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionMap(const RegionMap& from);
  RegionMap(RegionMap&& from) noexcept
    : RegionMap() {
    *this = ::std::move(from);
  }

  inline RegionMap& operator=(const RegionMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionMap& operator=(RegionMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionMap* internal_default_instance() {
    return reinterpret_cast<const RegionMap*>(
               &_RegionMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RegionMap& a, RegionMap& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegionMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegionMap& from) {
    RegionMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dingodb.pb.common.RegionMap";
  }
  protected:
  explicit RegionMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionsFieldNumber = 2,
    kEpochFieldNumber = 1,
  };
  // repeated .dingodb.pb.common.Region regions = 2 [json_name = "regions"];
  int regions_size() const;
  private:
  int _internal_regions_size() const;
  public:
  void clear_regions();
  ::dingodb::pb::common::Region* mutable_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Region >*
      mutable_regions();
  private:
  const ::dingodb::pb::common::Region& _internal_regions(int index) const;
  ::dingodb::pb::common::Region* _internal_add_regions();
  public:
  const ::dingodb::pb::common::Region& regions(int index) const;
  ::dingodb::pb::common::Region* add_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Region >&
      regions() const;

  // uint64 epoch = 1 [json_name = "epoch"];
  void clear_epoch();
  uint64_t epoch() const;
  void set_epoch(uint64_t value);
  private:
  uint64_t _internal_epoch() const;
  void _internal_set_epoch(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dingodb.pb.common.RegionMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Region > regions_;
    uint64_t epoch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// string host = 1 [json_name = "host"];
inline void Location::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& Location::host() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Location.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Location::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Location.host)
}
inline std::string* Location::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Location.host)
  return _s;
}
inline const std::string& Location::_internal_host() const {
  return _impl_.host_.Get();
}
inline void Location::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* Location::release_host() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Location.host)
  return _impl_.host_.Release();
}
inline void Location::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Location.host)
}

// int32 port = 2 [json_name = "port"];
inline void Location::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t Location::_internal_port() const {
  return _impl_.port_;
}
inline int32_t Location::port() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Location.port)
  return _internal_port();
}
inline void Location::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void Location::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Location.port)
}

// -------------------------------------------------------------------

// Range

// bytes start_key = 1 [json_name = "startKey"];
inline void Range::clear_start_key() {
  _impl_.start_key_.ClearToEmpty();
}
inline const std::string& Range::start_key() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Range.start_key)
  return _internal_start_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Range::set_start_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.start_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Range.start_key)
}
inline std::string* Range::mutable_start_key() {
  std::string* _s = _internal_mutable_start_key();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Range.start_key)
  return _s;
}
inline const std::string& Range::_internal_start_key() const {
  return _impl_.start_key_.Get();
}
inline void Range::_internal_set_start_key(const std::string& value) {
  
  _impl_.start_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_start_key() {
  
  return _impl_.start_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Range::release_start_key() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Range.start_key)
  return _impl_.start_key_.Release();
}
inline void Range::set_allocated_start_key(std::string* start_key) {
  if (start_key != nullptr) {
    
  } else {
    
  }
  _impl_.start_key_.SetAllocated(start_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.start_key_.IsDefault()) {
    _impl_.start_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Range.start_key)
}

// bytes end_key = 2 [json_name = "endKey"];
inline void Range::clear_end_key() {
  _impl_.end_key_.ClearToEmpty();
}
inline const std::string& Range::end_key() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Range.end_key)
  return _internal_end_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Range::set_end_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.end_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Range.end_key)
}
inline std::string* Range::mutable_end_key() {
  std::string* _s = _internal_mutable_end_key();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Range.end_key)
  return _s;
}
inline const std::string& Range::_internal_end_key() const {
  return _impl_.end_key_.Get();
}
inline void Range::_internal_set_end_key(const std::string& value) {
  
  _impl_.end_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Range::_internal_mutable_end_key() {
  
  return _impl_.end_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Range::release_end_key() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Range.end_key)
  return _impl_.end_key_.Release();
}
inline void Range::set_allocated_end_key(std::string* end_key) {
  if (end_key != nullptr) {
    
  } else {
    
  }
  _impl_.end_key_.SetAllocated(end_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.end_key_.IsDefault()) {
    _impl_.end_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Range.end_key)
}

// -------------------------------------------------------------------

// KeyValue

// bytes key = 1 [json_name = "key"];
inline void KeyValue::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.KeyValue.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyValue::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.common.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.KeyValue.key)
  return _s;
}
inline const std::string& KeyValue::_internal_key() const {
  return _impl_.key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyValue::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.KeyValue.key)
  return _impl_.key_.Release();
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.KeyValue.key)
}

// bytes value = 2 [json_name = "value"];
inline void KeyValue::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.KeyValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyValue::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.common.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.KeyValue.value)
  return _s;
}
inline const std::string& KeyValue::_internal_value() const {
  return _impl_.value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyValue::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.KeyValue.value)
  return _impl_.value_.Release();
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.KeyValue.value)
}

// -------------------------------------------------------------------

// Coordinator

// uint64 id = 1 [json_name = "id"];
inline void Coordinator::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Coordinator::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Coordinator::id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Coordinator.id)
  return _internal_id();
}
inline void Coordinator::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Coordinator::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Coordinator.id)
}

// .dingodb.pb.common.CoordinatorState state = 2 [json_name = "state"];
inline void Coordinator::clear_state() {
  _impl_.state_ = 0;
}
inline ::dingodb::pb::common::CoordinatorState Coordinator::_internal_state() const {
  return static_cast< ::dingodb::pb::common::CoordinatorState >(_impl_.state_);
}
inline ::dingodb::pb::common::CoordinatorState Coordinator::state() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Coordinator.state)
  return _internal_state();
}
inline void Coordinator::_internal_set_state(::dingodb::pb::common::CoordinatorState value) {
  
  _impl_.state_ = value;
}
inline void Coordinator::set_state(::dingodb::pb::common::CoordinatorState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Coordinator.state)
}

// .dingodb.pb.common.Location location = 3 [json_name = "location"];
inline bool Coordinator::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool Coordinator::has_location() const {
  return _internal_has_location();
}
inline void Coordinator::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::dingodb::pb::common::Location& Coordinator::_internal_location() const {
  const ::dingodb::pb::common::Location* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::common::Location&>(
      ::dingodb::pb::common::_Location_default_instance_);
}
inline const ::dingodb::pb::common::Location& Coordinator::location() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Coordinator.location)
  return _internal_location();
}
inline void Coordinator::unsafe_arena_set_allocated_location(
    ::dingodb::pb::common::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.common.Coordinator.location)
}
inline ::dingodb::pb::common::Location* Coordinator::release_location() {
  
  ::dingodb::pb::common::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::common::Location* Coordinator::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Coordinator.location)
  
  ::dingodb::pb::common::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::dingodb::pb::common::Location* Coordinator::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::common::Location>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::dingodb::pb::common::Location* Coordinator::mutable_location() {
  ::dingodb::pb::common::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Coordinator.location)
  return _msg;
}
inline void Coordinator::set_allocated_location(::dingodb::pb::common::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Coordinator.location)
}

// string resource_tag = 4 [json_name = "resourceTag"];
inline void Coordinator::clear_resource_tag() {
  _impl_.resource_tag_.ClearToEmpty();
}
inline const std::string& Coordinator::resource_tag() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Coordinator.resource_tag)
  return _internal_resource_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Coordinator::set_resource_tag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Coordinator.resource_tag)
}
inline std::string* Coordinator::mutable_resource_tag() {
  std::string* _s = _internal_mutable_resource_tag();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Coordinator.resource_tag)
  return _s;
}
inline const std::string& Coordinator::_internal_resource_tag() const {
  return _impl_.resource_tag_.Get();
}
inline void Coordinator::_internal_set_resource_tag(const std::string& value) {
  
  _impl_.resource_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* Coordinator::_internal_mutable_resource_tag() {
  
  return _impl_.resource_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* Coordinator::release_resource_tag() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Coordinator.resource_tag)
  return _impl_.resource_tag_.Release();
}
inline void Coordinator::set_allocated_resource_tag(std::string* resource_tag) {
  if (resource_tag != nullptr) {
    
  } else {
    
  }
  _impl_.resource_tag_.SetAllocated(resource_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_tag_.IsDefault()) {
    _impl_.resource_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Coordinator.resource_tag)
}

// -------------------------------------------------------------------

// CoordinatorMap

// uint64 epoch = 1 [json_name = "epoch"];
inline void CoordinatorMap::clear_epoch() {
  _impl_.epoch_ = uint64_t{0u};
}
inline uint64_t CoordinatorMap::_internal_epoch() const {
  return _impl_.epoch_;
}
inline uint64_t CoordinatorMap::epoch() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.CoordinatorMap.epoch)
  return _internal_epoch();
}
inline void CoordinatorMap::_internal_set_epoch(uint64_t value) {
  
  _impl_.epoch_ = value;
}
inline void CoordinatorMap::set_epoch(uint64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.CoordinatorMap.epoch)
}

// repeated .dingodb.pb.common.Coordinator coordinators = 2 [json_name = "coordinators"];
inline int CoordinatorMap::_internal_coordinators_size() const {
  return _impl_.coordinators_.size();
}
inline int CoordinatorMap::coordinators_size() const {
  return _internal_coordinators_size();
}
inline void CoordinatorMap::clear_coordinators() {
  _impl_.coordinators_.Clear();
}
inline ::dingodb::pb::common::Coordinator* CoordinatorMap::mutable_coordinators(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.CoordinatorMap.coordinators)
  return _impl_.coordinators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Coordinator >*
CoordinatorMap::mutable_coordinators() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.common.CoordinatorMap.coordinators)
  return &_impl_.coordinators_;
}
inline const ::dingodb::pb::common::Coordinator& CoordinatorMap::_internal_coordinators(int index) const {
  return _impl_.coordinators_.Get(index);
}
inline const ::dingodb::pb::common::Coordinator& CoordinatorMap::coordinators(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.CoordinatorMap.coordinators)
  return _internal_coordinators(index);
}
inline ::dingodb::pb::common::Coordinator* CoordinatorMap::_internal_add_coordinators() {
  return _impl_.coordinators_.Add();
}
inline ::dingodb::pb::common::Coordinator* CoordinatorMap::add_coordinators() {
  ::dingodb::pb::common::Coordinator* _add = _internal_add_coordinators();
  // @@protoc_insertion_point(field_add:dingodb.pb.common.CoordinatorMap.coordinators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Coordinator >&
CoordinatorMap::coordinators() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.common.CoordinatorMap.coordinators)
  return _impl_.coordinators_;
}

// -------------------------------------------------------------------

// Store

// uint64 id = 1 [json_name = "id"];
inline void Store::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Store::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Store::id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Store.id)
  return _internal_id();
}
inline void Store::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Store::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Store.id)
}

// uint64 epoch = 2 [json_name = "epoch"];
inline void Store::clear_epoch() {
  _impl_.epoch_ = uint64_t{0u};
}
inline uint64_t Store::_internal_epoch() const {
  return _impl_.epoch_;
}
inline uint64_t Store::epoch() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Store.epoch)
  return _internal_epoch();
}
inline void Store::_internal_set_epoch(uint64_t value) {
  
  _impl_.epoch_ = value;
}
inline void Store::set_epoch(uint64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Store.epoch)
}

// .dingodb.pb.common.StoreState state = 3 [json_name = "state"];
inline void Store::clear_state() {
  _impl_.state_ = 0;
}
inline ::dingodb::pb::common::StoreState Store::_internal_state() const {
  return static_cast< ::dingodb::pb::common::StoreState >(_impl_.state_);
}
inline ::dingodb::pb::common::StoreState Store::state() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Store.state)
  return _internal_state();
}
inline void Store::_internal_set_state(::dingodb::pb::common::StoreState value) {
  
  _impl_.state_ = value;
}
inline void Store::set_state(::dingodb::pb::common::StoreState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Store.state)
}

// .dingodb.pb.common.Location server_location = 4 [json_name = "serverLocation"];
inline bool Store::_internal_has_server_location() const {
  return this != internal_default_instance() && _impl_.server_location_ != nullptr;
}
inline bool Store::has_server_location() const {
  return _internal_has_server_location();
}
inline void Store::clear_server_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_location_ != nullptr) {
    delete _impl_.server_location_;
  }
  _impl_.server_location_ = nullptr;
}
inline const ::dingodb::pb::common::Location& Store::_internal_server_location() const {
  const ::dingodb::pb::common::Location* p = _impl_.server_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::common::Location&>(
      ::dingodb::pb::common::_Location_default_instance_);
}
inline const ::dingodb::pb::common::Location& Store::server_location() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Store.server_location)
  return _internal_server_location();
}
inline void Store::unsafe_arena_set_allocated_server_location(
    ::dingodb::pb::common::Location* server_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_location_);
  }
  _impl_.server_location_ = server_location;
  if (server_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.common.Store.server_location)
}
inline ::dingodb::pb::common::Location* Store::release_server_location() {
  
  ::dingodb::pb::common::Location* temp = _impl_.server_location_;
  _impl_.server_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::common::Location* Store::unsafe_arena_release_server_location() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Store.server_location)
  
  ::dingodb::pb::common::Location* temp = _impl_.server_location_;
  _impl_.server_location_ = nullptr;
  return temp;
}
inline ::dingodb::pb::common::Location* Store::_internal_mutable_server_location() {
  
  if (_impl_.server_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::common::Location>(GetArenaForAllocation());
    _impl_.server_location_ = p;
  }
  return _impl_.server_location_;
}
inline ::dingodb::pb::common::Location* Store::mutable_server_location() {
  ::dingodb::pb::common::Location* _msg = _internal_mutable_server_location();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Store.server_location)
  return _msg;
}
inline void Store::set_allocated_server_location(::dingodb::pb::common::Location* server_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.server_location_;
  }
  if (server_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(server_location);
    if (message_arena != submessage_arena) {
      server_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.server_location_ = server_location;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Store.server_location)
}

// .dingodb.pb.common.Location raft_location = 5 [json_name = "raftLocation"];
inline bool Store::_internal_has_raft_location() const {
  return this != internal_default_instance() && _impl_.raft_location_ != nullptr;
}
inline bool Store::has_raft_location() const {
  return _internal_has_raft_location();
}
inline void Store::clear_raft_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.raft_location_ != nullptr) {
    delete _impl_.raft_location_;
  }
  _impl_.raft_location_ = nullptr;
}
inline const ::dingodb::pb::common::Location& Store::_internal_raft_location() const {
  const ::dingodb::pb::common::Location* p = _impl_.raft_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::common::Location&>(
      ::dingodb::pb::common::_Location_default_instance_);
}
inline const ::dingodb::pb::common::Location& Store::raft_location() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Store.raft_location)
  return _internal_raft_location();
}
inline void Store::unsafe_arena_set_allocated_raft_location(
    ::dingodb::pb::common::Location* raft_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raft_location_);
  }
  _impl_.raft_location_ = raft_location;
  if (raft_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.common.Store.raft_location)
}
inline ::dingodb::pb::common::Location* Store::release_raft_location() {
  
  ::dingodb::pb::common::Location* temp = _impl_.raft_location_;
  _impl_.raft_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::common::Location* Store::unsafe_arena_release_raft_location() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Store.raft_location)
  
  ::dingodb::pb::common::Location* temp = _impl_.raft_location_;
  _impl_.raft_location_ = nullptr;
  return temp;
}
inline ::dingodb::pb::common::Location* Store::_internal_mutable_raft_location() {
  
  if (_impl_.raft_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::common::Location>(GetArenaForAllocation());
    _impl_.raft_location_ = p;
  }
  return _impl_.raft_location_;
}
inline ::dingodb::pb::common::Location* Store::mutable_raft_location() {
  ::dingodb::pb::common::Location* _msg = _internal_mutable_raft_location();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Store.raft_location)
  return _msg;
}
inline void Store::set_allocated_raft_location(::dingodb::pb::common::Location* raft_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.raft_location_;
  }
  if (raft_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raft_location);
    if (message_arena != submessage_arena) {
      raft_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.raft_location_ = raft_location;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Store.raft_location)
}

// string resource_tag = 6 [json_name = "resourceTag"];
inline void Store::clear_resource_tag() {
  _impl_.resource_tag_.ClearToEmpty();
}
inline const std::string& Store::resource_tag() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Store.resource_tag)
  return _internal_resource_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Store::set_resource_tag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resource_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Store.resource_tag)
}
inline std::string* Store::mutable_resource_tag() {
  std::string* _s = _internal_mutable_resource_tag();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Store.resource_tag)
  return _s;
}
inline const std::string& Store::_internal_resource_tag() const {
  return _impl_.resource_tag_.Get();
}
inline void Store::_internal_set_resource_tag(const std::string& value) {
  
  _impl_.resource_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* Store::_internal_mutable_resource_tag() {
  
  return _impl_.resource_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* Store::release_resource_tag() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Store.resource_tag)
  return _impl_.resource_tag_.Release();
}
inline void Store::set_allocated_resource_tag(std::string* resource_tag) {
  if (resource_tag != nullptr) {
    
  } else {
    
  }
  _impl_.resource_tag_.SetAllocated(resource_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_tag_.IsDefault()) {
    _impl_.resource_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Store.resource_tag)
}

// -------------------------------------------------------------------

// StoreMap

// uint64 epoch = 1 [json_name = "epoch"];
inline void StoreMap::clear_epoch() {
  _impl_.epoch_ = uint64_t{0u};
}
inline uint64_t StoreMap::_internal_epoch() const {
  return _impl_.epoch_;
}
inline uint64_t StoreMap::epoch() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.StoreMap.epoch)
  return _internal_epoch();
}
inline void StoreMap::_internal_set_epoch(uint64_t value) {
  
  _impl_.epoch_ = value;
}
inline void StoreMap::set_epoch(uint64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.StoreMap.epoch)
}

// repeated .dingodb.pb.common.Store stores = 2 [json_name = "stores"];
inline int StoreMap::_internal_stores_size() const {
  return _impl_.stores_.size();
}
inline int StoreMap::stores_size() const {
  return _internal_stores_size();
}
inline void StoreMap::clear_stores() {
  _impl_.stores_.Clear();
}
inline ::dingodb::pb::common::Store* StoreMap::mutable_stores(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.StoreMap.stores)
  return _impl_.stores_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Store >*
StoreMap::mutable_stores() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.common.StoreMap.stores)
  return &_impl_.stores_;
}
inline const ::dingodb::pb::common::Store& StoreMap::_internal_stores(int index) const {
  return _impl_.stores_.Get(index);
}
inline const ::dingodb::pb::common::Store& StoreMap::stores(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.StoreMap.stores)
  return _internal_stores(index);
}
inline ::dingodb::pb::common::Store* StoreMap::_internal_add_stores() {
  return _impl_.stores_.Add();
}
inline ::dingodb::pb::common::Store* StoreMap::add_stores() {
  ::dingodb::pb::common::Store* _add = _internal_add_stores();
  // @@protoc_insertion_point(field_add:dingodb.pb.common.StoreMap.stores)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Store >&
StoreMap::stores() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.common.StoreMap.stores)
  return _impl_.stores_;
}

// -------------------------------------------------------------------

// Peer

// uint64 store_id = 1 [json_name = "storeId"];
inline void Peer::clear_store_id() {
  _impl_.store_id_ = uint64_t{0u};
}
inline uint64_t Peer::_internal_store_id() const {
  return _impl_.store_id_;
}
inline uint64_t Peer::store_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Peer.store_id)
  return _internal_store_id();
}
inline void Peer::_internal_set_store_id(uint64_t value) {
  
  _impl_.store_id_ = value;
}
inline void Peer::set_store_id(uint64_t value) {
  _internal_set_store_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Peer.store_id)
}

// .dingodb.pb.common.PeerRole role = 2 [json_name = "role"];
inline void Peer::clear_role() {
  _impl_.role_ = 0;
}
inline ::dingodb::pb::common::PeerRole Peer::_internal_role() const {
  return static_cast< ::dingodb::pb::common::PeerRole >(_impl_.role_);
}
inline ::dingodb::pb::common::PeerRole Peer::role() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Peer.role)
  return _internal_role();
}
inline void Peer::_internal_set_role(::dingodb::pb::common::PeerRole value) {
  
  _impl_.role_ = value;
}
inline void Peer::set_role(::dingodb::pb::common::PeerRole value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Peer.role)
}

// .dingodb.pb.common.Location server_location = 3 [json_name = "serverLocation"];
inline bool Peer::_internal_has_server_location() const {
  return this != internal_default_instance() && _impl_.server_location_ != nullptr;
}
inline bool Peer::has_server_location() const {
  return _internal_has_server_location();
}
inline void Peer::clear_server_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_location_ != nullptr) {
    delete _impl_.server_location_;
  }
  _impl_.server_location_ = nullptr;
}
inline const ::dingodb::pb::common::Location& Peer::_internal_server_location() const {
  const ::dingodb::pb::common::Location* p = _impl_.server_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::common::Location&>(
      ::dingodb::pb::common::_Location_default_instance_);
}
inline const ::dingodb::pb::common::Location& Peer::server_location() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Peer.server_location)
  return _internal_server_location();
}
inline void Peer::unsafe_arena_set_allocated_server_location(
    ::dingodb::pb::common::Location* server_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_location_);
  }
  _impl_.server_location_ = server_location;
  if (server_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.common.Peer.server_location)
}
inline ::dingodb::pb::common::Location* Peer::release_server_location() {
  
  ::dingodb::pb::common::Location* temp = _impl_.server_location_;
  _impl_.server_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::common::Location* Peer::unsafe_arena_release_server_location() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Peer.server_location)
  
  ::dingodb::pb::common::Location* temp = _impl_.server_location_;
  _impl_.server_location_ = nullptr;
  return temp;
}
inline ::dingodb::pb::common::Location* Peer::_internal_mutable_server_location() {
  
  if (_impl_.server_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::common::Location>(GetArenaForAllocation());
    _impl_.server_location_ = p;
  }
  return _impl_.server_location_;
}
inline ::dingodb::pb::common::Location* Peer::mutable_server_location() {
  ::dingodb::pb::common::Location* _msg = _internal_mutable_server_location();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Peer.server_location)
  return _msg;
}
inline void Peer::set_allocated_server_location(::dingodb::pb::common::Location* server_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.server_location_;
  }
  if (server_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(server_location);
    if (message_arena != submessage_arena) {
      server_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.server_location_ = server_location;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Peer.server_location)
}

// .dingodb.pb.common.Location raft_location = 4 [json_name = "raftLocation"];
inline bool Peer::_internal_has_raft_location() const {
  return this != internal_default_instance() && _impl_.raft_location_ != nullptr;
}
inline bool Peer::has_raft_location() const {
  return _internal_has_raft_location();
}
inline void Peer::clear_raft_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.raft_location_ != nullptr) {
    delete _impl_.raft_location_;
  }
  _impl_.raft_location_ = nullptr;
}
inline const ::dingodb::pb::common::Location& Peer::_internal_raft_location() const {
  const ::dingodb::pb::common::Location* p = _impl_.raft_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::common::Location&>(
      ::dingodb::pb::common::_Location_default_instance_);
}
inline const ::dingodb::pb::common::Location& Peer::raft_location() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Peer.raft_location)
  return _internal_raft_location();
}
inline void Peer::unsafe_arena_set_allocated_raft_location(
    ::dingodb::pb::common::Location* raft_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raft_location_);
  }
  _impl_.raft_location_ = raft_location;
  if (raft_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.common.Peer.raft_location)
}
inline ::dingodb::pb::common::Location* Peer::release_raft_location() {
  
  ::dingodb::pb::common::Location* temp = _impl_.raft_location_;
  _impl_.raft_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::common::Location* Peer::unsafe_arena_release_raft_location() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Peer.raft_location)
  
  ::dingodb::pb::common::Location* temp = _impl_.raft_location_;
  _impl_.raft_location_ = nullptr;
  return temp;
}
inline ::dingodb::pb::common::Location* Peer::_internal_mutable_raft_location() {
  
  if (_impl_.raft_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::common::Location>(GetArenaForAllocation());
    _impl_.raft_location_ = p;
  }
  return _impl_.raft_location_;
}
inline ::dingodb::pb::common::Location* Peer::mutable_raft_location() {
  ::dingodb::pb::common::Location* _msg = _internal_mutable_raft_location();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Peer.raft_location)
  return _msg;
}
inline void Peer::set_allocated_raft_location(::dingodb::pb::common::Location* raft_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.raft_location_;
  }
  if (raft_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(raft_location);
    if (message_arena != submessage_arena) {
      raft_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raft_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.raft_location_ = raft_location;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Peer.raft_location)
}

// -------------------------------------------------------------------

// Region

// uint64 id = 1 [json_name = "id"];
inline void Region::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t Region::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t Region::id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Region.id)
  return _internal_id();
}
inline void Region::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void Region::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Region.id)
}

// uint64 epoch = 2 [json_name = "epoch"];
inline void Region::clear_epoch() {
  _impl_.epoch_ = uint64_t{0u};
}
inline uint64_t Region::_internal_epoch() const {
  return _impl_.epoch_;
}
inline uint64_t Region::epoch() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Region.epoch)
  return _internal_epoch();
}
inline void Region::_internal_set_epoch(uint64_t value) {
  
  _impl_.epoch_ = value;
}
inline void Region::set_epoch(uint64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Region.epoch)
}

// string name = 3 [json_name = "name"];
inline void Region::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Region::name() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Region.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Region::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Region.name)
}
inline std::string* Region::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Region.name)
  return _s;
}
inline const std::string& Region::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Region::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Region::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Region::release_name() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Region.name)
  return _impl_.name_.Release();
}
inline void Region::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Region.name)
}

// .dingodb.pb.common.RegionState state = 4 [json_name = "state"];
inline void Region::clear_state() {
  _impl_.state_ = 0;
}
inline ::dingodb::pb::common::RegionState Region::_internal_state() const {
  return static_cast< ::dingodb::pb::common::RegionState >(_impl_.state_);
}
inline ::dingodb::pb::common::RegionState Region::state() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Region.state)
  return _internal_state();
}
inline void Region::_internal_set_state(::dingodb::pb::common::RegionState value) {
  
  _impl_.state_ = value;
}
inline void Region::set_state(::dingodb::pb::common::RegionState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Region.state)
}

// int64 leader_store_id = 5 [json_name = "leaderStoreId"];
inline void Region::clear_leader_store_id() {
  _impl_.leader_store_id_ = int64_t{0};
}
inline int64_t Region::_internal_leader_store_id() const {
  return _impl_.leader_store_id_;
}
inline int64_t Region::leader_store_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Region.leader_store_id)
  return _internal_leader_store_id();
}
inline void Region::_internal_set_leader_store_id(int64_t value) {
  
  _impl_.leader_store_id_ = value;
}
inline void Region::set_leader_store_id(int64_t value) {
  _internal_set_leader_store_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Region.leader_store_id)
}

// repeated .dingodb.pb.common.Peer peers = 6 [json_name = "peers"];
inline int Region::_internal_peers_size() const {
  return _impl_.peers_.size();
}
inline int Region::peers_size() const {
  return _internal_peers_size();
}
inline void Region::clear_peers() {
  _impl_.peers_.Clear();
}
inline ::dingodb::pb::common::Peer* Region::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Region.peers)
  return _impl_.peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Peer >*
Region::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.common.Region.peers)
  return &_impl_.peers_;
}
inline const ::dingodb::pb::common::Peer& Region::_internal_peers(int index) const {
  return _impl_.peers_.Get(index);
}
inline const ::dingodb::pb::common::Peer& Region::peers(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Region.peers)
  return _internal_peers(index);
}
inline ::dingodb::pb::common::Peer* Region::_internal_add_peers() {
  return _impl_.peers_.Add();
}
inline ::dingodb::pb::common::Peer* Region::add_peers() {
  ::dingodb::pb::common::Peer* _add = _internal_add_peers();
  // @@protoc_insertion_point(field_add:dingodb.pb.common.Region.peers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Peer >&
Region::peers() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.common.Region.peers)
  return _impl_.peers_;
}

// .dingodb.pb.common.Range range = 7 [json_name = "range"];
inline bool Region::_internal_has_range() const {
  return this != internal_default_instance() && _impl_.range_ != nullptr;
}
inline bool Region::has_range() const {
  return _internal_has_range();
}
inline void Region::clear_range() {
  if (GetArenaForAllocation() == nullptr && _impl_.range_ != nullptr) {
    delete _impl_.range_;
  }
  _impl_.range_ = nullptr;
}
inline const ::dingodb::pb::common::Range& Region::_internal_range() const {
  const ::dingodb::pb::common::Range* p = _impl_.range_;
  return p != nullptr ? *p : reinterpret_cast<const ::dingodb::pb::common::Range&>(
      ::dingodb::pb::common::_Range_default_instance_);
}
inline const ::dingodb::pb::common::Range& Region::range() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Region.range)
  return _internal_range();
}
inline void Region::unsafe_arena_set_allocated_range(
    ::dingodb::pb::common::Range* range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.range_);
  }
  _impl_.range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dingodb.pb.common.Region.range)
}
inline ::dingodb::pb::common::Range* Region::release_range() {
  
  ::dingodb::pb::common::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dingodb::pb::common::Range* Region::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_release:dingodb.pb.common.Region.range)
  
  ::dingodb::pb::common::Range* temp = _impl_.range_;
  _impl_.range_ = nullptr;
  return temp;
}
inline ::dingodb::pb::common::Range* Region::_internal_mutable_range() {
  
  if (_impl_.range_ == nullptr) {
    auto* p = CreateMaybeMessage<::dingodb::pb::common::Range>(GetArenaForAllocation());
    _impl_.range_ = p;
  }
  return _impl_.range_;
}
inline ::dingodb::pb::common::Range* Region::mutable_range() {
  ::dingodb::pb::common::Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.Region.range)
  return _msg;
}
inline void Region::set_allocated_range(::dingodb::pb::common::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.range_;
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.range_ = range;
  // @@protoc_insertion_point(field_set_allocated:dingodb.pb.common.Region.range)
}

// uint64 schema_id = 8 [json_name = "schemaId"];
inline void Region::clear_schema_id() {
  _impl_.schema_id_ = uint64_t{0u};
}
inline uint64_t Region::_internal_schema_id() const {
  return _impl_.schema_id_;
}
inline uint64_t Region::schema_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Region.schema_id)
  return _internal_schema_id();
}
inline void Region::_internal_set_schema_id(uint64_t value) {
  
  _impl_.schema_id_ = value;
}
inline void Region::set_schema_id(uint64_t value) {
  _internal_set_schema_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Region.schema_id)
}

// uint64 table_id = 9 [json_name = "tableId"];
inline void Region::clear_table_id() {
  _impl_.table_id_ = uint64_t{0u};
}
inline uint64_t Region::_internal_table_id() const {
  return _impl_.table_id_;
}
inline uint64_t Region::table_id() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Region.table_id)
  return _internal_table_id();
}
inline void Region::_internal_set_table_id(uint64_t value) {
  
  _impl_.table_id_ = value;
}
inline void Region::set_table_id(uint64_t value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Region.table_id)
}

// uint64 create_timestamp = 10 [json_name = "createTimestamp"];
inline void Region::clear_create_timestamp() {
  _impl_.create_timestamp_ = uint64_t{0u};
}
inline uint64_t Region::_internal_create_timestamp() const {
  return _impl_.create_timestamp_;
}
inline uint64_t Region::create_timestamp() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.Region.create_timestamp)
  return _internal_create_timestamp();
}
inline void Region::_internal_set_create_timestamp(uint64_t value) {
  
  _impl_.create_timestamp_ = value;
}
inline void Region::set_create_timestamp(uint64_t value) {
  _internal_set_create_timestamp(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.Region.create_timestamp)
}

// -------------------------------------------------------------------

// RegionMap

// uint64 epoch = 1 [json_name = "epoch"];
inline void RegionMap::clear_epoch() {
  _impl_.epoch_ = uint64_t{0u};
}
inline uint64_t RegionMap::_internal_epoch() const {
  return _impl_.epoch_;
}
inline uint64_t RegionMap::epoch() const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.RegionMap.epoch)
  return _internal_epoch();
}
inline void RegionMap::_internal_set_epoch(uint64_t value) {
  
  _impl_.epoch_ = value;
}
inline void RegionMap::set_epoch(uint64_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:dingodb.pb.common.RegionMap.epoch)
}

// repeated .dingodb.pb.common.Region regions = 2 [json_name = "regions"];
inline int RegionMap::_internal_regions_size() const {
  return _impl_.regions_.size();
}
inline int RegionMap::regions_size() const {
  return _internal_regions_size();
}
inline void RegionMap::clear_regions() {
  _impl_.regions_.Clear();
}
inline ::dingodb::pb::common::Region* RegionMap::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:dingodb.pb.common.RegionMap.regions)
  return _impl_.regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Region >*
RegionMap::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:dingodb.pb.common.RegionMap.regions)
  return &_impl_.regions_;
}
inline const ::dingodb::pb::common::Region& RegionMap::_internal_regions(int index) const {
  return _impl_.regions_.Get(index);
}
inline const ::dingodb::pb::common::Region& RegionMap::regions(int index) const {
  // @@protoc_insertion_point(field_get:dingodb.pb.common.RegionMap.regions)
  return _internal_regions(index);
}
inline ::dingodb::pb::common::Region* RegionMap::_internal_add_regions() {
  return _impl_.regions_.Add();
}
inline ::dingodb::pb::common::Region* RegionMap::add_regions() {
  ::dingodb::pb::common::Region* _add = _internal_add_regions();
  // @@protoc_insertion_point(field_add:dingodb.pb.common.RegionMap.regions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dingodb::pb::common::Region >&
RegionMap::regions() const {
  // @@protoc_insertion_point(field_list:dingodb.pb.common.RegionMap.regions)
  return _impl_.regions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace pb
}  // namespace dingodb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dingodb::pb::common::Engine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dingodb::pb::common::Engine>() {
  return ::dingodb::pb::common::Engine_descriptor();
}
template <> struct is_proto_enum< ::dingodb::pb::common::CoordinatorState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dingodb::pb::common::CoordinatorState>() {
  return ::dingodb::pb::common::CoordinatorState_descriptor();
}
template <> struct is_proto_enum< ::dingodb::pb::common::StoreState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dingodb::pb::common::StoreState>() {
  return ::dingodb::pb::common::StoreState_descriptor();
}
template <> struct is_proto_enum< ::dingodb::pb::common::RegionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dingodb::pb::common::RegionState>() {
  return ::dingodb::pb::common::RegionState_descriptor();
}
template <> struct is_proto_enum< ::dingodb::pb::common::PeerRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dingodb::pb::common::PeerRole>() {
  return ::dingodb::pb::common::PeerRole_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
