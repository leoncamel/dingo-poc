// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: store.proto

#include "store.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dingodb {
namespace pb {
namespace store {
PROTOBUF_CONSTEXPR AddRegionRequest::AddRegionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddRegionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddRegionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddRegionRequestDefaultTypeInternal() {}
  union {
    AddRegionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddRegionRequestDefaultTypeInternal _AddRegionRequest_default_instance_;
PROTOBUF_CONSTEXPR AddRegionResponse::AddRegionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddRegionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddRegionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddRegionResponseDefaultTypeInternal() {}
  union {
    AddRegionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddRegionResponseDefaultTypeInternal _AddRegionResponse_default_instance_;
PROTOBUF_CONSTEXPR DestroyRegionRequest::DestroyRegionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DestroyRegionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestroyRegionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestroyRegionRequestDefaultTypeInternal() {}
  union {
    DestroyRegionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestroyRegionRequestDefaultTypeInternal _DestroyRegionRequest_default_instance_;
PROTOBUF_CONSTEXPR DestroyRegionResponse::DestroyRegionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DestroyRegionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestroyRegionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestroyRegionResponseDefaultTypeInternal() {}
  union {
    DestroyRegionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestroyRegionResponseDefaultTypeInternal _DestroyRegionResponse_default_instance_;
PROTOBUF_CONSTEXPR KvGetRequest::KvGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvGetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvGetRequestDefaultTypeInternal() {}
  union {
    KvGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvGetRequestDefaultTypeInternal _KvGetRequest_default_instance_;
PROTOBUF_CONSTEXPR KvGetResponse::KvGetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvGetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvGetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvGetResponseDefaultTypeInternal() {}
  union {
    KvGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvGetResponseDefaultTypeInternal _KvGetResponse_default_instance_;
PROTOBUF_CONSTEXPR KvBatchGetRequest::KvBatchGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.region_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvBatchGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvBatchGetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvBatchGetRequestDefaultTypeInternal() {}
  union {
    KvBatchGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvBatchGetRequestDefaultTypeInternal _KvBatchGetRequest_default_instance_;
PROTOBUF_CONSTEXPR KvBatchGetResponse::KvBatchGetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kvs_)*/{}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvBatchGetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvBatchGetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvBatchGetResponseDefaultTypeInternal() {}
  union {
    KvBatchGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvBatchGetResponseDefaultTypeInternal _KvBatchGetResponse_default_instance_;
PROTOBUF_CONSTEXPR KvPutRequest::KvPutRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kv_)*/nullptr
  , /*decltype(_impl_.region_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvPutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvPutRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvPutRequestDefaultTypeInternal() {}
  union {
    KvPutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvPutRequestDefaultTypeInternal _KvPutRequest_default_instance_;
PROTOBUF_CONSTEXPR KvPutResponse::KvPutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvPutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvPutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvPutResponseDefaultTypeInternal() {}
  union {
    KvPutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvPutResponseDefaultTypeInternal _KvPutResponse_default_instance_;
PROTOBUF_CONSTEXPR KvBatchPutRequest::KvBatchPutRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kvs_)*/{}
  , /*decltype(_impl_.region_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvBatchPutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvBatchPutRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvBatchPutRequestDefaultTypeInternal() {}
  union {
    KvBatchPutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvBatchPutRequestDefaultTypeInternal _KvBatchPutRequest_default_instance_;
PROTOBUF_CONSTEXPR KvBatchPutResponse::KvBatchPutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvBatchPutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvBatchPutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvBatchPutResponseDefaultTypeInternal() {}
  union {
    KvBatchPutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvBatchPutResponseDefaultTypeInternal _KvBatchPutResponse_default_instance_;
PROTOBUF_CONSTEXPR KvPutIfAbsentRequest::KvPutIfAbsentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kv_)*/nullptr
  , /*decltype(_impl_.region_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvPutIfAbsentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvPutIfAbsentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvPutIfAbsentRequestDefaultTypeInternal() {}
  union {
    KvPutIfAbsentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvPutIfAbsentRequestDefaultTypeInternal _KvPutIfAbsentRequest_default_instance_;
PROTOBUF_CONSTEXPR KvPutIfAbsentResponse::KvPutIfAbsentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_.is_put_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvPutIfAbsentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvPutIfAbsentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvPutIfAbsentResponseDefaultTypeInternal() {}
  union {
    KvPutIfAbsentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvPutIfAbsentResponseDefaultTypeInternal _KvPutIfAbsentResponse_default_instance_;
PROTOBUF_CONSTEXPR KvBatchPutIfAbsentRequest::KvBatchPutIfAbsentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kvs_)*/{}
  , /*decltype(_impl_.region_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvBatchPutIfAbsentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvBatchPutIfAbsentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvBatchPutIfAbsentRequestDefaultTypeInternal() {}
  union {
    KvBatchPutIfAbsentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvBatchPutIfAbsentRequestDefaultTypeInternal _KvBatchPutIfAbsentRequest_default_instance_;
PROTOBUF_CONSTEXPR KvBatchPutIfAbsentResponse::KvBatchPutIfAbsentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.put_keys_)*/{}
  , /*decltype(_impl_.error_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KvBatchPutIfAbsentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KvBatchPutIfAbsentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KvBatchPutIfAbsentResponseDefaultTypeInternal() {}
  union {
    KvBatchPutIfAbsentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KvBatchPutIfAbsentResponseDefaultTypeInternal _KvBatchPutIfAbsentResponse_default_instance_;
}  // namespace store
}  // namespace pb
}  // namespace dingodb
static ::_pb::Metadata file_level_metadata_store_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_store_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_store_2eproto[1];

const uint32_t TableStruct_store_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::AddRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::AddRegionRequest, _impl_.region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::AddRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::AddRegionResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::DestroyRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::DestroyRegionRequest, _impl_.region_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::DestroyRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::DestroyRegionResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvGetRequest, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvGetRequest, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvGetResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvGetResponse, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchGetRequest, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchGetRequest, _impl_.keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchGetResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchGetResponse, _impl_.kvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutRequest, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutRequest, _impl_.kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutRequest, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutRequest, _impl_.kvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutResponse, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutIfAbsentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutIfAbsentRequest, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutIfAbsentRequest, _impl_.kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutIfAbsentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutIfAbsentResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvPutIfAbsentResponse, _impl_.is_put_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutIfAbsentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutIfAbsentRequest, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutIfAbsentRequest, _impl_.kvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutIfAbsentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutIfAbsentResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::dingodb::pb::store::KvBatchPutIfAbsentResponse, _impl_.put_keys_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dingodb::pb::store::AddRegionRequest)},
  { 7, -1, -1, sizeof(::dingodb::pb::store::AddRegionResponse)},
  { 14, -1, -1, sizeof(::dingodb::pb::store::DestroyRegionRequest)},
  { 21, -1, -1, sizeof(::dingodb::pb::store::DestroyRegionResponse)},
  { 28, -1, -1, sizeof(::dingodb::pb::store::KvGetRequest)},
  { 36, -1, -1, sizeof(::dingodb::pb::store::KvGetResponse)},
  { 44, -1, -1, sizeof(::dingodb::pb::store::KvBatchGetRequest)},
  { 52, -1, -1, sizeof(::dingodb::pb::store::KvBatchGetResponse)},
  { 60, -1, -1, sizeof(::dingodb::pb::store::KvPutRequest)},
  { 68, -1, -1, sizeof(::dingodb::pb::store::KvPutResponse)},
  { 75, -1, -1, sizeof(::dingodb::pb::store::KvBatchPutRequest)},
  { 83, -1, -1, sizeof(::dingodb::pb::store::KvBatchPutResponse)},
  { 90, -1, -1, sizeof(::dingodb::pb::store::KvPutIfAbsentRequest)},
  { 98, -1, -1, sizeof(::dingodb::pb::store::KvPutIfAbsentResponse)},
  { 106, -1, -1, sizeof(::dingodb::pb::store::KvBatchPutIfAbsentRequest)},
  { 114, -1, -1, sizeof(::dingodb::pb::store::KvBatchPutIfAbsentResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dingodb::pb::store::_AddRegionRequest_default_instance_._instance,
  &::dingodb::pb::store::_AddRegionResponse_default_instance_._instance,
  &::dingodb::pb::store::_DestroyRegionRequest_default_instance_._instance,
  &::dingodb::pb::store::_DestroyRegionResponse_default_instance_._instance,
  &::dingodb::pb::store::_KvGetRequest_default_instance_._instance,
  &::dingodb::pb::store::_KvGetResponse_default_instance_._instance,
  &::dingodb::pb::store::_KvBatchGetRequest_default_instance_._instance,
  &::dingodb::pb::store::_KvBatchGetResponse_default_instance_._instance,
  &::dingodb::pb::store::_KvPutRequest_default_instance_._instance,
  &::dingodb::pb::store::_KvPutResponse_default_instance_._instance,
  &::dingodb::pb::store::_KvBatchPutRequest_default_instance_._instance,
  &::dingodb::pb::store::_KvBatchPutResponse_default_instance_._instance,
  &::dingodb::pb::store::_KvPutIfAbsentRequest_default_instance_._instance,
  &::dingodb::pb::store::_KvPutIfAbsentResponse_default_instance_._instance,
  &::dingodb::pb::store::_KvBatchPutIfAbsentRequest_default_instance_._instance,
  &::dingodb::pb::store::_KvBatchPutIfAbsentResponse_default_instance_._instance,
};

const char descriptor_table_protodef_store_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013store.proto\022\020dingodb.pb.store\032\014common."
  "proto\032\013error.proto\"E\n\020AddRegionRequest\0221"
  "\n\006region\030\001 \001(\0132\031.dingodb.pb.common.Regio"
  "nR\006region\"B\n\021AddRegionResponse\022-\n\005error\030"
  "\001 \001(\0132\027.dingodb.pb.error.ErrorR\005error\"3\n"
  "\024DestroyRegionRequest\022\033\n\tregion_id\030\001 \001(\004"
  "R\010regionId\"F\n\025DestroyRegionResponse\022-\n\005e"
  "rror\030\001 \001(\0132\027.dingodb.pb.error.ErrorR\005err"
  "or\"=\n\014KvGetRequest\022\033\n\tregion_id\030\001 \001(\004R\010r"
  "egionId\022\020\n\003key\030\002 \001(\014R\003key\"T\n\rKvGetRespon"
  "se\022-\n\005error\030\001 \001(\0132\027.dingodb.pb.error.Err"
  "orR\005error\022\024\n\005value\030\002 \001(\014R\005value\"D\n\021KvBat"
  "chGetRequest\022\033\n\tregion_id\030\001 \001(\004R\010regionI"
  "d\022\022\n\004keys\030\002 \003(\014R\004keys\"r\n\022KvBatchGetRespo"
  "nse\022-\n\005error\030\001 \001(\0132\027.dingodb.pb.error.Er"
  "rorR\005error\022-\n\003kvs\030\002 \003(\0132\033.dingodb.pb.com"
  "mon.KeyValueR\003kvs\"X\n\014KvPutRequest\022\033\n\treg"
  "ion_id\030\001 \001(\004R\010regionId\022+\n\002kv\030\002 \001(\0132\033.din"
  "godb.pb.common.KeyValueR\002kv\">\n\rKvPutResp"
  "onse\022-\n\005error\030\001 \001(\0132\027.dingodb.pb.error.E"
  "rrorR\005error\"_\n\021KvBatchPutRequest\022\033\n\tregi"
  "on_id\030\001 \001(\004R\010regionId\022-\n\003kvs\030\002 \003(\0132\033.din"
  "godb.pb.common.KeyValueR\003kvs\"C\n\022KvBatchP"
  "utResponse\022-\n\005error\030\001 \001(\0132\027.dingodb.pb.e"
  "rror.ErrorR\005error\"`\n\024KvPutIfAbsentReques"
  "t\022\033\n\tregion_id\030\001 \001(\004R\010regionId\022+\n\002kv\030\002 \001"
  "(\0132\033.dingodb.pb.common.KeyValueR\002kv\"]\n\025K"
  "vPutIfAbsentResponse\022-\n\005error\030\001 \001(\0132\027.di"
  "ngodb.pb.error.ErrorR\005error\022\025\n\006is_put\030\002 "
  "\001(\010R\005isPut\"g\n\031KvBatchPutIfAbsentRequest\022"
  "\033\n\tregion_id\030\001 \001(\004R\010regionId\022-\n\003kvs\030\002 \003("
  "\0132\033.dingodb.pb.common.KeyValueR\003kvs\"f\n\032K"
  "vBatchPutIfAbsentResponse\022-\n\005error\030\001 \001(\013"
  "2\027.dingodb.pb.error.ErrorR\005error\022\031\n\010put_"
  "keys\030\002 \003(\014R\007putKeys2\337\005\n\014StoreService\022T\n\t"
  "AddRegion\022\".dingodb.pb.store.AddRegionRe"
  "quest\032#.dingodb.pb.store.AddRegionRespon"
  "se\022`\n\rDestroyRegion\022&.dingodb.pb.store.D"
  "estroyRegionRequest\032\'.dingodb.pb.store.D"
  "estroyRegionResponse\022H\n\005KvGet\022\036.dingodb."
  "pb.store.KvGetRequest\032\037.dingodb.pb.store"
  ".KvGetResponse\022W\n\nKvBatchGet\022#.dingodb.p"
  "b.store.KvBatchGetRequest\032$.dingodb.pb.s"
  "tore.KvBatchGetResponse\022H\n\005KvPut\022\036.dingo"
  "db.pb.store.KvPutRequest\032\037.dingodb.pb.st"
  "ore.KvPutResponse\022W\n\nKvBatchPut\022#.dingod"
  "b.pb.store.KvBatchPutRequest\032$.dingodb.p"
  "b.store.KvBatchPutResponse\022`\n\rKvPutIfAbs"
  "ent\022&.dingodb.pb.store.KvPutIfAbsentRequ"
  "est\032\'.dingodb.pb.store.KvPutIfAbsentResp"
  "onse\022o\n\022KvBatchPutIfAbsent\022+.dingodb.pb."
  "store.KvBatchPutIfAbsentRequest\032,.dingod"
  "b.pb.store.KvBatchPutIfAbsentResponseB\207\001"
  "\n\024com.dingodb.pb.storeB\nStoreProtoP\001\200\001\001\242"
  "\002\003DPS\252\002\020Dingodb.Pb.Store\312\002\020Dingodb\\Pb\\St"
  "ore\342\002\034Dingodb\\Pb\\Store\\GPBMetadata\352\002\022Din"
  "godb::Pb::Storeb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_store_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_error_2eproto,
};
static ::_pbi::once_flag descriptor_table_store_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_store_2eproto = {
    false, false, 2263, descriptor_table_protodef_store_2eproto,
    "store.proto",
    &descriptor_table_store_2eproto_once, descriptor_table_store_2eproto_deps, 2, 16,
    schemas, file_default_instances, TableStruct_store_2eproto::offsets,
    file_level_metadata_store_2eproto, file_level_enum_descriptors_store_2eproto,
    file_level_service_descriptors_store_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_store_2eproto_getter() {
  return &descriptor_table_store_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_store_2eproto(&descriptor_table_store_2eproto);
namespace dingodb {
namespace pb {
namespace store {

// ===================================================================

class AddRegionRequest::_Internal {
 public:
  static const ::dingodb::pb::common::Region& region(const AddRegionRequest* msg);
};

const ::dingodb::pb::common::Region&
AddRegionRequest::_Internal::region(const AddRegionRequest* msg) {
  return *msg->_impl_.region_;
}
void AddRegionRequest::clear_region() {
  if (GetArenaForAllocation() == nullptr && _impl_.region_ != nullptr) {
    delete _impl_.region_;
  }
  _impl_.region_ = nullptr;
}
AddRegionRequest::AddRegionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.AddRegionRequest)
}
AddRegionRequest::AddRegionRequest(const AddRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddRegionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region()) {
    _this->_impl_.region_ = new ::dingodb::pb::common::Region(*from._impl_.region_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.AddRegionRequest)
}

inline void AddRegionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddRegionRequest::~AddRegionRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.AddRegionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddRegionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.region_;
}

void AddRegionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.AddRegionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.region_ != nullptr) {
    delete _impl_.region_;
  }
  _impl_.region_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRegionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.common.Region region = 1 [json_name = "region"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddRegionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.AddRegionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.common.Region region = 1 [json_name = "region"];
  if (this->_internal_has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::region(this),
        _Internal::region(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.AddRegionRequest)
  return target;
}

size_t AddRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.AddRegionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.common.Region region = 1 [json_name = "region"];
  if (this->_internal_has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.region_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddRegionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddRegionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddRegionRequest::GetClassData() const { return &_class_data_; }


void AddRegionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddRegionRequest*>(&to_msg);
  auto& from = static_cast<const AddRegionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.AddRegionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_region()) {
    _this->_internal_mutable_region()->::dingodb::pb::common::Region::MergeFrom(
        from._internal_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddRegionRequest::CopyFrom(const AddRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.AddRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRegionRequest::IsInitialized() const {
  return true;
}

void AddRegionRequest::InternalSwap(AddRegionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.region_, other->_impl_.region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRegionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[0]);
}

// ===================================================================

class AddRegionResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const AddRegionResponse* msg);
};

const ::dingodb::pb::error::Error&
AddRegionResponse::_Internal::error(const AddRegionResponse* msg) {
  return *msg->_impl_.error_;
}
void AddRegionResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
AddRegionResponse::AddRegionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.AddRegionResponse)
}
AddRegionResponse::AddRegionResponse(const AddRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddRegionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.AddRegionResponse)
}

inline void AddRegionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddRegionResponse::~AddRegionResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.AddRegionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddRegionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void AddRegionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.AddRegionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRegionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddRegionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.AddRegionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.AddRegionResponse)
  return target;
}

size_t AddRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.AddRegionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddRegionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddRegionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddRegionResponse::GetClassData() const { return &_class_data_; }


void AddRegionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddRegionResponse*>(&to_msg);
  auto& from = static_cast<const AddRegionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.AddRegionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddRegionResponse::CopyFrom(const AddRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.AddRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRegionResponse::IsInitialized() const {
  return true;
}

void AddRegionResponse::InternalSwap(AddRegionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRegionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[1]);
}

// ===================================================================

class DestroyRegionRequest::_Internal {
 public:
};

DestroyRegionRequest::DestroyRegionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.DestroyRegionRequest)
}
DestroyRegionRequest::DestroyRegionRequest(const DestroyRegionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DestroyRegionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.region_id_ = from._impl_.region_id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.DestroyRegionRequest)
}

inline void DestroyRegionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DestroyRegionRequest::~DestroyRegionRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.DestroyRegionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestroyRegionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DestroyRegionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DestroyRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.DestroyRegionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroyRegionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 region_id = 1 [json_name = "regionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DestroyRegionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.DestroyRegionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_region_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.DestroyRegionRequest)
  return target;
}

size_t DestroyRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.DestroyRegionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_region_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestroyRegionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DestroyRegionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestroyRegionRequest::GetClassData() const { return &_class_data_; }


void DestroyRegionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DestroyRegionRequest*>(&to_msg);
  auto& from = static_cast<const DestroyRegionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.DestroyRegionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_region_id() != 0) {
    _this->_internal_set_region_id(from._internal_region_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestroyRegionRequest::CopyFrom(const DestroyRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.DestroyRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyRegionRequest::IsInitialized() const {
  return true;
}

void DestroyRegionRequest::InternalSwap(DestroyRegionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.region_id_, other->_impl_.region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyRegionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[2]);
}

// ===================================================================

class DestroyRegionResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const DestroyRegionResponse* msg);
};

const ::dingodb::pb::error::Error&
DestroyRegionResponse::_Internal::error(const DestroyRegionResponse* msg) {
  return *msg->_impl_.error_;
}
void DestroyRegionResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
DestroyRegionResponse::DestroyRegionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.DestroyRegionResponse)
}
DestroyRegionResponse::DestroyRegionResponse(const DestroyRegionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DestroyRegionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.DestroyRegionResponse)
}

inline void DestroyRegionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DestroyRegionResponse::~DestroyRegionResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.DestroyRegionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestroyRegionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void DestroyRegionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DestroyRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.DestroyRegionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroyRegionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DestroyRegionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.DestroyRegionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.DestroyRegionResponse)
  return target;
}

size_t DestroyRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.DestroyRegionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestroyRegionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DestroyRegionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestroyRegionResponse::GetClassData() const { return &_class_data_; }


void DestroyRegionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DestroyRegionResponse*>(&to_msg);
  auto& from = static_cast<const DestroyRegionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.DestroyRegionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestroyRegionResponse::CopyFrom(const DestroyRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.DestroyRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyRegionResponse::IsInitialized() const {
  return true;
}

void DestroyRegionResponse::InternalSwap(DestroyRegionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyRegionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[3]);
}

// ===================================================================

class KvGetRequest::_Internal {
 public:
};

KvGetRequest::KvGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvGetRequest)
}
KvGetRequest::KvGetRequest(const KvGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.region_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.region_id_ = from._impl_.region_id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvGetRequest)
}

inline void KvGetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.region_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KvGetRequest::~KvGetRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void KvGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.region_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 region_id = 1 [json_name = "regionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2 [json_name = "key"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_region_id(), target);
  }

  // bytes key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvGetRequest)
  return target;
}

size_t KvGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_region_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvGetRequest::GetClassData() const { return &_class_data_; }


void KvGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvGetRequest*>(&to_msg);
  auto& from = static_cast<const KvGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvGetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_region_id() != 0) {
    _this->_internal_set_region_id(from._internal_region_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvGetRequest::CopyFrom(const KvGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvGetRequest::IsInitialized() const {
  return true;
}

void KvGetRequest::InternalSwap(KvGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.region_id_, other->_impl_.region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[4]);
}

// ===================================================================

class KvGetResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const KvGetResponse* msg);
};

const ::dingodb::pb::error::Error&
KvGetResponse::_Internal::error(const KvGetResponse* msg) {
  return *msg->_impl_.error_;
}
void KvGetResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
KvGetResponse::KvGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvGetResponse)
}
KvGetResponse::KvGetResponse(const KvGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvGetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvGetResponse)
}

inline void KvGetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KvGetResponse::~KvGetResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvGetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void KvGetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvGetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // bytes value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvGetResponse)
  return target;
}

size_t KvGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvGetResponse::GetClassData() const { return &_class_data_; }


void KvGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvGetResponse*>(&to_msg);
  auto& from = static_cast<const KvGetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvGetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvGetResponse::CopyFrom(const KvGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvGetResponse::IsInitialized() const {
  return true;
}

void KvGetResponse::InternalSwap(KvGetResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvGetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[5]);
}

// ===================================================================

class KvBatchGetRequest::_Internal {
 public:
};

KvBatchGetRequest::KvBatchGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvBatchGetRequest)
}
KvBatchGetRequest::KvBatchGetRequest(const KvBatchGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvBatchGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.region_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.region_id_ = from._impl_.region_id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvBatchGetRequest)
}

inline void KvBatchGetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , decltype(_impl_.region_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KvBatchGetRequest::~KvBatchGetRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvBatchGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvBatchGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
}

void KvBatchGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvBatchGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvBatchGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  _impl_.region_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 region_id = 1 [json_name = "regionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes keys = 2 [json_name = "keys"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvBatchGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvBatchGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_region_id(), target);
  }

  // repeated bytes keys = 2 [json_name = "keys"];
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvBatchGetRequest)
  return target;
}

size_t KvBatchGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvBatchGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 2 [json_name = "keys"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keys_.size());
  for (int i = 0, n = _impl_.keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.keys_.Get(i));
  }

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_region_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvBatchGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvBatchGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvBatchGetRequest::GetClassData() const { return &_class_data_; }


void KvBatchGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvBatchGetRequest*>(&to_msg);
  auto& from = static_cast<const KvBatchGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  if (from._internal_region_id() != 0) {
    _this->_internal_set_region_id(from._internal_region_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvBatchGetRequest::CopyFrom(const KvBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchGetRequest::IsInitialized() const {
  return true;
}

void KvBatchGetRequest::InternalSwap(KvBatchGetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  swap(_impl_.region_id_, other->_impl_.region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[6]);
}

// ===================================================================

class KvBatchGetResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const KvBatchGetResponse* msg);
};

const ::dingodb::pb::error::Error&
KvBatchGetResponse::_Internal::error(const KvBatchGetResponse* msg) {
  return *msg->_impl_.error_;
}
void KvBatchGetResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
void KvBatchGetResponse::clear_kvs() {
  _impl_.kvs_.Clear();
}
KvBatchGetResponse::KvBatchGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvBatchGetResponse)
}
KvBatchGetResponse::KvBatchGetResponse(const KvBatchGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvBatchGetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kvs_){from._impl_.kvs_}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvBatchGetResponse)
}

inline void KvBatchGetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kvs_){arena}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KvBatchGetResponse::~KvBatchGetResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvBatchGetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvBatchGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kvs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void KvBatchGetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvBatchGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvBatchGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kvs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchGetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvBatchGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvBatchGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kvs_size()); i < n; i++) {
    const auto& repfield = this->_internal_kvs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvBatchGetResponse)
  return target;
}

size_t KvBatchGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvBatchGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->_impl_.kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvBatchGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvBatchGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvBatchGetResponse::GetClassData() const { return &_class_data_; }


void KvBatchGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvBatchGetResponse*>(&to_msg);
  auto& from = static_cast<const KvBatchGetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kvs_.MergeFrom(from._impl_.kvs_);
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvBatchGetResponse::CopyFrom(const KvBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchGetResponse::IsInitialized() const {
  return true;
}

void KvBatchGetResponse::InternalSwap(KvBatchGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kvs_.InternalSwap(&other->_impl_.kvs_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchGetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[7]);
}

// ===================================================================

class KvPutRequest::_Internal {
 public:
  static const ::dingodb::pb::common::KeyValue& kv(const KvPutRequest* msg);
};

const ::dingodb::pb::common::KeyValue&
KvPutRequest::_Internal::kv(const KvPutRequest* msg) {
  return *msg->_impl_.kv_;
}
void KvPutRequest::clear_kv() {
  if (GetArenaForAllocation() == nullptr && _impl_.kv_ != nullptr) {
    delete _impl_.kv_;
  }
  _impl_.kv_ = nullptr;
}
KvPutRequest::KvPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvPutRequest)
}
KvPutRequest::KvPutRequest(const KvPutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvPutRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){nullptr}
    , decltype(_impl_.region_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kv()) {
    _this->_impl_.kv_ = new ::dingodb::pb::common::KeyValue(*from._impl_.kv_);
  }
  _this->_impl_.region_id_ = from._impl_.region_id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvPutRequest)
}

inline void KvPutRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){nullptr}
    , decltype(_impl_.region_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KvPutRequest::~KvPutRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvPutRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvPutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.kv_;
}

void KvPutRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvPutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.kv_ != nullptr) {
    delete _impl_.kv_;
  }
  _impl_.kv_ = nullptr;
  _impl_.region_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvPutRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 region_id = 1 [json_name = "regionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.KeyValue kv = 2 [json_name = "kv"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_kv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvPutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvPutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_region_id(), target);
  }

  // .dingodb.pb.common.KeyValue kv = 2 [json_name = "kv"];
  if (this->_internal_has_kv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::kv(this),
        _Internal::kv(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvPutRequest)
  return target;
}

size_t KvPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvPutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.common.KeyValue kv = 2 [json_name = "kv"];
  if (this->_internal_has_kv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kv_);
  }

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_region_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvPutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvPutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvPutRequest::GetClassData() const { return &_class_data_; }


void KvPutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvPutRequest*>(&to_msg);
  auto& from = static_cast<const KvPutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvPutRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kv()) {
    _this->_internal_mutable_kv()->::dingodb::pb::common::KeyValue::MergeFrom(
        from._internal_kv());
  }
  if (from._internal_region_id() != 0) {
    _this->_internal_set_region_id(from._internal_region_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvPutRequest::CopyFrom(const KvPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvPutRequest::IsInitialized() const {
  return true;
}

void KvPutRequest::InternalSwap(KvPutRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KvPutRequest, _impl_.region_id_)
      + sizeof(KvPutRequest::_impl_.region_id_)
      - PROTOBUF_FIELD_OFFSET(KvPutRequest, _impl_.kv_)>(
          reinterpret_cast<char*>(&_impl_.kv_),
          reinterpret_cast<char*>(&other->_impl_.kv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KvPutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[8]);
}

// ===================================================================

class KvPutResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const KvPutResponse* msg);
};

const ::dingodb::pb::error::Error&
KvPutResponse::_Internal::error(const KvPutResponse* msg) {
  return *msg->_impl_.error_;
}
void KvPutResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
KvPutResponse::KvPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvPutResponse)
}
KvPutResponse::KvPutResponse(const KvPutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvPutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvPutResponse)
}

inline void KvPutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KvPutResponse::~KvPutResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvPutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvPutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void KvPutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvPutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvPutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvPutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvPutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvPutResponse)
  return target;
}

size_t KvPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvPutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvPutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvPutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvPutResponse::GetClassData() const { return &_class_data_; }


void KvPutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvPutResponse*>(&to_msg);
  auto& from = static_cast<const KvPutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvPutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvPutResponse::CopyFrom(const KvPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvPutResponse::IsInitialized() const {
  return true;
}

void KvPutResponse::InternalSwap(KvPutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvPutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[9]);
}

// ===================================================================

class KvBatchPutRequest::_Internal {
 public:
};

void KvBatchPutRequest::clear_kvs() {
  _impl_.kvs_.Clear();
}
KvBatchPutRequest::KvBatchPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvBatchPutRequest)
}
KvBatchPutRequest::KvBatchPutRequest(const KvBatchPutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvBatchPutRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kvs_){from._impl_.kvs_}
    , decltype(_impl_.region_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.region_id_ = from._impl_.region_id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvBatchPutRequest)
}

inline void KvBatchPutRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kvs_){arena}
    , decltype(_impl_.region_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KvBatchPutRequest::~KvBatchPutRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvBatchPutRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvBatchPutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kvs_.~RepeatedPtrField();
}

void KvBatchPutRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvBatchPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvBatchPutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kvs_.Clear();
  _impl_.region_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchPutRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 region_id = 1 [json_name = "regionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvBatchPutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvBatchPutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_region_id(), target);
  }

  // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kvs_size()); i < n; i++) {
    const auto& repfield = this->_internal_kvs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvBatchPutRequest)
  return target;
}

size_t KvBatchPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvBatchPutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->_impl_.kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_region_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvBatchPutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvBatchPutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvBatchPutRequest::GetClassData() const { return &_class_data_; }


void KvBatchPutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvBatchPutRequest*>(&to_msg);
  auto& from = static_cast<const KvBatchPutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvBatchPutRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kvs_.MergeFrom(from._impl_.kvs_);
  if (from._internal_region_id() != 0) {
    _this->_internal_set_region_id(from._internal_region_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvBatchPutRequest::CopyFrom(const KvBatchPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvBatchPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchPutRequest::IsInitialized() const {
  return true;
}

void KvBatchPutRequest::InternalSwap(KvBatchPutRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kvs_.InternalSwap(&other->_impl_.kvs_);
  swap(_impl_.region_id_, other->_impl_.region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchPutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[10]);
}

// ===================================================================

class KvBatchPutResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const KvBatchPutResponse* msg);
};

const ::dingodb::pb::error::Error&
KvBatchPutResponse::_Internal::error(const KvBatchPutResponse* msg) {
  return *msg->_impl_.error_;
}
void KvBatchPutResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
KvBatchPutResponse::KvBatchPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvBatchPutResponse)
}
KvBatchPutResponse::KvBatchPutResponse(const KvBatchPutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvBatchPutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvBatchPutResponse)
}

inline void KvBatchPutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KvBatchPutResponse::~KvBatchPutResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvBatchPutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvBatchPutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void KvBatchPutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvBatchPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvBatchPutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchPutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvBatchPutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvBatchPutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvBatchPutResponse)
  return target;
}

size_t KvBatchPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvBatchPutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvBatchPutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvBatchPutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvBatchPutResponse::GetClassData() const { return &_class_data_; }


void KvBatchPutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvBatchPutResponse*>(&to_msg);
  auto& from = static_cast<const KvBatchPutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvBatchPutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvBatchPutResponse::CopyFrom(const KvBatchPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvBatchPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchPutResponse::IsInitialized() const {
  return true;
}

void KvBatchPutResponse::InternalSwap(KvBatchPutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchPutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[11]);
}

// ===================================================================

class KvPutIfAbsentRequest::_Internal {
 public:
  static const ::dingodb::pb::common::KeyValue& kv(const KvPutIfAbsentRequest* msg);
};

const ::dingodb::pb::common::KeyValue&
KvPutIfAbsentRequest::_Internal::kv(const KvPutIfAbsentRequest* msg) {
  return *msg->_impl_.kv_;
}
void KvPutIfAbsentRequest::clear_kv() {
  if (GetArenaForAllocation() == nullptr && _impl_.kv_ != nullptr) {
    delete _impl_.kv_;
  }
  _impl_.kv_ = nullptr;
}
KvPutIfAbsentRequest::KvPutIfAbsentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvPutIfAbsentRequest)
}
KvPutIfAbsentRequest::KvPutIfAbsentRequest(const KvPutIfAbsentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvPutIfAbsentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){nullptr}
    , decltype(_impl_.region_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kv()) {
    _this->_impl_.kv_ = new ::dingodb::pb::common::KeyValue(*from._impl_.kv_);
  }
  _this->_impl_.region_id_ = from._impl_.region_id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvPutIfAbsentRequest)
}

inline void KvPutIfAbsentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){nullptr}
    , decltype(_impl_.region_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KvPutIfAbsentRequest::~KvPutIfAbsentRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvPutIfAbsentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvPutIfAbsentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.kv_;
}

void KvPutIfAbsentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvPutIfAbsentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvPutIfAbsentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.kv_ != nullptr) {
    delete _impl_.kv_;
  }
  _impl_.kv_ = nullptr;
  _impl_.region_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvPutIfAbsentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 region_id = 1 [json_name = "regionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dingodb.pb.common.KeyValue kv = 2 [json_name = "kv"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_kv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvPutIfAbsentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvPutIfAbsentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_region_id(), target);
  }

  // .dingodb.pb.common.KeyValue kv = 2 [json_name = "kv"];
  if (this->_internal_has_kv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::kv(this),
        _Internal::kv(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvPutIfAbsentRequest)
  return target;
}

size_t KvPutIfAbsentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvPutIfAbsentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.common.KeyValue kv = 2 [json_name = "kv"];
  if (this->_internal_has_kv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kv_);
  }

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_region_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvPutIfAbsentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvPutIfAbsentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvPutIfAbsentRequest::GetClassData() const { return &_class_data_; }


void KvPutIfAbsentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvPutIfAbsentRequest*>(&to_msg);
  auto& from = static_cast<const KvPutIfAbsentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvPutIfAbsentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kv()) {
    _this->_internal_mutable_kv()->::dingodb::pb::common::KeyValue::MergeFrom(
        from._internal_kv());
  }
  if (from._internal_region_id() != 0) {
    _this->_internal_set_region_id(from._internal_region_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvPutIfAbsentRequest::CopyFrom(const KvPutIfAbsentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvPutIfAbsentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvPutIfAbsentRequest::IsInitialized() const {
  return true;
}

void KvPutIfAbsentRequest::InternalSwap(KvPutIfAbsentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KvPutIfAbsentRequest, _impl_.region_id_)
      + sizeof(KvPutIfAbsentRequest::_impl_.region_id_)
      - PROTOBUF_FIELD_OFFSET(KvPutIfAbsentRequest, _impl_.kv_)>(
          reinterpret_cast<char*>(&_impl_.kv_),
          reinterpret_cast<char*>(&other->_impl_.kv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KvPutIfAbsentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[12]);
}

// ===================================================================

class KvPutIfAbsentResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const KvPutIfAbsentResponse* msg);
};

const ::dingodb::pb::error::Error&
KvPutIfAbsentResponse::_Internal::error(const KvPutIfAbsentResponse* msg) {
  return *msg->_impl_.error_;
}
void KvPutIfAbsentResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
KvPutIfAbsentResponse::KvPutIfAbsentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvPutIfAbsentResponse)
}
KvPutIfAbsentResponse::KvPutIfAbsentResponse(const KvPutIfAbsentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvPutIfAbsentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.is_put_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  _this->_impl_.is_put_ = from._impl_.is_put_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvPutIfAbsentResponse)
}

inline void KvPutIfAbsentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){nullptr}
    , decltype(_impl_.is_put_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KvPutIfAbsentResponse::~KvPutIfAbsentResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvPutIfAbsentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvPutIfAbsentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.error_;
}

void KvPutIfAbsentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvPutIfAbsentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvPutIfAbsentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _impl_.is_put_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvPutIfAbsentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_put = 2 [json_name = "isPut"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_put_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvPutIfAbsentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvPutIfAbsentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // bool is_put = 2 [json_name = "isPut"];
  if (this->_internal_is_put() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_put(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvPutIfAbsentResponse)
  return target;
}

size_t KvPutIfAbsentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvPutIfAbsentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  // bool is_put = 2 [json_name = "isPut"];
  if (this->_internal_is_put() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvPutIfAbsentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvPutIfAbsentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvPutIfAbsentResponse::GetClassData() const { return &_class_data_; }


void KvPutIfAbsentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvPutIfAbsentResponse*>(&to_msg);
  auto& from = static_cast<const KvPutIfAbsentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvPutIfAbsentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  if (from._internal_is_put() != 0) {
    _this->_internal_set_is_put(from._internal_is_put());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvPutIfAbsentResponse::CopyFrom(const KvPutIfAbsentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvPutIfAbsentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvPutIfAbsentResponse::IsInitialized() const {
  return true;
}

void KvPutIfAbsentResponse::InternalSwap(KvPutIfAbsentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KvPutIfAbsentResponse, _impl_.is_put_)
      + sizeof(KvPutIfAbsentResponse::_impl_.is_put_)
      - PROTOBUF_FIELD_OFFSET(KvPutIfAbsentResponse, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KvPutIfAbsentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[13]);
}

// ===================================================================

class KvBatchPutIfAbsentRequest::_Internal {
 public:
};

void KvBatchPutIfAbsentRequest::clear_kvs() {
  _impl_.kvs_.Clear();
}
KvBatchPutIfAbsentRequest::KvBatchPutIfAbsentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvBatchPutIfAbsentRequest)
}
KvBatchPutIfAbsentRequest::KvBatchPutIfAbsentRequest(const KvBatchPutIfAbsentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvBatchPutIfAbsentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kvs_){from._impl_.kvs_}
    , decltype(_impl_.region_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.region_id_ = from._impl_.region_id_;
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvBatchPutIfAbsentRequest)
}

inline void KvBatchPutIfAbsentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kvs_){arena}
    , decltype(_impl_.region_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KvBatchPutIfAbsentRequest::~KvBatchPutIfAbsentRequest() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvBatchPutIfAbsentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvBatchPutIfAbsentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kvs_.~RepeatedPtrField();
}

void KvBatchPutIfAbsentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvBatchPutIfAbsentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvBatchPutIfAbsentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kvs_.Clear();
  _impl_.region_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchPutIfAbsentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 region_id = 1 [json_name = "regionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvBatchPutIfAbsentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvBatchPutIfAbsentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_region_id(), target);
  }

  // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kvs_size()); i < n; i++) {
    const auto& repfield = this->_internal_kvs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvBatchPutIfAbsentRequest)
  return target;
}

size_t KvBatchPutIfAbsentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvBatchPutIfAbsentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dingodb.pb.common.KeyValue kvs = 2 [json_name = "kvs"];
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->_impl_.kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 region_id = 1 [json_name = "regionId"];
  if (this->_internal_region_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_region_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvBatchPutIfAbsentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvBatchPutIfAbsentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvBatchPutIfAbsentRequest::GetClassData() const { return &_class_data_; }


void KvBatchPutIfAbsentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvBatchPutIfAbsentRequest*>(&to_msg);
  auto& from = static_cast<const KvBatchPutIfAbsentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvBatchPutIfAbsentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kvs_.MergeFrom(from._impl_.kvs_);
  if (from._internal_region_id() != 0) {
    _this->_internal_set_region_id(from._internal_region_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvBatchPutIfAbsentRequest::CopyFrom(const KvBatchPutIfAbsentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvBatchPutIfAbsentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchPutIfAbsentRequest::IsInitialized() const {
  return true;
}

void KvBatchPutIfAbsentRequest::InternalSwap(KvBatchPutIfAbsentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kvs_.InternalSwap(&other->_impl_.kvs_);
  swap(_impl_.region_id_, other->_impl_.region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchPutIfAbsentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[14]);
}

// ===================================================================

class KvBatchPutIfAbsentResponse::_Internal {
 public:
  static const ::dingodb::pb::error::Error& error(const KvBatchPutIfAbsentResponse* msg);
};

const ::dingodb::pb::error::Error&
KvBatchPutIfAbsentResponse::_Internal::error(const KvBatchPutIfAbsentResponse* msg) {
  return *msg->_impl_.error_;
}
void KvBatchPutIfAbsentResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
}
KvBatchPutIfAbsentResponse::KvBatchPutIfAbsentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dingodb.pb.store.KvBatchPutIfAbsentResponse)
}
KvBatchPutIfAbsentResponse::KvBatchPutIfAbsentResponse(const KvBatchPutIfAbsentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KvBatchPutIfAbsentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.put_keys_){from._impl_.put_keys_}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    _this->_impl_.error_ = new ::dingodb::pb::error::Error(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:dingodb.pb.store.KvBatchPutIfAbsentResponse)
}

inline void KvBatchPutIfAbsentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.put_keys_){arena}
    , decltype(_impl_.error_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KvBatchPutIfAbsentResponse::~KvBatchPutIfAbsentResponse() {
  // @@protoc_insertion_point(destructor:dingodb.pb.store.KvBatchPutIfAbsentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KvBatchPutIfAbsentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.put_keys_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.error_;
}

void KvBatchPutIfAbsentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KvBatchPutIfAbsentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dingodb.pb.store.KvBatchPutIfAbsentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.put_keys_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.error_ != nullptr) {
    delete _impl_.error_;
  }
  _impl_.error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KvBatchPutIfAbsentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dingodb.pb.error.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes put_keys = 2 [json_name = "putKeys"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_put_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KvBatchPutIfAbsentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dingodb.pb.store.KvBatchPutIfAbsentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // repeated bytes put_keys = 2 [json_name = "putKeys"];
  for (int i = 0, n = this->_internal_put_keys_size(); i < n; i++) {
    const auto& s = this->_internal_put_keys(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dingodb.pb.store.KvBatchPutIfAbsentResponse)
  return target;
}

size_t KvBatchPutIfAbsentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dingodb.pb.store.KvBatchPutIfAbsentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes put_keys = 2 [json_name = "putKeys"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.put_keys_.size());
  for (int i = 0, n = _impl_.put_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.put_keys_.Get(i));
  }

  // .dingodb.pb.error.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KvBatchPutIfAbsentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KvBatchPutIfAbsentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KvBatchPutIfAbsentResponse::GetClassData() const { return &_class_data_; }


void KvBatchPutIfAbsentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KvBatchPutIfAbsentResponse*>(&to_msg);
  auto& from = static_cast<const KvBatchPutIfAbsentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dingodb.pb.store.KvBatchPutIfAbsentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.put_keys_.MergeFrom(from._impl_.put_keys_);
  if (from._internal_has_error()) {
    _this->_internal_mutable_error()->::dingodb::pb::error::Error::MergeFrom(
        from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KvBatchPutIfAbsentResponse::CopyFrom(const KvBatchPutIfAbsentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dingodb.pb.store.KvBatchPutIfAbsentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvBatchPutIfAbsentResponse::IsInitialized() const {
  return true;
}

void KvBatchPutIfAbsentResponse::InternalSwap(KvBatchPutIfAbsentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.put_keys_.InternalSwap(&other->_impl_.put_keys_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvBatchPutIfAbsentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_store_2eproto_getter, &descriptor_table_store_2eproto_once,
      file_level_metadata_store_2eproto[15]);
}

// ===================================================================

StoreService::~StoreService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* StoreService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_store_2eproto);
  return file_level_service_descriptors_store_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* StoreService::GetDescriptor() {
  return descriptor();
}

void StoreService::AddRegion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::store::AddRegionRequest*,
                         ::dingodb::pb::store::AddRegionResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddRegion() not implemented.");
  done->Run();
}

void StoreService::DestroyRegion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::store::DestroyRegionRequest*,
                         ::dingodb::pb::store::DestroyRegionResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DestroyRegion() not implemented.");
  done->Run();
}

void StoreService::KvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::store::KvGetRequest*,
                         ::dingodb::pb::store::KvGetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KvGet() not implemented.");
  done->Run();
}

void StoreService::KvBatchGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::store::KvBatchGetRequest*,
                         ::dingodb::pb::store::KvBatchGetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KvBatchGet() not implemented.");
  done->Run();
}

void StoreService::KvPut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::store::KvPutRequest*,
                         ::dingodb::pb::store::KvPutResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KvPut() not implemented.");
  done->Run();
}

void StoreService::KvBatchPut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::store::KvBatchPutRequest*,
                         ::dingodb::pb::store::KvBatchPutResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KvBatchPut() not implemented.");
  done->Run();
}

void StoreService::KvPutIfAbsent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::store::KvPutIfAbsentRequest*,
                         ::dingodb::pb::store::KvPutIfAbsentResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KvPutIfAbsent() not implemented.");
  done->Run();
}

void StoreService::KvBatchPutIfAbsent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::dingodb::pb::store::KvBatchPutIfAbsentRequest*,
                         ::dingodb::pb::store::KvBatchPutIfAbsentResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KvBatchPutIfAbsent() not implemented.");
  done->Run();
}

void StoreService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_store_2eproto[0]);
  switch(method->index()) {
    case 0:
      AddRegion(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::store::AddRegionRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::store::AddRegionResponse*>(
                 response),
             done);
      break;
    case 1:
      DestroyRegion(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::store::DestroyRegionRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::store::DestroyRegionResponse*>(
                 response),
             done);
      break;
    case 2:
      KvGet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::store::KvGetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::store::KvGetResponse*>(
                 response),
             done);
      break;
    case 3:
      KvBatchGet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::store::KvBatchGetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::store::KvBatchGetResponse*>(
                 response),
             done);
      break;
    case 4:
      KvPut(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::store::KvPutRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::store::KvPutResponse*>(
                 response),
             done);
      break;
    case 5:
      KvBatchPut(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::store::KvBatchPutRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::store::KvBatchPutResponse*>(
                 response),
             done);
      break;
    case 6:
      KvPutIfAbsent(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::store::KvPutIfAbsentRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::store::KvPutIfAbsentResponse*>(
                 response),
             done);
      break;
    case 7:
      KvBatchPutIfAbsent(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::dingodb::pb::store::KvBatchPutIfAbsentRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::dingodb::pb::store::KvBatchPutIfAbsentResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& StoreService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dingodb::pb::store::AddRegionRequest::default_instance();
    case 1:
      return ::dingodb::pb::store::DestroyRegionRequest::default_instance();
    case 2:
      return ::dingodb::pb::store::KvGetRequest::default_instance();
    case 3:
      return ::dingodb::pb::store::KvBatchGetRequest::default_instance();
    case 4:
      return ::dingodb::pb::store::KvPutRequest::default_instance();
    case 5:
      return ::dingodb::pb::store::KvBatchPutRequest::default_instance();
    case 6:
      return ::dingodb::pb::store::KvPutIfAbsentRequest::default_instance();
    case 7:
      return ::dingodb::pb::store::KvBatchPutIfAbsentRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& StoreService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dingodb::pb::store::AddRegionResponse::default_instance();
    case 1:
      return ::dingodb::pb::store::DestroyRegionResponse::default_instance();
    case 2:
      return ::dingodb::pb::store::KvGetResponse::default_instance();
    case 3:
      return ::dingodb::pb::store::KvBatchGetResponse::default_instance();
    case 4:
      return ::dingodb::pb::store::KvPutResponse::default_instance();
    case 5:
      return ::dingodb::pb::store::KvBatchPutResponse::default_instance();
    case 6:
      return ::dingodb::pb::store::KvPutIfAbsentResponse::default_instance();
    case 7:
      return ::dingodb::pb::store::KvBatchPutIfAbsentResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

StoreService_Stub::StoreService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
StoreService_Stub::StoreService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
StoreService_Stub::~StoreService_Stub() {
  if (owns_channel_) delete channel_;
}

void StoreService_Stub::AddRegion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::store::AddRegionRequest* request,
                              ::dingodb::pb::store::AddRegionResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void StoreService_Stub::DestroyRegion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::store::DestroyRegionRequest* request,
                              ::dingodb::pb::store::DestroyRegionResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void StoreService_Stub::KvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::store::KvGetRequest* request,
                              ::dingodb::pb::store::KvGetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void StoreService_Stub::KvBatchGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::store::KvBatchGetRequest* request,
                              ::dingodb::pb::store::KvBatchGetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void StoreService_Stub::KvPut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::store::KvPutRequest* request,
                              ::dingodb::pb::store::KvPutResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void StoreService_Stub::KvBatchPut(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::store::KvBatchPutRequest* request,
                              ::dingodb::pb::store::KvBatchPutResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void StoreService_Stub::KvPutIfAbsent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::store::KvPutIfAbsentRequest* request,
                              ::dingodb::pb::store::KvPutIfAbsentResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void StoreService_Stub::KvBatchPutIfAbsent(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::dingodb::pb::store::KvBatchPutIfAbsentRequest* request,
                              ::dingodb::pb::store::KvBatchPutIfAbsentResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace store
}  // namespace pb
}  // namespace dingodb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::AddRegionRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::store::AddRegionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::AddRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::AddRegionResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::store::AddRegionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::AddRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::DestroyRegionRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::store::DestroyRegionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::DestroyRegionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::DestroyRegionResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::store::DestroyRegionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::DestroyRegionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvGetRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvGetResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvBatchGetRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvBatchGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvBatchGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvBatchGetResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvBatchGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvBatchGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvPutRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvPutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvPutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvPutResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvPutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvPutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvBatchPutRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvBatchPutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvBatchPutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvBatchPutResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvBatchPutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvBatchPutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvPutIfAbsentRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvPutIfAbsentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvPutIfAbsentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvPutIfAbsentResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvPutIfAbsentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvPutIfAbsentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvBatchPutIfAbsentRequest*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvBatchPutIfAbsentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvBatchPutIfAbsentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dingodb::pb::store::KvBatchPutIfAbsentResponse*
Arena::CreateMaybeMessage< ::dingodb::pb::store::KvBatchPutIfAbsentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dingodb::pb::store::KvBatchPutIfAbsentResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
