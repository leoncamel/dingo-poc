// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

package com.dingodb.pb.common;

/**
 * Protobuf enum {@code dingodb.pb.common.RegionState}
 */
public enum RegionState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>REGION_NORMAL = 0;</code>
   */
  REGION_NORMAL(0),
  /**
   * <pre>
   * create new region
   * </pre>
   *
   * <code>REGION_NEW = 1;</code>
   */
  REGION_NEW(1),
  /**
   * <pre>
   * region has less than 3 peer
   * </pre>
   *
   * <code>REGION_DEGRADED = 2;</code>
   */
  REGION_DEGRADED(2),
  /**
   * <pre>
   * region has only one peer
   * </pre>
   *
   * <code>REGION_DANGER = 3;</code>
   */
  REGION_DANGER(3),
  /**
   * <pre>
   * start to expand
   * </pre>
   *
   * <code>REGION_EXPAND = 4;</code>
   */
  REGION_EXPAND(4),
  /**
   * <pre>
   * leader start to expand region
   * </pre>
   *
   * <code>REGION_EXPANDING = 5;</code>
   */
  REGION_EXPANDING(5),
  /**
   * <pre>
   * new peer joined raft
   * </pre>
   *
   * <code>REGION_EXPANDED = 6;</code>
   */
  REGION_EXPANDED(6),
  /**
   * <pre>
   * start to shrink
   * </pre>
   *
   * <code>REGION_SHRINK = 7;</code>
   */
  REGION_SHRINK(7),
  /**
   * <pre>
   * leader start to shrink region
   * </pre>
   *
   * <code>REGION_SHIRINKING = 8;</code>
   */
  REGION_SHIRINKING(8),
  /**
   * <pre>
   * shrink finish, maybe we don't need this state
   * </pre>
   *
   * <code>REGION_SHRANK = 9;</code>
   */
  REGION_SHRANK(9),
  /**
   * <pre>
   * region need to delete
   * </pre>
   *
   * <code>REGION_DELETE = 10;</code>
   */
  REGION_DELETE(10),
  /**
   * <pre>
   * region is deleting
   * </pre>
   *
   * <code>REGION_DELETING = 11;</code>
   */
  REGION_DELETING(11),
  /**
   * <pre>
   * region is deleted
   * </pre>
   *
   * <code>REGION_DELETED = 12;</code>
   */
  REGION_DELETED(12),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>REGION_NORMAL = 0;</code>
   */
  public static final int REGION_NORMAL_VALUE = 0;
  /**
   * <pre>
   * create new region
   * </pre>
   *
   * <code>REGION_NEW = 1;</code>
   */
  public static final int REGION_NEW_VALUE = 1;
  /**
   * <pre>
   * region has less than 3 peer
   * </pre>
   *
   * <code>REGION_DEGRADED = 2;</code>
   */
  public static final int REGION_DEGRADED_VALUE = 2;
  /**
   * <pre>
   * region has only one peer
   * </pre>
   *
   * <code>REGION_DANGER = 3;</code>
   */
  public static final int REGION_DANGER_VALUE = 3;
  /**
   * <pre>
   * start to expand
   * </pre>
   *
   * <code>REGION_EXPAND = 4;</code>
   */
  public static final int REGION_EXPAND_VALUE = 4;
  /**
   * <pre>
   * leader start to expand region
   * </pre>
   *
   * <code>REGION_EXPANDING = 5;</code>
   */
  public static final int REGION_EXPANDING_VALUE = 5;
  /**
   * <pre>
   * new peer joined raft
   * </pre>
   *
   * <code>REGION_EXPANDED = 6;</code>
   */
  public static final int REGION_EXPANDED_VALUE = 6;
  /**
   * <pre>
   * start to shrink
   * </pre>
   *
   * <code>REGION_SHRINK = 7;</code>
   */
  public static final int REGION_SHRINK_VALUE = 7;
  /**
   * <pre>
   * leader start to shrink region
   * </pre>
   *
   * <code>REGION_SHIRINKING = 8;</code>
   */
  public static final int REGION_SHIRINKING_VALUE = 8;
  /**
   * <pre>
   * shrink finish, maybe we don't need this state
   * </pre>
   *
   * <code>REGION_SHRANK = 9;</code>
   */
  public static final int REGION_SHRANK_VALUE = 9;
  /**
   * <pre>
   * region need to delete
   * </pre>
   *
   * <code>REGION_DELETE = 10;</code>
   */
  public static final int REGION_DELETE_VALUE = 10;
  /**
   * <pre>
   * region is deleting
   * </pre>
   *
   * <code>REGION_DELETING = 11;</code>
   */
  public static final int REGION_DELETING_VALUE = 11;
  /**
   * <pre>
   * region is deleted
   * </pre>
   *
   * <code>REGION_DELETED = 12;</code>
   */
  public static final int REGION_DELETED_VALUE = 12;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static RegionState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static RegionState forNumber(int value) {
    switch (value) {
      case 0: return REGION_NORMAL;
      case 1: return REGION_NEW;
      case 2: return REGION_DEGRADED;
      case 3: return REGION_DANGER;
      case 4: return REGION_EXPAND;
      case 5: return REGION_EXPANDING;
      case 6: return REGION_EXPANDED;
      case 7: return REGION_SHRINK;
      case 8: return REGION_SHIRINKING;
      case 9: return REGION_SHRANK;
      case 10: return REGION_DELETE;
      case 11: return REGION_DELETING;
      case 12: return REGION_DELETED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<RegionState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      RegionState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<RegionState>() {
          public RegionState findValueByNumber(int number) {
            return RegionState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.dingodb.pb.common.CommonProto.getDescriptor().getEnumTypes().get(3);
  }

  private static final RegionState[] VALUES = values();

  public static RegionState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private RegionState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:dingodb.pb.common.RegionState)
}

