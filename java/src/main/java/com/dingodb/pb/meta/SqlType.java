// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

package com.dingodb.pb.meta;

/**
 * <pre>
 * Define types about SQL.
 * </pre>
 *
 * Protobuf enum {@code dingodb.pb.meta.SqlType}
 */
public enum SqlType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SQL_TYPE_BOOLEAN = 0;</code>
   */
  SQL_TYPE_BOOLEAN(0),
  /**
   * <code>SQL_TYPE_INTEGER = 1;</code>
   */
  SQL_TYPE_INTEGER(1),
  /**
   * <code>SQL_TYPE_BIGINT = 2;</code>
   */
  SQL_TYPE_BIGINT(2),
  /**
   * <code>SQL_TYPE_DOUBLE = 3;</code>
   */
  SQL_TYPE_DOUBLE(3),
  /**
   * <code>SQL_TYPE_FLOAT = 4;</code>
   */
  SQL_TYPE_FLOAT(4),
  /**
   * <code>SQL_TYPE_DATE = 5;</code>
   */
  SQL_TYPE_DATE(5),
  /**
   * <code>SQL_TYPE_TIME = 6;</code>
   */
  SQL_TYPE_TIME(6),
  /**
   * <code>SQL_TYPE_TIMESTAMP = 7;</code>
   */
  SQL_TYPE_TIMESTAMP(7),
  /**
   * <code>SQL_TYPE_VARCHAR = 8;</code>
   */
  SQL_TYPE_VARCHAR(8),
  /**
   * <code>SQL_TYPE_ARRAY = 9;</code>
   */
  SQL_TYPE_ARRAY(9),
  /**
   * <code>SQL_TYPE_MULTISET = 10;</code>
   */
  SQL_TYPE_MULTISET(10),
  /**
   * <code>SQL_TYPE_ANY = 11;</code>
   */
  SQL_TYPE_ANY(11),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SQL_TYPE_BOOLEAN = 0;</code>
   */
  public static final int SQL_TYPE_BOOLEAN_VALUE = 0;
  /**
   * <code>SQL_TYPE_INTEGER = 1;</code>
   */
  public static final int SQL_TYPE_INTEGER_VALUE = 1;
  /**
   * <code>SQL_TYPE_BIGINT = 2;</code>
   */
  public static final int SQL_TYPE_BIGINT_VALUE = 2;
  /**
   * <code>SQL_TYPE_DOUBLE = 3;</code>
   */
  public static final int SQL_TYPE_DOUBLE_VALUE = 3;
  /**
   * <code>SQL_TYPE_FLOAT = 4;</code>
   */
  public static final int SQL_TYPE_FLOAT_VALUE = 4;
  /**
   * <code>SQL_TYPE_DATE = 5;</code>
   */
  public static final int SQL_TYPE_DATE_VALUE = 5;
  /**
   * <code>SQL_TYPE_TIME = 6;</code>
   */
  public static final int SQL_TYPE_TIME_VALUE = 6;
  /**
   * <code>SQL_TYPE_TIMESTAMP = 7;</code>
   */
  public static final int SQL_TYPE_TIMESTAMP_VALUE = 7;
  /**
   * <code>SQL_TYPE_VARCHAR = 8;</code>
   */
  public static final int SQL_TYPE_VARCHAR_VALUE = 8;
  /**
   * <code>SQL_TYPE_ARRAY = 9;</code>
   */
  public static final int SQL_TYPE_ARRAY_VALUE = 9;
  /**
   * <code>SQL_TYPE_MULTISET = 10;</code>
   */
  public static final int SQL_TYPE_MULTISET_VALUE = 10;
  /**
   * <code>SQL_TYPE_ANY = 11;</code>
   */
  public static final int SQL_TYPE_ANY_VALUE = 11;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SqlType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SqlType forNumber(int value) {
    switch (value) {
      case 0: return SQL_TYPE_BOOLEAN;
      case 1: return SQL_TYPE_INTEGER;
      case 2: return SQL_TYPE_BIGINT;
      case 3: return SQL_TYPE_DOUBLE;
      case 4: return SQL_TYPE_FLOAT;
      case 5: return SQL_TYPE_DATE;
      case 6: return SQL_TYPE_TIME;
      case 7: return SQL_TYPE_TIMESTAMP;
      case 8: return SQL_TYPE_VARCHAR;
      case 9: return SQL_TYPE_ARRAY;
      case 10: return SQL_TYPE_MULTISET;
      case 11: return SQL_TYPE_ANY;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SqlType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SqlType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SqlType>() {
          public SqlType findValueByNumber(int number) {
            return SqlType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.dingodb.pb.meta.MetaProto.getDescriptor().getEnumTypes().get(2);
  }

  private static final SqlType[] VALUES = values();

  public static SqlType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SqlType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:dingodb.pb.meta.SqlType)
}

