// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

package com.dingodb.pb.meta;

public interface TableDefinitionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:dingodb.pb.meta.TableDefinition)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <code>repeated .dingodb.pb.meta.ColumnDefinition columns = 2 [json_name = "columns"];</code>
   */
  java.util.List<com.dingodb.pb.meta.ColumnDefinition> 
      getColumnsList();
  /**
   * <code>repeated .dingodb.pb.meta.ColumnDefinition columns = 2 [json_name = "columns"];</code>
   */
  com.dingodb.pb.meta.ColumnDefinition getColumns(int index);
  /**
   * <code>repeated .dingodb.pb.meta.ColumnDefinition columns = 2 [json_name = "columns"];</code>
   */
  int getColumnsCount();
  /**
   * <code>repeated .dingodb.pb.meta.ColumnDefinition columns = 2 [json_name = "columns"];</code>
   */
  java.util.List<? extends com.dingodb.pb.meta.ColumnDefinitionOrBuilder> 
      getColumnsOrBuilderList();
  /**
   * <code>repeated .dingodb.pb.meta.ColumnDefinition columns = 2 [json_name = "columns"];</code>
   */
  com.dingodb.pb.meta.ColumnDefinitionOrBuilder getColumnsOrBuilder(
      int index);

  /**
   * <code>map&lt;string, .dingodb.pb.meta.Index&gt; indexes = 3 [json_name = "indexes"];</code>
   */
  int getIndexesCount();
  /**
   * <code>map&lt;string, .dingodb.pb.meta.Index&gt; indexes = 3 [json_name = "indexes"];</code>
   */
  boolean containsIndexes(
      java.lang.String key);
  /**
   * Use {@link #getIndexesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.dingodb.pb.meta.Index>
  getIndexes();
  /**
   * <code>map&lt;string, .dingodb.pb.meta.Index&gt; indexes = 3 [json_name = "indexes"];</code>
   */
  java.util.Map<java.lang.String, com.dingodb.pb.meta.Index>
  getIndexesMap();
  /**
   * <code>map&lt;string, .dingodb.pb.meta.Index&gt; indexes = 3 [json_name = "indexes"];</code>
   */
  /* nullable */
com.dingodb.pb.meta.Index getIndexesOrDefault(
      java.lang.String key,
      /* nullable */
com.dingodb.pb.meta.Index defaultValue);
  /**
   * <code>map&lt;string, .dingodb.pb.meta.Index&gt; indexes = 3 [json_name = "indexes"];</code>
   */
  com.dingodb.pb.meta.Index getIndexesOrThrow(
      java.lang.String key);

  /**
   * <code>uint32 version = 4 [json_name = "version"];</code>
   * @return The version.
   */
  int getVersion();

  /**
   * <code>uint64 ttl = 5 [json_name = "ttl"];</code>
   * @return The ttl.
   */
  long getTtl();

  /**
   * <code>.dingodb.pb.meta.PartitionRule table_partition = 6 [json_name = "tablePartition"];</code>
   * @return Whether the tablePartition field is set.
   */
  boolean hasTablePartition();
  /**
   * <code>.dingodb.pb.meta.PartitionRule table_partition = 6 [json_name = "tablePartition"];</code>
   * @return The tablePartition.
   */
  com.dingodb.pb.meta.PartitionRule getTablePartition();
  /**
   * <code>.dingodb.pb.meta.PartitionRule table_partition = 6 [json_name = "tablePartition"];</code>
   */
  com.dingodb.pb.meta.PartitionRuleOrBuilder getTablePartitionOrBuilder();

  /**
   * <code>.dingodb.pb.common.Engine engine = 7 [json_name = "engine"];</code>
   * @return The enum numeric value on the wire for engine.
   */
  int getEngineValue();
  /**
   * <code>.dingodb.pb.common.Engine engine = 7 [json_name = "engine"];</code>
   * @return The engine.
   */
  com.dingodb.pb.common.Engine getEngine();

  /**
   * <code>map&lt;string, string&gt; properties = 8 [json_name = "properties"];</code>
   */
  int getPropertiesCount();
  /**
   * <code>map&lt;string, string&gt; properties = 8 [json_name = "properties"];</code>
   */
  boolean containsProperties(
      java.lang.String key);
  /**
   * Use {@link #getPropertiesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getProperties();
  /**
   * <code>map&lt;string, string&gt; properties = 8 [json_name = "properties"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getPropertiesMap();
  /**
   * <code>map&lt;string, string&gt; properties = 8 [json_name = "properties"];</code>
   */
  /* nullable */
java.lang.String getPropertiesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <code>map&lt;string, string&gt; properties = 8 [json_name = "properties"];</code>
   */
  java.lang.String getPropertiesOrThrow(
      java.lang.String key);
}
